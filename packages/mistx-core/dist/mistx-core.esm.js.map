{"version":3,"file":"mistx-core.esm.js","sources":["../src/constants/index.ts","../src/errors.ts","../src/entities/AbstractCurrency.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/NativeCurrency.ts","../src/entities/Price.ts","../src/entities/Percent.ts","../src/utils.ts","../src/entities/Token.ts","../src/entities/Pair.ts","../src/entities/Route.ts","../src/entities/natives/Ether.ts","../src/entities/Trade.ts","../src/fetcher.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | number | string\n\nexport { JSBI }\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÃ–RLI = 5,\n  KOVAN = 42,\n  HARDHAT = 1337\n}\n\nexport enum Exchange {\n  UNI,\n  SUSHI,\n  UNDEFINED\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n)\n\nexport const FACTORY_ADDRESS: { [exchange in Exchange]: string } = {\n  [Exchange.UNI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [Exchange.SUSHI]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [Exchange.UNDEFINED]: '0x0'\n}\n\nexport const ROUTER_ADDRESS: { [exchange in Exchange]: string } = {\n  [Exchange.UNI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [Exchange.SUSHI]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9',\n  [Exchange.UNDEFINED]: '0x0'\n}\n\nexport const INIT_CODE_HASH: { [exchange in Exchange]: string } = {\n  [Exchange.UNI]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n  [Exchange.SUSHI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [Exchange.UNDEFINED]: '0x0'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport enum MethodName {\n  swapETHForExactTokens = 'swapETHForExactTokens',\n  swapExactETHForTokens = 'swapExactETHForTokens',\n  swapExactTokensForETH = 'swapExactTokensForETH',\n  swapExactTokensForTokens = 'swapExactTokensForTokens',\n  swapTokensForExactETH = 'swapTokensForExactETH',\n  swapTokensForExactTokens = 'swapTokensForExactTokens'\n}\n\nexport const GAS_ESTIMATES: { [methodName: string]: BigintIsh } = {\n  swapETHForExactTokens: '155485',\n  swapExactETHForTokens: '151393',\n  swapExactTokensForETH: '211606',\n  swapExactTokensForTokens: '216959',\n  swapTokensForExactETH: '241879',\n  swapTokensForExactTokens: '244052'\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(\n    chainId: number,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(\n      decimals >= 0 && decimals < 255 && Number.isInteger(decimals),\n      'DECIMALS'\n    )\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import _Big, { RoundingMode } from 'big.js'\n\nimport JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../constants'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(\n    numerator: BigintIsh,\n    denominator: BigintIsh = JSBI.BigInt(1)\n  ) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (\n      fractionish instanceof JSBI ||\n      typeof fractionish === 'number' ||\n      typeof fractionish === 'string'\n    )\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish)\n      return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(\n      JSBI.remainder(this.numerator, this.denominator),\n      this.denominator\n    )\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.add(this.numerator, otherParsed.numerator),\n        this.denominator\n      )\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.subtract(this.numerator, otherParsed.numerator),\n        this.denominator\n      )\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(significantDigits),\n      `${significantDigits} is not an integer.`\n    )\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding],\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(decimalPlaces),\n      `${decimalPlaces} is not an integer.`\n    )\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256, Rounding, BigintIsh } from '../constants'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(\n    currency: T,\n    rawAmount: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(\n    currency: T,\n    numerator: BigintIsh,\n    denominator?: BigintIsh\n  ) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(\n      JSBI.BigInt(10),\n      JSBI.BigInt(currency.decimals)\n    )\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      added.numerator,\n      added.denominator\n    )\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      subtracted.numerator,\n      subtracted.denominator\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      multiplied.numerator,\n      multiplied.denominator\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      divided.numerator,\n      divided.denominator\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super\n      .divide(this.decimalScale)\n      .toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super\n      .divide(this.decimalScale)\n      .toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString())\n      .div(this.decimalScale.toString())\n      .toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency.wrapped,\n      this.numerator,\n      this.denominator\n    )\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../constants'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport { CurrencyAmount } from './CurrencyAmount'\n\nexport class Price<\n  TBase extends Currency,\n  TQuote extends Currency\n> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase,\n      quoteCurrency: TQuote,\n      denominator: BigintIsh,\n      numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(\n      this.quoteCurrency,\n      this.baseCurrency,\n      this.numerator,\n      this.denominator\n    )\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(\n    other: Price<TQuote, TOtherQuote>\n  ): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(\n      this.baseCurrency,\n      other.quoteCurrency,\n      fraction.denominator,\n      fraction.numerator\n    )\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(\n      this.quoteCurrency,\n      result.numerator,\n      result.denominator\n    )\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.adjustedForDecimals.toSignificant(\n      significantDigits,\n      format,\n      rounding\n    )\n  }\n\n  public toFixed(\n    decimalPlaces: number = 4,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}","import { Rounding, _100 } from '../constants'\nimport { Fraction } from './Fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(\n    significantDigits: number = 5,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.multiply(_100_PERCENT).toSignificant(\n      significantDigits,\n      format,\n      rounding\n    )\n  }\n\n  public toFixed(\n    decimalPlaces: number = 2,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress, getCreate2Address } from '@ethersproject/address'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { Exchange, BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA, GAS_ESTIMATES, INIT_CODE_HASH, FACTORY_ADDRESS} from './constants'\nimport { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Price } from './entities/Price'\nimport { Token } from './entities/Token'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    //console.log('checksum', checksummedAddress, address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh)\n    : JSBI.BigInt(bigintIsh)\n}\n\nexport function estimatedGasForMethod(methodName: string = 'swapTokensForExactETH', numHops: BigintIsh = '1'): JSBI {\n  const gasBeforeHopFactor: BigintIsh = parseBigintIsh(GAS_ESTIMATES[methodName])\n  const factor = parseBigintIsh('0') // TODO: change this\n  const additionalGas = JSBI.multiply(parseBigintIsh(numHops), factor)\n  return JSBI.add(gasBeforeHopFactor, additionalGas)\n}\n\nexport function calculateMinerBribe(gasPriceToBeat: BigintIsh, estimatedGas: BigintIsh, margin: BigintIsh): JSBI {\n  gasPriceToBeat = parseBigintIsh(gasPriceToBeat)\n  estimatedGas = parseBigintIsh(estimatedGas)\n  const gasPriceToBeatWithMargin = JSBI.subtract(calculateMargin(gasPriceToBeat, margin), gasPriceToBeat)\n  return JSBI.multiply(gasPriceToBeatWithMargin, estimatedGas)\n}\n\n// add x%\nexport function calculateMargin(value: BigintIsh, margin: BigintIsh): JSBI {\n  value = parseBigintIsh(value)\n  margin = JSBI.multiply(parseBigintIsh(margin), parseBigintIsh('100'))\n  const numerator = JSBI.multiply(value, JSBI.add(parseBigintIsh('10000'), margin))\n  const denominator = parseBigintIsh('10000')\n  return JSBI.divide(numerator, denominator)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n\nexport const computePairAddress = ({\n  exchange,\n  tokenA,\n  tokenB,\n}: {\n  exchange: Exchange\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB)\n    ? [tokenA, tokenB]\n    : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    FACTORY_ADDRESS[exchange],\n    keccak256(\n      ['bytes'],\n      [pack(['address', 'address'], [token0.address, token1.address])]\n    ),\n    INIT_CODE_HASH[exchange]\n  )\n}\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<\n  TBase extends Currency,\n  TQuote extends Currency\n>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount\n    .subtract(outputAmount)\n    .divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n\n\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../constants'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils'\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return (\n      other.isToken &&\n      this.chainId === other.chainId &&\n      this.address === other.address\n    )\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(\n  currencyA: Currency,\n  currencyB: Currency\n): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH: { [chainId: number]: Token } = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.HARDHAT]: new Token(\n    ChainId.HARDHAT,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import { Price } from './Price'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport {\n  BigintIsh,\n  Exchange,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n} from '../constants'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { sqrt, computePairAddress } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './Token'\n\nexport class Pair {\n  public readonly exchange: Exchange\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token, exchange: Exchange): string {\n    return computePairAddress({\n      exchange,\n      tokenA,\n      tokenB,\n    })\n  }\n\n  public constructor(\n    currencyAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>,\n    exchange: Exchange\n  ) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(\n      tokenAmountB.currency\n    ) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency, exchange),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [\n      CurrencyAmount<Token>,\n      CurrencyAmount<Token>\n    ]\n    this.exchange = exchange\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(\n      this.token0,\n      this.token1,\n      result.denominator,\n      result.numerator\n    )\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(\n      this.token1,\n      this.token0,\n      result.denominator,\n      result.numerator\n    )\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO)\n    ) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0\n    )\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(\n      JSBI.multiply(inputReserve.quotient, _1000),\n      inputAmountWithFee\n    )\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.exchange\n      ),\n    ]\n  }\n\n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(\n        outputAmount.quotient,\n        this.reserveOf(outputAmount.currency).quotient\n      )\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0\n    )\n    const numerator = JSBI.multiply(\n      JSBI.multiply(inputReserve.quotient, outputAmount.quotient),\n      _1000\n    )\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\n      _997\n    )\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.exchange\n      ),\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(\n      tokenAmountB.currency\n    ) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(\n      tokenAmounts[0].currency.equals(this.token0) &&\n        tokenAmounts[1].currency.equals(this.token1),\n      'TOKEN'\n    )\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(\n        JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient),\n        this.reserve0.quotient\n      )\n      const amount1 = JSBI.divide(\n        JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient),\n        this.reserve1.quotient\n      )\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(\n      JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient),\n      'LIQUIDITY'\n    )\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(\n          JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient)\n        )\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(\n            totalSupply.quotient,\n            JSBI.subtract(rootK, rootKLast)\n          )\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(\n            CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity)\n          )\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(\n        JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient),\n        totalSupplyAdjusted.quotient\n      )\n    )\n  }\n}\n","\nimport invariant from 'tiny-invariant'\nimport { Currency } from './Currency'\nimport { Token } from './Token'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(\n      typeof output === 'undefined' ||\n        pairs[pairs.length - 1].involvesToken(output.wrapped),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(\n        currentInput.equals(pair.token0) || currentInput.equals(pair.token1),\n        'PATH'\n      )\n      const output = currentInput.equals(pair.token0)\n        ? pair.token1\n        : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(\n              pair.reserve0.currency,\n              pair.reserve1.currency,\n              pair.reserve0.quotient,\n              pair.reserve1.quotient\n            )\n          : new Price(\n              pair.reserve1.currency,\n              pair.reserve0.currency,\n              pair.reserve1.quotient,\n              pair.reserve0.quotient\n            )\n      )\n    }\n    const reduced = prices\n      .slice(1)\n      .reduce(\n        (accumulator, currentValue) => accumulator.multiply(currentValue),\n        prices[0]\n      )\n    return (this._midPrice = new Price(\n      this.input,\n      this.output,\n      reduced.denominator,\n      reduced.numerator\n    ))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}","import { Token, WETH } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth = WETH[this.chainId]\n    invariant(!!weth, 'WRAPPED')\n    return weth\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return (\n      this._etherCache[chainId] ??\n      (this._etherCache[chainId] = new Ether(chainId))\n    )\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { BigintIsh, Exchange, ONE, TradeType, ZERO, MethodName } from '../constants'\nimport { sortedInsert, calculateMinerBribe, estimatedGasForMethod, calculateMargin, computePriceImpact } from '../utils'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Pair } from './Pair'\nimport { Route } from './Route'\nimport { Ether } from './natives'\nimport { currencyEquals, Token, WETH} from './Token'\n\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\nexport type MinTradeEstimate = { [tradeType in TradeType]: CurrencyAmount<Token|Currency> }\n\ntype BribeEstimates = { [methodName in MethodName]: CurrencyAmount<Currency>}\n\nexport type BribeEstimate = {\n  estimates: BribeEstimates,\n  minBribe: CurrencyAmount<Currency>,\n  maxBribe: CurrencyAmount<Currency>,\n  meanBribe: CurrencyAmount<Currency>, \n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<\n  TInput extends Currency,\n  TOutput extends Currency\n>(a: InputOutput<TInput, TOutput>, b: InputOutput<TInput, TOutput>): number {\n  // must have same input and output token for comparison\n  invariant(\n    a.inputAmount.currency.equals(b.inputAmount.currency),\n    'INPUT_CURRENCY'\n  )\n  invariant(\n    a.outputAmount.currency.equals(b.outputAmount.currency),\n    'OUTPUT_CURRENCY'\n  )\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TTradeType extends TradeType\n>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TTradeType extends TradeType\n> {\n  /**\n   * The exchange of the trade e.g. Uni, Sushi\n   */\n  public readonly exchange: Exchange\n\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The bribe amount needed to execute the trade\n   */\n  public readonly minerBribe: CurrencyAmount<Token>\n  /**\n   * The estimated gas used for the trade\n   */\n  public readonly estimatedGas: BigintIsh\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  \n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n    * Constructs an exact in trade with the given amount in and route\n    * @param route route of the exact in trade\n    * @param amountIn the amount being passed in\n    * @param gasPriceToBeat the gas price used to calculate the bribe\n    * @param minerBribeMargin the margin to beat the gas price by\n    */\n    public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT, gasPriceToBeat, minerBribeMargin)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   * @param gasPriceToBeat the gas price used to calculate the bribe\n  * @param minerBribeMargin the margin to beat the gas price by\n   */\n   public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT, gasPriceToBeat, minerBribeMargin)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT\n      ? CurrencyAmount<TInput>\n      : CurrencyAmount<TOutput>,\n    tradeType: TTradeType,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const amounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    const etherIn = route.input.isNative\n    const etherOut = route.output.isNative\n    const methodName = Trade.methodNameForTradeType(tradeType, etherIn, etherOut)\n    const estimatedGas = estimatedGasForMethod(methodName, (route.path.length - 1).toString())\n    const minerBribe = calculateMinerBribe(gasPriceToBeat, estimatedGas, minerBribeMargin)\n\n    this.estimatedGas = estimatedGas.toString()\n    this.minerBribe = CurrencyAmount.fromRawAmount(WETH[route.chainId], minerBribe)\n    // this.minerBribe = CurrencyAmount.ether(minerBribe)\n\n    let modifiedInput: CurrencyAmount<Token> = amount.wrapped\n    let modifiedOutput: CurrencyAmount<Token> = amount.wrapped\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n\n      amounts[0] = amount.wrapped\n\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n\n        let inputAmount = amounts[i]\n        // if the input is ETH, calculate the output amount with the\n        // the input reduced by the minerBribe\n        if (etherIn && i === 0) {\n          // reduce the inputAmount by this.minerBribe\n          invariant(\n            inputAmount.greaterThan(this.minerBribe),\n            `Miner bribe ${this.minerBribe.toExact()} is greater than input ETH ${inputAmount.toExact()}`\n          )\n          const modifiedAmount = inputAmount.subtract(this.minerBribe)\n          // console.log('original amount in', inputAmount.toExact())\n          // console.log('modified amount in', modifiedAmount.toExact())\n          inputAmount = modifiedAmount\n          modifiedInput = modifiedAmount\n        }\n        \n        const [outputAmount, nextPair] = pair.getOutputAmount(inputAmount)\n\n        // if the output is ETH, reduce the output amount\n        // by the miner bribe\n        if (etherOut && i === route.path.length - 2) {\n          // reduce the outputAmount by this.minerBribe\n          invariant(\n            outputAmount.greaterThan(this.minerBribe),\n            `Miner bribe ${this.minerBribe.toExact()} is greater than output ETH ${outputAmount.toExact()}`\n          )\n          const modifiedAmount = outputAmount.subtract(this.minerBribe)\n          // console.log('original amount out', outputAmount.toExact())\n          // console.log('modified amount out', modifiedAmount.toExact())\n          amounts[i + 1] = modifiedAmount\n          modifiedOutput = outputAmount\n        } else {\n          modifiedOutput = outputAmount\n          amounts[i + 1] = outputAmount\n        }\n\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        let outputAmount = amounts[i]\n        // if the output is ETH, calculate the input amount with the\n        // the output increased by the minerBribe\n        if (etherOut && i === route.path.length - 1) {\n          // increase the outputAmount by this.minerBribe\n          const modifiedAmount = outputAmount.add(this.minerBribe)\n          // console.log('original amount out', outputAmount.toExact())\n          // console.log('modified amount out', modifiedAmount.toExact())\n          outputAmount = modifiedAmount\n          modifiedOutput = modifiedAmount\n        } else if (i === route.path.length - 1) {\n          modifiedOutput = outputAmount\n        }\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(outputAmount)\n        // if the input is ETH, increase the input amount\n        // by the miner bribe\n        if (etherIn && i === 1) {\n          // increase the input amount by this.minerBribe\n          const modifiedAmount = inputAmount.add(this.minerBribe)\n          // console.log('original amount in', inputAmount.toExact())\n          // console.log('modified amount in', modifiedAmount.toExact())\n          amounts[i - 1] = modifiedAmount\n          modifiedInput = inputAmount\n        } else if (i === 1) {\n          modifiedInput = inputAmount\n          amounts[i - 1] = modifiedInput\n        } else {\n          amounts[i - 1] = inputAmount\n        }\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.exchange = route.pairs[0].exchange\n    this.inputAmount = CurrencyAmount.fromFractionalAmount(\n      route.input,\n      amounts[0].numerator,\n      amounts[0].denominator\n    )\n    // this.inputAmount =\n    //   tradeType === TradeType.EXACT_INPUT\n    //     ? amount\n    //     : route.input === ETHER\n    //     ? CurrencyAmount.ether(amounts[0].raw)\n    //     : amounts[0]\n    this.outputAmount = CurrencyAmount.fromFractionalAmount(\n      route.output,\n      amounts[amounts.length - 1].numerator,\n      amounts[amounts.length - 1].denominator\n    )\n    // this.outputAmount =\n    //   tradeType === TradeType.EXACT_OUTPUT\n    //     ? amount\n    //     : route.output === ETHER\n    //     ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n    //     : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      route.input,\n      route.output,\n      modifiedInput.quotient,\n      modifiedOutput.quotient\n    )\n    // this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.priceImpact = computePriceImpact(\n      route.midPrice, \n      CurrencyAmount.fromFractionalAmount(\n        route.input,\n        modifiedInput.numerator,\n        modifiedInput.denominator\n      ), \n      CurrencyAmount.fromFractionalAmount(\n        route.output,\n        modifiedOutput.numerator,\n        modifiedOutput.denominator\n      )\n    )\n    \n    // console.log('old price impact', computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount).toSignificant(6))\n    // console.log('******************')\n    // console.log('*** TRADE START **')\n    // console.log('******************')\n    // console.log('inputAmount', this.inputAmount.toSignificant(6))\n    // console.log('outputAmount', this.outputAmount.toSignificant(6))\n    // console.log('executionPrice', this.executionPrice.toSignificant(6))\n    // console.log('nextMidPrice', this.nextMidPrice.toSignificant(6))\n    // console.log('priceImpact', this.priceImpact.toSignificant(6))\n    // console.log('minerBribe', this.minerBribe.toSignificant(6))\n    // console.log('estimatedGas', this.estimatedGas)\n    // console.log('******************')\n    // console.log('*** TRADE END **')\n    // console.log('******************')\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(\n        this.outputAmount.currency,\n        slippageAdjustedAmountOut\n      )\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(\n        this.inputAmount.currency,\n        slippageAdjustedAmountIn\n      )\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param exchange the exchange this trade will be performed on\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @param gasPriceToBeat used to calculate the miner bribe\n   * @param minerBribeMargin used as the margin for the miner bribe calculation\n   */\n  public static bestTradeExactIn<\n    TInput extends Currency,\n    TOutput extends Currency\n>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(nextAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const tradeType = TradeType.EXACT_INPUT\n    const amountIn = nextAmountIn.wrapped//wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = currencyOut.wrapped//wrappedCurrency(currencyOut, chainId)\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        try {\n          const newTrade = new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            tradeType,\n            gasPriceToBeat,\n            minerBribeMargin\n          )\n          sortedInsert(\n            bestTrades,\n            newTrade,\n            maxNumResults,\n            tradeComparator\n          )\n        } catch (e) {\n          // catch the invariant\n          // console.log('trade constructor err', e)\n        }\n        \n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          gasPriceToBeat,\n          minerBribeMargin,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param exchange the exchange this trade will be performed on\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @param gasPriceToBeat used to calculate the miner bribe\n   * @param minerBribeMargin used as the margin for the miner bribe calculation\n   */\n  public static bestTradeExactOut<\n    TInput extends Currency,\n    TOutput extends Currency\n>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(nextAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    \n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        try {\n          const newTrade = new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT,\n            gasPriceToBeat,\n            minerBribeMargin\n          )\n          sortedInsert(\n            bestTrades,\n            newTrade,\n            maxNumResults,\n            tradeComparator\n          )\n        } catch (e) {\n          // catch the invariant\n          // console.log('trade constructor err', e)\n        }\n        \n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          gasPriceToBeat,\n          minerBribeMargin,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * return the mistX router method name for the trade\n   * @param tradeType the type of trade, TradeType\n   * @param etherIn the input currency is ether\n   * @param etherOut the output currency is ether\n   * @param useFeeOnTransfer Whether any of the tokens in the path are fee on transfer tokens, TradeOptions.feeOnTransfer\n   * @param enforceUseFeeOnTransfer use to throw an invariant if there is no useFeeOnTransfer option for TradeType.EXACT_OUTPUT trades\n   */\n  public static methodNameForTradeType(\n    tradeType: TradeType,\n    etherIn: boolean,\n    etherOut: boolean,\n    useFeeOnTransfer?: boolean\n  ): string {\n    let methodName: string\n    switch (tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = 'swapExactETHForTokens'\n        } else if (etherOut) {\n          methodName = 'swapExactTokensForETH'\n        } else {\n          methodName = 'swapExactTokensForTokens'\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n        } else {\n          methodName = 'swapTokensForExactTokens'\n        }\n        break\n    }\n    return methodName\n  }\n\n  /**\n   * return the mistX router method name for the trade\n   * @param pairs\n   * @param currencyIn\n   * @param currencyOut\n   * @param gasPriceToBeat\n   * @param minerBribeMargin\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   */\n  public static estimateMinTradeAmounts(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyOut: Currency,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    minTradeMargin: BigintIsh,\n    { maxHops = 3 }: BestTradeOptions = {}\n  ): MinTradeEstimate | null {\n    \n    const etherIn = currencyIn.isNative\n    const etherOut = currencyOut.isNative\n\n    if (!etherIn && !etherOut) return null\n\n    const exactInGas = estimatedGasForMethod(\n      Trade.methodNameForTradeType(TradeType.EXACT_INPUT, etherIn, etherOut),\n      maxHops.toString()\n    )\n    const exactOutGas = estimatedGasForMethod(\n      Trade.methodNameForTradeType(TradeType.EXACT_OUTPUT, etherIn, etherOut),\n      maxHops.toString()\n    )\n\n    const exactInBribe = calculateMargin(\n      calculateMinerBribe(gasPriceToBeat, exactInGas, minerBribeMargin),\n      minTradeMargin\n    )\n    const exactOutBribe = calculateMargin(\n      calculateMinerBribe(gasPriceToBeat, exactOutGas, minerBribeMargin),\n      minTradeMargin\n    )\n\n    let minTokenAmountIn: CurrencyAmount<Token|Currency> | undefined\n    let minTokenAmountOut: CurrencyAmount<Token|Currency> | undefined\n    if (etherIn){\n      const outTrade = Trade.bestTradeExactOut(\n        pairs,\n        currencyOut,\n        CurrencyAmount.fromRawAmount(currencyIn, exactOutBribe),\n        '0',\n        '0'\n      )[0]\n      if (outTrade){\n        minTokenAmountIn = CurrencyAmount.fromRawAmount(currencyIn, exactInBribe)\n        minTokenAmountOut = outTrade.inputAmount\n      }\n    } else if (etherOut){\n      const inTrade = Trade.bestTradeExactIn(\n        pairs,\n        CurrencyAmount.fromRawAmount(currencyOut, exactInBribe),\n        currencyIn,\n        '0',\n        '0'\n      )[0]\n      if (inTrade){\n        minTokenAmountIn = inTrade.outputAmount\n        minTokenAmountOut = CurrencyAmount.fromRawAmount(currencyIn, exactOutBribe)\n      }\n      \n    }\n    if (!minTokenAmountIn || !minTokenAmountOut) return null\n\n    return {\n      [TradeType.EXACT_INPUT]: minTokenAmountIn,\n      [TradeType.EXACT_OUTPUT]: minTokenAmountOut\n    }\n  }\n\n  /**\n   * Estimate bribe amounts given gas price and margin\n   * @param gasPriceToBeat\n   * @param minerBribeMargin\n   */\n   public static estimateBribeAmounts(\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n  ): BribeEstimate | null {\n    const ETH = Ether.onChain(1)\n    const bribesByMethod: BribeEstimates  = {\n      [MethodName.swapETHForExactTokens]: CurrencyAmount.fromRawAmount(ETH, calculateMinerBribe(gasPriceToBeat, estimatedGasForMethod('swapETHForExactTokens'), minerBribeMargin)),\n      [MethodName.swapExactETHForTokens]: CurrencyAmount.fromRawAmount(ETH, calculateMinerBribe(gasPriceToBeat, estimatedGasForMethod('swapExactETHForTokens'), minerBribeMargin)),\n      [MethodName.swapExactTokensForETH]: CurrencyAmount.fromRawAmount(ETH, calculateMinerBribe(gasPriceToBeat, estimatedGasForMethod('swapExactTokensForETH'), minerBribeMargin)),\n      [MethodName.swapExactTokensForTokens]: CurrencyAmount.fromRawAmount(ETH, calculateMinerBribe(gasPriceToBeat, estimatedGasForMethod('swapExactTokensForTokens'), minerBribeMargin)),\n      [MethodName.swapTokensForExactETH]: CurrencyAmount.fromRawAmount(ETH, calculateMinerBribe(gasPriceToBeat, estimatedGasForMethod('swapTokensForExactETH'), minerBribeMargin)),\n      [MethodName.swapTokensForExactTokens]: CurrencyAmount.fromRawAmount(ETH, calculateMinerBribe(gasPriceToBeat, estimatedGasForMethod('swapTokensForExactTokens'), minerBribeMargin)),\n    }\n    let minBribe: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(ETH, '1000000000000000000000000000000000000000000000000')\n    let maxBribe: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(ETH, '0')\n    let totalBribe: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(ETH, '0')\n    for (const methodName in MethodName){\n      const bribe: CurrencyAmount<Currency> = bribesByMethod[methodName as MethodName]\n      \n      totalBribe.add(bribe)\n      if (bribe.lessThan(minBribe)) minBribe = bribe\n      if (bribe.greaterThan(maxBribe)) maxBribe = bribe\n    }\n\n    const meanfraction: Fraction = totalBribe.divide(String(Object.keys(MethodName).length))\n    const meanBribe = CurrencyAmount.fromRawAmount(ETH, JSBI.divide(meanfraction.numerator,meanfraction.denominator))\n    return {\n      estimates: bribesByMethod,\n      minBribe,\n      maxBribe,\n      meanBribe,\n    }\n    \n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/Token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { TradeType } from './constants'\nimport { Currency, CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: [SwapDataArr, string]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport interface SwapData {\n  amount0: string\n  amount1: string\n  path: string[]\n  to: string\n  deadline: string\n}\n\nexport type SwapDataArr = [string, string, string[], string, string]\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n   public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const minerBribe: string = toHex(trade.minerBribe)\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n    const swapData: SwapData = {\n      amount0: amountIn,\n      amount1: amountOut,\n      path,\n      to,\n      deadline\n    }\n    let value: string\n    const methodName = Trade.methodNameForTradeType(trade.tradeType, etherIn, etherOut, useFeeOnTransfer)\n    \n    switch (methodName) {\n      case 'swapExactETHForTokens':\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = amountIn\n        break\n      case 'swapExactTokensForETH':\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = ZERO_HEX\n        break\n      case 'swapExactTokensForTokens':\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = minerBribe\n        break\n      case 'swapETHForExactTokens':\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = amountIn\n        break\n      case 'swapTokensForExactETH':\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        swapData.amount0 = amountOut\n        swapData.amount1 = amountIn\n        value = minerBribe\n        break\n      case 'swapTokensForExactTokens':\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        swapData.amount0 = amountOut\n        swapData.amount1 = amountIn\n        value = minerBribe\n        break\n      default:\n        // args = []\n        value = ''\n    }\n    const swapDataArr: SwapDataArr = [swapData.amount0, swapData.amount1, swapData.path, swapData.to, swapData.deadline]\n    const args: [SwapDataArr, string] = [swapDataArr, minerBribe]\n\n    invariant((methodName && args && value), 'CALL_PARAMS_MISSING')\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["ChainId","Exchange","TradeType","Rounding","MaxUint256","JSBI","BigInt","FACTORY_ADDRESS","UNI","SUSHI","UNDEFINED","ROUTER_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","MethodName","GAS_ESTIMATES","swapETHForExactTokens","swapExactETHForTokens","swapExactTokensForETH","swapExactTokensForTokens","swapTokensForExactETH","swapTokensForExactTokens","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","AbstractCurrency","chainId","decimals","symbol","Number","isSafeInteger","invariant","isInteger","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","NativeCurrency","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","_100_PERCENT","Percent","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","estimatedGasForMethod","methodName","numHops","gasBeforeHopFactor","factor","additionalGas","calculateMinerBribe","gasPriceToBeat","estimatedGas","margin","gasPriceToBeatWithMargin","calculateMargin","sqrt","y","z","x","notEqual","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","computePairAddress","exchange","tokenA","tokenB","sortsBefore","token0","token1","getCreate2Address","keccak256","pack","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","Token","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","HARDHAT","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","Pair","currencyAmountA","tokenAmountB","tokenAmounts","liquidityToken","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputReserve","outputReserve","inputAmountWithFee","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","pairs","input","output","every","pair","wrappedInput","path","entries","i","currentInput","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","Ether","onChain","_etherCache","isNative","weth","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","minerBribeMargin","amounts","Array","nextPairs","etherIn","etherOut","methodNameForTradeType","minerBribe","modifiedInput","modifiedOutput","EXACT_INPUT","modifiedAmount","nextPair","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","newTrade","e","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","useFeeOnTransfer","estimateMinTradeAmounts","minTradeMargin","exactInGas","exactOutGas","exactInBribe","exactOutBribe","minTokenAmountIn","minTokenAmountOut","outTrade","inTrade","estimateBribeAmounts","ETH","bribesByMethod","minBribe","maxBribe","totalBribe","bribe","meanfraction","String","keys","meanBribe","estimates","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","Boolean","feeOnTransfer","swapData","swapDataArr"],"mappings":"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"}