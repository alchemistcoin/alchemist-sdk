{"version":3,"file":"mistx-connect.cjs.production.min.js","sources":["../src/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client'\nimport { BigNumberish, BigNumber } from '@ethersproject/bignumber'\n\nexport enum Event {\n  FEES_CHANGE = 'FEES_CHANGE',\n  SOCKET_SESSION = 'SOCKET_SESSION',\n  SOCKET_ERR = 'SOCKET_ERR',\n  BUNDLE_REQUEST = 'BUNDLE_REQUEST',\n  MISTX_BUNDLE_REQUEST = 'MISTX_BUNDLE_REQUEST',\n  BUNDLE_STATUS_REQUEST = 'BUNDLE_STATUS_REQUEST',\n  BUNDLE_STATUS_RESPONSE = 'BUNDLE_STATUS_RESPONSE',\n  BUNDLE_RESPONSE = 'BUNDLE_RESPONSE',\n  BUNDLE_CANCEL_REQUEST = 'BUNDLE_CANCEL_REQUEST'\n}\n\nexport interface Fee {\n  maxFeePerGas: BigNumber\n  maxPriorityFeePerGas: BigNumber\n}\nexport interface Fees {\n  block: number\n  baseFeePerGas: BigNumber\n  default: Fee\n  low: Fee\n  med: Fee\n  high: Fee\n}\n\nexport enum Status {\n  PENDING_BUNDLE = 'PENDING_BUNDLE',\n  FAILED_BUNDLE = 'FAILED_BUNDLE',\n  SUCCESSFUL_BUNDLE = 'SUCCESSFUL_BUNDLE',\n  CANCEL_BUNDLE_SUCCESSFUL = 'CANCEL_BUNDLE_SUCCESSFUL',\n  BUNDLE_NOT_FOUND = 'BUNDLE_NOT_FOUND'\n}\n\nexport const STATUS_LOCALES: Record<string, string> = {\n  PENDING_BUNDLE: 'Flashbots working on including your swap',\n  FAILED_BUNDLE: 'Failed',\n  SUCCESSFUL_BUNDLE: 'Success',\n  CANCEL_BUNDLE_SUCCESSFUL: 'Cancelled',\n  BUNDLE_NOT_FOUND: 'Failed'\n}\n\nexport enum Diagnosis {\n  LOWER_THAN_TAIL = 'LOWER_THAN_TAIL',\n  NOT_A_FLASHBLOCK = 'NOT_A_FLASHBLOCK',\n  BUNDLE_OUTBID = 'BUNDLE_OUTBID',\n  ERROR_API_BEHIND = 'ERROR_API_BEHIND',\n  MISSING_BLOCK_DATA = 'MISSING_BLOCK_DATA',\n  ERROR_UNKNOWN = 'ERROR_UNKNOWN'\n}\n\nexport interface MistXVersion {\n  api: string\n  client: string\n}\n\nexport interface SocketSession {\n  token: string\n  version: MistXVersion | undefined\n}\n\nexport interface TransactionReq {\n  serialized: string // serialized transaction\n  raw: SwapReq | undefined // raw def. of each type of trade\n  estimatedGas?: number\n  estimatedEffectiveGasPrice?: number\n}\n\nexport interface TransactionProcessed {\n  serialized: string // serialized transaction\n  bundle: string // bundle.serialized\n  raw: SwapReq | undefined // raw def. of each type of trade\n  estimatedGas: number\n  estimatedEffectiveGasPrice: number\n}\n\nexport interface BundleReq {\n  transactions: TransactionReq[] | string[]\n  chainId?: number\n  bribe?: string // BigNumber\n  from?: string\n  deadline?: BigNumberish\n  simulateOnly?: boolean\n}\n\nexport interface SwapReq {\n  amount0: BigNumberish\n  amount1: BigNumberish\n  path: Array<string>\n  to: string\n}\n\nexport interface BundleProcessed {\n  serialized: string\n  transactions: TransactionProcessed[]\n  bribe: BigNumberish\n  sessionToken: string\n  chainId: number\n  timestamp: number // EPOCH,\n  totalEstimatedGas: number\n  totalEstimatedEffectiveGasPrice: number\n  from: string\n  deadline: BigNumberish\n  simulateOnly: boolean\n}\n\nexport interface BundleRes {\n  bundle: BundleProcessed\n  status: string\n  message: string\n  error: string\n}\n\nexport interface BundleStatusRes {\n  bundle: string | BundleProcessed // BundleProcessed.serialized\n  status: string\n  message: string\n  error: string\n}\n\ninterface QuoteEventsMap {\n  [Event.SOCKET_SESSION]: (response: SocketSession) => void\n  [Event.SOCKET_ERR]: (err: any) => void\n  [Event.FEES_CHANGE]: (response: Fees) => void\n  [Event.BUNDLE_REQUEST]: (response: any) => void\n  [Event.MISTX_BUNDLE_REQUEST]: (response: any) => void\n  [Event.BUNDLE_RESPONSE]: (response: BundleRes) => void\n  [Event.BUNDLE_CANCEL_REQUEST]: (serialized: any) => void // TO DO - any\n  [Event.BUNDLE_STATUS_REQUEST]: (serialized: any) => void // TO DO - any\n  [Event.BUNDLE_STATUS_RESPONSE]: (serialized: BundleStatusRes) => void // TO DO - any\n}\n\ninterface SocketOptions {\n  onConnect?: () => void\n  onConnectError?: (err: any) => void\n  onDisconnect?: (err: any) => void\n  onError?: (err: any) => void\n  onFeesChange?: (fees: Fees) => void\n  onSocketSession: (session: any) => void\n  onTransactionResponse?: (response: BundleRes) => void\n  onTransactionUpdate?: (response: BundleStatusRes) => void\n}\n\nconst defaultServerUrl = 'https://mistx-app-goerli.herokuapp.com'\nconst tokenKey = `SESSION_TOKEN`\n\nexport class MistxSocket {\n  private socket: Socket<QuoteEventsMap, QuoteEventsMap>\n\n  constructor(serverUrl: string = defaultServerUrl) {\n    const token = localStorage.getItem(tokenKey)\n    const socket: Socket<QuoteEventsMap, QuoteEventsMap> = io(serverUrl, {\n      transports: ['websocket'],\n      auth: { token },\n      reconnection: true,\n      reconnectionDelay: 5000,\n      autoConnect: true\n    })\n    this.socket = socket\n  }\n\n  private disconnect() {\n    this.socket.off('connect')\n    this.socket.off('connect_error')\n    this.socket.off(Event.SOCKET_ERR)\n    this.socket.off(Event.SOCKET_SESSION)\n    this.socket.off(Event.FEES_CHANGE)\n    this.socket.off(Event.BUNDLE_RESPONSE)\n    this.socket.off(Event.BUNDLE_STATUS_RESPONSE)\n  }\n\n  public closeConnection() {\n    this.socket.disconnect()\n  }\n\n  public init({\n    onConnect,\n    onConnectError,\n    onDisconnect,\n    onError,\n    onFeesChange,\n    onSocketSession,\n    onTransactionResponse,\n    onTransactionUpdate,\n  }: SocketOptions): () => void {\n    this.socket.on('connect', () => {\n      // console.log('websocket connected')\n      if (onConnect) onConnect()\n    })\n  \n    this.socket.on('connect_error', (err: any) => {\n      // console.log('websocket connect error', err)\n      if (onConnectError) onConnectError(err)\n    })\n  \n    this.socket.on('disconnect', (err: any) => {\n      // console.log('websocket disconnect', err)\n      if (onDisconnect) onDisconnect(err)\n    })\n  \n    this.socket.on(Event.SOCKET_ERR, (err: any) => {\n      // console.log('websocket err', err)\n      if (onError) onError(err)\n    })\n  \n    this.socket.on(Event.SOCKET_SESSION, (session: any) => {\n      localStorage.setItem(tokenKey, session.token)\n      if (onSocketSession) onSocketSession(session)\n    })\n  \n    this.socket.on(Event.FEES_CHANGE, (response: Fees) => {\n      if (onFeesChange) {\n        const fees: Fees = {\n          block: response.block,\n          baseFeePerGas: BigNumber.from(response.baseFeePerGas),\n          default: {\n            maxFeePerGas: BigNumber.from(response.default.maxFeePerGas),\n            maxPriorityFeePerGas: BigNumber.from(response.default.maxPriorityFeePerGas)\n          },\n          low: {\n            maxFeePerGas: BigNumber.from(response.low.maxFeePerGas),\n            maxPriorityFeePerGas: BigNumber.from(response.low.maxPriorityFeePerGas)\n          },\n          med: {\n            maxFeePerGas: BigNumber.from(response.med.maxFeePerGas),\n            maxPriorityFeePerGas: BigNumber.from(response.med.maxPriorityFeePerGas)\n          },\n          high: {\n            maxFeePerGas: BigNumber.from(response.high.maxFeePerGas),\n            maxPriorityFeePerGas: BigNumber.from(response.high.maxPriorityFeePerGas)\n          },\n        }\n        onFeesChange(fees)\n      }\n    })\n  \n    this.socket.on(Event.BUNDLE_RESPONSE, (response: BundleRes) => {\n      if (onTransactionResponse) onTransactionResponse(response)\n    })\n  \n    this.socket.on(Event.BUNDLE_STATUS_RESPONSE, (response: BundleStatusRes) => {\n      if (onTransactionUpdate) onTransactionUpdate(response)\n    })\n  \n    return () => {\n      this.disconnect()\n    }\n  }\n\n  public emitBundleRequest(bundle: BundleReq) {\n    this.socket.emit(Event.BUNDLE_REQUEST, bundle)\n  }\n\n  public emitTransactionRequest(bundle: BundleReq) {\n    this.socket.emit(Event.MISTX_BUNDLE_REQUEST, bundle)\n  }\n\n  public emitStatusRequest(id: string) {\n    this.socket.emit(Event.BUNDLE_STATUS_REQUEST, {\n      serialized: id\n    })\n  }\n  \n  public emitTransactionCancellation(id: string) {\n    this.socket.emit(Event.BUNDLE_CANCEL_REQUEST, {\n      serialized: id\n    })\n  }\n}\n"],"names":["Event","Status","Diagnosis","serverUrl","token","localStorage","getItem","socket","io","transports","auth","reconnection","reconnectionDelay","autoConnect","disconnect","off","SOCKET_ERR","SOCKET_SESSION","FEES_CHANGE","BUNDLE_RESPONSE","BUNDLE_STATUS_RESPONSE","closeConnection","init","onConnect","onConnectError","onDisconnect","onError","onFeesChange","onSocketSession","onTransactionResponse","onTransactionUpdate","on","err","session","setItem","response","fees","block","baseFeePerGas","BigNumber","from","maxFeePerGas","maxPriorityFeePerGas","low","med","high","_this","emitBundleRequest","bundle","emit","BUNDLE_REQUEST","emitTransactionRequest","MISTX_BUNDLE_REQUEST","emitStatusRequest","id","BUNDLE_STATUS_REQUEST","serialized","emitTransactionCancellation","BUNDLE_CANCEL_REQUEST","PENDING_BUNDLE","FAILED_BUNDLE","SUCCESSFUL_BUNDLE","CANCEL_BUNDLE_SUCCESSFUL","BUNDLE_NOT_FOUND"],"mappings":"wEAGYA,EAyBAC,EAgBAC,uEAzCAF,EAAAA,gBAAAA,6CAEVA,kCACAA,0BACAA,kCACAA,8CACAA,gDACAA,kDACAA,oCACAA,iDAgBUC,EAAAA,iBAAAA,oDAEVA,gCACAA,wCACAA,sDACAA,uCAWUC,EAAAA,oBAAAA,yDAEVA,sCACAA,gCACAA,sCACAA,0CACAA,0EAqGYC,YAAAA,IAAAA,EANW,8CAOfC,EAAQC,aAAaC,yBACrBC,EAAiDC,KAAGL,EAAW,CACnEM,WAAY,CAAC,aACbC,KAAM,CAAEN,MAAAA,GACRO,cAAc,EACdC,kBAAmB,IACnBC,aAAa,SAEVN,OAASA,6BAGRO,WAAA,gBACDP,OAAOQ,IAAI,gBACXR,OAAOQ,IAAI,sBACXR,OAAOQ,IAAIf,cAAMgB,iBACjBT,OAAOQ,IAAIf,cAAMiB,qBACjBV,OAAOQ,IAAIf,cAAMkB,kBACjBX,OAAOQ,IAAIf,cAAMmB,sBACjBZ,OAAOQ,IAAIf,cAAMoB,2BAGjBC,gBAAA,gBACAd,OAAOO,gBAGPQ,KAAA,uBACLC,IAAAA,UACAC,IAAAA,eACAC,IAAAA,aACAC,IAAAA,QACAC,IAAAA,aACAC,IAAAA,gBACAC,IAAAA,sBACAC,IAAAA,gCAEKvB,OAAOwB,GAAG,WAAW,WAEpBR,GAAWA,YAGZhB,OAAOwB,GAAG,iBAAiB,SAACC,GAE3BR,GAAgBA,EAAeQ,WAGhCzB,OAAOwB,GAAG,cAAc,SAACC,GAExBP,GAAcA,EAAaO,WAG5BzB,OAAOwB,GAAG/B,cAAMgB,YAAY,SAACgB,GAE5BN,GAASA,EAAQM,WAGlBzB,OAAOwB,GAAG/B,cAAMiB,gBAAgB,SAACgB,GACpC5B,aAAa6B,wBAAkBD,EAAQ7B,OACnCwB,GAAiBA,EAAgBK,WAGlC1B,OAAOwB,GAAG/B,cAAMkB,aAAa,SAACiB,MAC7BR,EAAc,KACVS,EAAa,CACjBC,MAAOF,EAASE,MAChBC,cAAeC,YAAUC,KAAKL,EAASG,uBAC9B,CACPG,aAAcF,YAAUC,KAAKL,UAAiBM,cAC9CC,qBAAsBH,YAAUC,KAAKL,UAAiBO,uBAExDC,IAAK,CACHF,aAAcF,YAAUC,KAAKL,EAASQ,IAAIF,cAC1CC,qBAAsBH,YAAUC,KAAKL,EAASQ,IAAID,uBAEpDE,IAAK,CACHH,aAAcF,YAAUC,KAAKL,EAASS,IAAIH,cAC1CC,qBAAsBH,YAAUC,KAAKL,EAASS,IAAIF,uBAEpDG,KAAM,CACJJ,aAAcF,YAAUC,KAAKL,EAASU,KAAKJ,cAC3CC,qBAAsBH,YAAUC,KAAKL,EAASU,KAAKH,wBAGvDf,EAAaS,YAIZ7B,OAAOwB,GAAG/B,cAAMmB,iBAAiB,SAACgB,GACjCN,GAAuBA,EAAsBM,WAG9C5B,OAAOwB,GAAG/B,cAAMoB,wBAAwB,SAACe,GACxCL,GAAqBA,EAAoBK,MAGxC,WACLW,EAAKhC,iBAIFiC,kBAAA,SAAkBC,QAClBzC,OAAO0C,KAAKjD,cAAMkD,eAAgBF,MAGlCG,uBAAA,SAAuBH,QACvBzC,OAAO0C,KAAKjD,cAAMoD,qBAAsBJ,MAGxCK,kBAAA,SAAkBC,QAClB/C,OAAO0C,KAAKjD,cAAMuD,sBAAuB,CAC5CC,WAAYF,OAITG,4BAAA,SAA4BH,QAC5B/C,OAAO0C,KAAKjD,cAAM0D,sBAAuB,CAC5CF,WAAYF,iCAvOoC,CACpDK,eAAgB,2CAChBC,cAAe,SACfC,kBAAmB,UACnBC,yBAA0B,YAC1BC,iBAAkB"}