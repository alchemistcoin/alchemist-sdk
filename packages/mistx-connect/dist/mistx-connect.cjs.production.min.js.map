{"version":3,"file":"mistx-connect.cjs.production.min.js","sources":["../src/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client'\nimport { BigNumberish } from '@ethersproject/bignumber'\n\nexport enum Event {\n  GAS_CHANGE = 'GAS_CHANGE',\n  SOCKET_SESSION = 'SOCKET_SESSION',\n  SOCKET_ERR = 'SOCKET_ERR',\n  MISTX_BUNDLE_REQUEST = 'MISTX_BUNDLE_REQUEST',\n  BUNDLE_STATUS_REQUEST = 'BUNDLE_STATUS_REQUEST',\n  BUNDLE_STATUS_RESPONSE = 'BUNDLE_STATUS_RESPONSE',\n  BUNDLE_RESPONSE = 'BUNDLE_RESPONSE',\n  BUNDLE_CANCEL_REQUEST = 'BUNDLE_CANCEL_REQUEST'\n}\n\nexport interface Gas {\n  readonly rapid: string\n  readonly fast: string\n  readonly slow: string\n  readonly standard: string\n  readonly timestamp: number\n}\n\nexport enum Status {\n  PENDING_BUNDLE = 'PENDING_BUNDLE',\n  FAILED_BUNDLE = 'FAILED_BUNDLE',\n  SUCCESSFUL_BUNDLE = 'SUCCESSFUL_BUNDLE',\n  CANCEL_BUNDLE_SUCCESSFUL = 'CANCEL_BUNDLE_SUCCESSFUL',\n  BUNDLE_NOT_FOUND = 'BUNDLE_NOT_FOUND'\n}\n\nexport const STATUS_LOCALES: Record<string, string> = {\n  PENDING_BUNDLE: 'Flashbots working on including your swap',\n  FAILED_BUNDLE: 'Failed',\n  SUCCESSFUL_BUNDLE: 'Success',\n  CANCEL_BUNDLE_SUCCESSFUL: 'Cancelled',\n  BUNDLE_NOT_FOUND: 'Failed'\n}\n\nexport enum Diagnosis {\n  LOWER_THAN_TAIL = 'LOWER_THAN_TAIL',\n  NOT_A_FLASHBLOCK = 'NOT_A_FLASHBLOCK',\n  BUNDLE_OUTBID = 'BUNDLE_OUTBID',\n  ERROR_API_BEHIND = 'ERROR_API_BEHIND',\n  MISSING_BLOCK_DATA = 'MISSING_BLOCK_DATA',\n  ERROR_UNKNOWN = 'ERROR_UNKNOWN'\n}\n\nexport interface MistXVersion {\n  api: string\n  client: string\n}\n\nexport interface SocketSession {\n  token: string\n  version: MistXVersion | undefined\n}\n\nexport interface TransactionReq {\n  serialized: string // serialized transaction\n  raw: SwapReq | undefined // raw def. of each type of trade\n  estimatedGas?: number\n  estimatedEffectiveGasPrice?: number\n}\n\nexport interface TransactionProcessed {\n  serialized: string // serialized transaction\n  bundle: string // bundle.serialized\n  raw: SwapReq | undefined // raw def. of each type of trade\n  estimatedGas: number\n  estimatedEffectiveGasPrice: number\n}\n\nexport interface BundleReq {\n  transactions: TransactionReq[]\n  chainId: number\n  bribe: string // BigNumber\n  from: string\n  deadline: BigNumberish\n  simulateOnly: boolean\n}\n\nexport interface SwapReq {\n  amount0: BigNumberish\n  amount1: BigNumberish\n  path: Array<string>\n  to: string\n}\n\nexport interface BundleProcessed {\n  serialized: string\n  transactions: TransactionProcessed[]\n  bribe: BigNumberish\n  sessionToken: string\n  chainId: number\n  timestamp: number // EPOCH,\n  totalEstimatedGas: number\n  totalEstimatedEffectiveGasPrice: number\n  from: string\n  deadline: BigNumberish\n  simulateOnly: boolean\n}\n\nexport interface BundleRes {\n  bundle: BundleProcessed\n  status: string\n  message: string\n  error: string\n}\n\nexport interface BundleStatusRes {\n  bundle: string | BundleProcessed // BundleProcessed.serialized\n  status: string\n  message: string\n  error: string\n}\n\ninterface QuoteEventsMap {\n  [Event.SOCKET_SESSION]: (response: SocketSession) => void\n  [Event.SOCKET_ERR]: (err: any) => void\n  [Event.GAS_CHANGE]: (response: Gas) => void\n  [Event.MISTX_BUNDLE_REQUEST]: (response: any) => void\n  [Event.BUNDLE_RESPONSE]: (response: BundleRes) => void\n  [Event.BUNDLE_CANCEL_REQUEST]: (serialized: any) => void // TO DO - any\n  [Event.BUNDLE_STATUS_REQUEST]: (serialized: any) => void // TO DO - any\n  [Event.BUNDLE_STATUS_RESPONSE]: (serialized: BundleStatusRes) => void // TO DO - any\n}\n\ninterface SocketOptions {\n  onConnect?: () => void\n  onConnectError?: (err: any) => void\n  onDisconnect?: (err: any) => void\n  onError?: (err: any) => void\n  onGasChange?: (gas: any) => void\n  onSocketSession: (session: any) => void\n  onTransactionResponse?: (response: BundleRes) => void\n  onTransactionUpdate?: (response: BundleStatusRes) => void\n}\n\nconst defaultServerUrl = 'https://mistx-app-goerli.herokuapp.com'\nconst tokenKey = `SESSION_TOKEN`\n\nexport class MistxSocket {\n  private socket: Socket<QuoteEventsMap, QuoteEventsMap>\n\n  constructor(serverUrl: string = defaultServerUrl) {\n    const token = localStorage.getItem(tokenKey)\n    const socket: Socket<QuoteEventsMap, QuoteEventsMap> = io(serverUrl, {\n      transports: ['websocket'],\n      auth: { token },\n      reconnection: true,\n      reconnectionDelay: 5000,\n      autoConnect: true\n    })\n\n    this.socket = socket\n  }\n\n  private disconnect() {\n    this.socket.off('connect')\n    this.socket.off('connect_error')\n    this.socket.off(Event.SOCKET_ERR)\n    this.socket.off(Event.SOCKET_SESSION)\n    this.socket.off(Event.GAS_CHANGE)\n    this.socket.off(Event.BUNDLE_RESPONSE)\n    this.socket.off(Event.BUNDLE_STATUS_RESPONSE)\n  }\n\n  public init({\n    onConnect,\n    onConnectError,\n    onDisconnect,\n    onError,\n    onGasChange,\n    onSocketSession,\n    onTransactionResponse,\n    onTransactionUpdate,\n  }: SocketOptions): () => void {\n    this.socket.on('connect', () => {\n      // console.log('websocket connected')\n      if (onConnect) onConnect()\n    })\n  \n    this.socket.on('connect_error', (err: any) => {\n      // console.log('websocket connect error', err)\n      if (onConnectError) onConnectError(err)\n    })\n  \n    this.socket.on('disconnect', (err: any) => {\n      // console.log('websocket disconnect', err)\n      if (onDisconnect) onDisconnect(err)\n    })\n  \n    this.socket.on(Event.SOCKET_ERR, (err: any) => {\n      // console.log('websocket err', err)\n      if (onError) onError(err)\n    })\n  \n    this.socket.on(Event.SOCKET_SESSION, (session: any) => {\n      localStorage.setItem(tokenKey, session.token)\n      if (onSocketSession) onSocketSession(session)\n    })\n  \n    this.socket.on(Event.GAS_CHANGE, (gas: any) => {\n      if (onGasChange) onGasChange(gas)\n    })\n  \n    this.socket.on(Event.BUNDLE_RESPONSE, (response: BundleRes) => {\n      if (onTransactionResponse) onTransactionResponse(response)\n    })\n  \n    this.socket.on(Event.BUNDLE_STATUS_RESPONSE, (response: BundleStatusRes) => {\n      if (onTransactionUpdate) onTransactionUpdate(response)\n    })\n  \n    return () => {\n      this.disconnect()\n    }\n  }\n\n  public emitTransactionRequest(bundle: BundleReq) {\n    this.socket.emit(Event.MISTX_BUNDLE_REQUEST, bundle)\n  }\n\n  public emitStatusRequest(id: string) {\n    this.socket.emit(Event.BUNDLE_STATUS_REQUEST, {\n      serialized: id\n    })\n  }\n  \n  public emitTransactionCancellation(id: string) {\n    this.socket.emit(Event.BUNDLE_CANCEL_REQUEST, {\n      serialized: id\n    })\n  }\n}\n"],"names":["Event","Status","Diagnosis","serverUrl","token","localStorage","getItem","socket","io","transports","auth","reconnection","reconnectionDelay","autoConnect","disconnect","off","SOCKET_ERR","SOCKET_SESSION","GAS_CHANGE","BUNDLE_RESPONSE","BUNDLE_STATUS_RESPONSE","init","onConnect","onConnectError","onDisconnect","onError","onGasChange","onSocketSession","onTransactionResponse","onTransactionUpdate","on","err","session","setItem","gas","response","_this","emitTransactionRequest","bundle","emit","MISTX_BUNDLE_REQUEST","emitStatusRequest","id","BUNDLE_STATUS_REQUEST","serialized","emitTransactionCancellation","BUNDLE_CANCEL_REQUEST","PENDING_BUNDLE","FAILED_BUNDLE","SUCCESSFUL_BUNDLE","CANCEL_BUNDLE_SUCCESSFUL","BUNDLE_NOT_FOUND"],"mappings":"wEAGYA,EAmBAC,EAgBAC,iCAnCAF,EAAAA,gBAAAA,2CAEVA,kCACAA,0BACAA,8CACAA,gDACAA,kDACAA,oCACAA,iDAWUC,EAAAA,iBAAAA,oDAEVA,gCACAA,wCACAA,sDACAA,uCAWUC,EAAAA,oBAAAA,yDAEVA,sCACAA,gCACAA,sCACAA,0CACAA,0EAoGYC,YAAAA,IAAAA,EANW,8CAOfC,EAAQC,aAAaC,yBACrBC,EAAiDC,KAAGL,EAAW,CACnEM,WAAY,CAAC,aACbC,KAAM,CAAEN,MAAAA,GACRO,cAAc,EACdC,kBAAmB,IACnBC,aAAa,SAGVN,OAASA,6BAGRO,WAAA,gBACDP,OAAOQ,IAAI,gBACXR,OAAOQ,IAAI,sBACXR,OAAOQ,IAAIf,cAAMgB,iBACjBT,OAAOQ,IAAIf,cAAMiB,qBACjBV,OAAOQ,IAAIf,cAAMkB,iBACjBX,OAAOQ,IAAIf,cAAMmB,sBACjBZ,OAAOQ,IAAIf,cAAMoB,2BAGjBC,KAAA,uBACLC,IAAAA,UACAC,IAAAA,eACAC,IAAAA,aACAC,IAAAA,QACAC,IAAAA,YACAC,IAAAA,gBACAC,IAAAA,sBACAC,IAAAA,gCAEKtB,OAAOuB,GAAG,WAAW,WAEpBR,GAAWA,YAGZf,OAAOuB,GAAG,iBAAiB,SAACC,GAE3BR,GAAgBA,EAAeQ,WAGhCxB,OAAOuB,GAAG,cAAc,SAACC,GAExBP,GAAcA,EAAaO,WAG5BxB,OAAOuB,GAAG9B,cAAMgB,YAAY,SAACe,GAE5BN,GAASA,EAAQM,WAGlBxB,OAAOuB,GAAG9B,cAAMiB,gBAAgB,SAACe,GACpC3B,aAAa4B,wBAAkBD,EAAQ5B,OACnCuB,GAAiBA,EAAgBK,WAGlCzB,OAAOuB,GAAG9B,cAAMkB,YAAY,SAACgB,GAC5BR,GAAaA,EAAYQ,WAG1B3B,OAAOuB,GAAG9B,cAAMmB,iBAAiB,SAACgB,GACjCP,GAAuBA,EAAsBO,WAG9C5B,OAAOuB,GAAG9B,cAAMoB,wBAAwB,SAACe,GACxCN,GAAqBA,EAAoBM,MAGxC,WACLC,EAAKtB,iBAIFuB,uBAAA,SAAuBC,QACvB/B,OAAOgC,KAAKvC,cAAMwC,qBAAsBF,MAGxCG,kBAAA,SAAkBC,QAClBnC,OAAOgC,KAAKvC,cAAM2C,sBAAuB,CAC5CC,WAAYF,OAITG,4BAAA,SAA4BH,QAC5BnC,OAAOgC,KAAKvC,cAAM8C,sBAAuB,CAC5CF,WAAYF,iCAzMoC,CACpDK,eAAgB,2CAChBC,cAAe,SACfC,kBAAmB,UACnBC,yBAA0B,YAC1BC,iBAAkB"}