{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÃ–RLI = 5,\n  KOVAN = 42,\n  HARDHAT = 1337\n}\n\nexport enum Exchange {\n  UNI,\n  SUSHI,\n  UNDEFINED\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [exchange in Exchange]: string } = {\n  [Exchange.UNI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [Exchange.SUSHI]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [Exchange.UNDEFINED]: '0x0',\n}\n\nexport const ROUTER_ADDRESS: { [exchange in Exchange]: string } = {\n  [Exchange.UNI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [Exchange.SUSHI]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9',\n  [Exchange.UNDEFINED]: '0x0'\n}\n\nexport const INIT_CODE_HASH: { [exchange in Exchange]: string } = {\n  [Exchange.UNI]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n  [Exchange.SUSHI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [Exchange.UNDEFINED]: '0x0',\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport const GAS_ESTIMATES: {[ methodName: string ]: BigintIsh} = {\n  swapETHForExactTokens: '250000',\n  swapExactETHForTokens: '250000',\n  swapExactTokensForETH: '250000',\n  swapExactTokensForTokens: '250000',\n  swapTokensForExactETH: '250000',\n  swapTokensForExactTokens: '250000'\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA, GAS_ESTIMATES } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    //console.log('checksum', checksummedAddress, address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n      ? JSBI.BigInt(bigintIsh.toString())\n      : JSBI.BigInt(bigintIsh)\n}\n\nexport function estimatedGasForMethod(methodName: string = 'swapTokensForExactETH', numHops: BigintIsh = '1'): JSBI {\n  const gasBeforeHopFactor: BigintIsh = parseBigintIsh(GAS_ESTIMATES[methodName])\n  const factor = parseBigintIsh('0') // TODO: change this\n  const additionalGas = JSBI.multiply(parseBigintIsh(numHops), factor)\n  return JSBI.add(gasBeforeHopFactor, additionalGas)\n}\n\nexport function calculateMinerBribe(gasPriceToBeat: BigintIsh, estimatedGas: BigintIsh, margin: BigintIsh): JSBI {\n  gasPriceToBeat = parseBigintIsh(gasPriceToBeat)\n  estimatedGas = parseBigintIsh(estimatedGas)\n  const gasPriceToBeatWithMargin = calculateMargin(gasPriceToBeat, margin)\n  return JSBI.multiply(gasPriceToBeatWithMargin, estimatedGas)\n}\n\n// add x%\nexport function calculateMargin(value: BigintIsh, margin: BigintIsh): JSBI {\n  value = parseBigintIsh(value)\n  margin = JSBI.multiply(parseBigintIsh(margin), parseBigintIsh('100'))\n  const numerator = JSBI.multiply(value, JSBI.add(parseBigintIsh('10000'), margin))\n  const denominator = parseBigintIsh('10000')\n  return JSBI.divide(numerator, denominator)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.HARDHAT]: new Token(\n    ChainId.HARDHAT,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  Exchange,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly exchange: Exchange\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token, exchange: Exchange): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const exchangeIdentifier = '|' + exchange\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address+exchangeIdentifier]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address+exchangeIdentifier]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address+exchangeIdentifier],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[exchange],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH[exchange]\n          )\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[tokens[0].address+exchangeIdentifier][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, exchange: Exchange) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, exchange),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.exchange = exchange\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.exchange)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.exchange)]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { BigintIsh, ChainId, Exchange, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert, calculateMinerBribe, estimatedGasForMethod, calculateMargin } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\nexport type MinTradeEstimate = {[tradeType in TradeType]: CurrencyAmount}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The exchange of the trade e.g. Uni, Sushi\n   */\n   public readonly exchange: Exchange\n\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The bribe amount needed to execute the trade\n   */\n  public readonly minerBribe: CurrencyAmount\n  /**\n   * The estimated gas used for the trade\n   */\n  public readonly estimatedGas: BigintIsh\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount, gasPriceToBeat: BigintIsh, minerBribeMargin: BigintIsh): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT, gasPriceToBeat, minerBribeMargin)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount, gasPriceToBeat: BigintIsh, minerBribeMargin: BigintIsh): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT, gasPriceToBeat, minerBribeMargin)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType, gasPriceToBeat: BigintIsh, minerBribeMargin: BigintIsh) {\n\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    const etherIn = route.input === ETHER\n    const etherOut = route.output === ETHER\n    const methodName = Trade.methodNameForTradeType(tradeType, etherIn, etherOut)\n    const estimatedGas = estimatedGasForMethod(methodName, (route.path.length-1).toString())\n    const minerBribe = calculateMinerBribe(gasPriceToBeat, estimatedGas, minerBribeMargin)\n    \n    this.estimatedGas = estimatedGas.toString()\n    this.minerBribe = CurrencyAmount.ether(minerBribe)\n    \n    let modifiedInput: TokenAmount = wrappedAmount(amount, route.chainId)\n    let modifiedOutput: TokenAmount = wrappedAmount(amount, route.chainId)\n    \n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n\n      amounts[0] = wrappedAmount(amount, route.chainId)\n\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n\n        let inputAmount = amounts[i]\n        // if the input is ETH, calculate the output amount with the\n        // the input reduced by the minerBribe\n        if (etherIn && i === 0){\n          // reduce the inputAmount by this.minerBribe\n          invariant(inputAmount.greaterThan(this.minerBribe), `Miner bribe ${this.minerBribe.toExact()} is greater than input ETH ${inputAmount.toExact()}`)\n          const modifiedAmount = inputAmount.subtract(wrappedAmount(this.minerBribe, route.chainId))\n          // console.log('original amount in', inputAmount.toExact())\n          // console.log('modified amount in', modifiedAmount.toExact())\n          inputAmount = modifiedAmount\n          modifiedInput = modifiedAmount\n        } else if (i === 0){\n          modifiedInput = inputAmount\n        }\n        const [outputAmount, nextPair] = pair.getOutputAmount(inputAmount)\n\n        // if the output is ETH, reduce the output amount\n        // by the miner bribe\n        if (etherOut && i === route.path.length - 2){\n          // reduce the outputAmount by this.minerBribe\n          invariant(outputAmount.greaterThan(this.minerBribe), `Miner bribe ${this.minerBribe.toExact()} is greater than output ETH ${outputAmount.toExact()}`)\n          const modifiedAmount = outputAmount.subtract(wrappedAmount(this.minerBribe, route.chainId))\n          // console.log('original amount out', outputAmount.toExact())\n          // console.log('modified amount out', modifiedAmount.toExact())\n          amounts[i + 1] = modifiedAmount\n          modifiedOutput = outputAmount\n        } else if (i === route.path.length - 2){\n          modifiedOutput = outputAmount\n          amounts[i + 1] = outputAmount\n        } else {\n          amounts[i + 1] = outputAmount\n        }\n\n        nextPairs[i] = nextPair\n      }\n    } else {\n      \n\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        let outputAmount = amounts[i]\n        // if the output is ETH, calculate the input amount with the\n        // the output increased by the minerBribe\n        if (etherOut && i === route.path.length - 1){\n          // increase the outputAmount by this.minerBribe\n          const modifiedAmount = outputAmount.add(wrappedAmount(this.minerBribe, route.chainId))\n          // console.log('original amount out', outputAmount.toExact())\n          // console.log('modified amount out', modifiedAmount.toExact())\n          outputAmount = modifiedAmount\n          modifiedOutput = modifiedAmount\n        } else if (i === route.path.length - 1) {\n          modifiedOutput = outputAmount\n        }\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(outputAmount)\n        // if the input is ETH, increase the input amount\n        // by the miner bribe\n        if (etherIn && i === 1){\n          // increase the input amount by this.minerBribe\n          const modifiedAmount = inputAmount.add(wrappedAmount(this.minerBribe, route.chainId))\n          // console.log('original amount in', inputAmount.toExact())\n          // console.log('modified amount in', modifiedAmount.toExact())\n          amounts[i - 1] = modifiedAmount\n          modifiedInput = inputAmount\n        } else if (i === 1){\n          modifiedInput = inputAmount\n          amounts[i - 1] = modifiedInput\n        } else {\n          amounts[i - 1] = inputAmount\n        }\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.exchange = route.pairs[0].exchange\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n          ? CurrencyAmount.ether(amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n          ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      modifiedInput.currency,\n      modifiedOutput.currency,\n      modifiedInput.raw,\n      modifiedOutput.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, modifiedInput, modifiedOutput)\n    \n    // console.log('old price impact', computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount).toSignificant(6))\n    // console.log('******************')\n    // console.log('*** TRADE START **')\n    // console.log('******************')\n    // console.log('inputAmount', this.inputAmount.toSignificant(6))\n    // console.log('outputAmount', this.outputAmount.toSignificant(6))\n    // console.log('executionPrice', this.executionPrice.toSignificant(6))\n    // console.log('nextMidPrice', this.nextMidPrice.toSignificant(6))\n    // console.log('priceImpact', this.priceImpact.toSignificant(6))\n    // console.log('minerBribe', this.minerBribe.toSignificant(6))\n    // console.log('estimatedGas', this.estimatedGas)\n    // console.log('******************')\n    // console.log('*** TRADE END **')\n    // console.log('******************')\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param exchange the exchange this trade will be performed on\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @param gasPriceToBeat used to calculate the miner bribe\n   * @param minerBribeMargin used as the margin for the miner bribe calculation\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = [],\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    const tradeType = TradeType.EXACT_INPUT\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            tradeType,\n            gasPriceToBeat,\n            minerBribeMargin\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          gasPriceToBeat,\n          minerBribeMargin,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades,\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param exchange the exchange this trade will be performed on\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @param gasPriceToBeat used to calculate the miner bribe\n   * @param minerBribeMargin used as the margin for the miner bribe calculation\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = [],\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT,\n            gasPriceToBeat,\n            minerBribeMargin\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          gasPriceToBeat,\n          minerBribeMargin,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades,\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * return the mistX router method name for the trade\n   * @param tradeType the type of trade, TradeType\n   * @param etherIn the input currency is ether\n   * @param etherOut the output currency is ether\n   * @param useFeeOnTransfer Whether any of the tokens in the path are fee on transfer tokens, TradeOptions.feeOnTransfer\n   * @param enforceUseFeeOnTransfer use to throw an invariant if there is no useFeeOnTransfer option for TradeType.EXACT_OUTPUT trades\n   */\n  public static methodNameForTradeType(\n    tradeType: TradeType,\n    etherIn: boolean,\n    etherOut: boolean,\n    useFeeOnTransfer?: boolean,\n  ): string {\n    let methodName: string;\n    switch (tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = 'swapExactETHForTokens'\n        } else if (etherOut) {\n          methodName = 'swapExactTokensForETH'\n        } else {\n          methodName = 'swapExactTokensForTokens'\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n        } else {\n          methodName = 'swapTokensForExactTokens'\n        }\n        break\n    }\n    return methodName\n  }\n\n  /**\n   * return the mistX router method name for the trade\n   * @param pairs\n   * @param currencyIn \n   * @param currencyOut \n   * @param gasPriceToBeat \n   * @param minerBribeMargin\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   */\n   public static estimateMinTradeAmounts(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyOut: Currency, \n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    minTradeMargin: BigintIsh,\n    { maxHops = 3 }: BestTradeOptions = {}\n  ): MinTradeEstimate | null {\n    const etherIn = currencyIn === ETHER\n    const etherOut = currencyOut === ETHER\n\n    if (!etherIn && !etherOut) return null;\n\n    const exactInGas = estimatedGasForMethod(Trade.methodNameForTradeType(TradeType.EXACT_INPUT, etherIn, etherOut), maxHops.toString())\n    const exactOutGas = estimatedGasForMethod(Trade.methodNameForTradeType(TradeType.EXACT_OUTPUT, etherIn, etherOut), maxHops.toString())\n\n    const exactInBribe = calculateMargin(calculateMinerBribe(gasPriceToBeat, exactInGas, minerBribeMargin), minTradeMargin)\n    const exactOutBribe = calculateMargin(calculateMinerBribe(gasPriceToBeat, exactOutGas, minerBribeMargin), minTradeMargin)\n\n    const chainId: ChainId | undefined = (currencyIn as Token).chainId || (currencyOut as Token).chainId || undefined\n    invariant(chainId, 'BRIBE_ESTIMATES_CHAINID')\n    let tokenAmount: TokenAmount = wrappedAmount(CurrencyAmount.ether(exactInBribe), chainId)\n    if (etherIn){\n      tokenAmount = wrappedAmount(CurrencyAmount.ether(exactOutBribe), chainId)\n    } \n\n    let minTokenAmountIn: CurrencyAmount | TokenAmount | undefined\n    let minTokenAmountOut: CurrencyAmount | TokenAmount | undefined\n\n    for (let i = 0; i < pairs.length; i++){\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(tokenAmount.token) && !pair.token1.equals(tokenAmount.token)) continue \n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      try {\n        if (etherIn){\n          minTokenAmountIn = CurrencyAmount.ether(exactInBribe)\n          ;[minTokenAmountOut] = pair.getInputAmount(tokenAmount)\n        } else if (etherOut) {\n          minTokenAmountOut = CurrencyAmount.ether(exactOutBribe)\n          ;[minTokenAmountIn] = pair.getInputAmount(tokenAmount)\n        } \n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n    }\n\n    if (!minTokenAmountIn || !minTokenAmountOut) return null;\n\n    return {\n      [TradeType.EXACT_INPUT]: minTokenAmountIn,\n      [TradeType.EXACT_OUTPUT]: minTokenAmountOut\n    }\n\n  }\n\n  \n}\n","import invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\nimport { ROUTER_ADDRESS } from './constants'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: [SwapDataArr, string, string]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport interface SwapData {\n  amount0: string\n  amount1: string\n  path: string[]\n  to: string\n  deadline: string\n}\n\nexport type SwapDataArr = [string, string, string[], string, string]\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const minerBribe: string = toHex(trade.minerBribe)\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n    const routerAddress = ROUTER_ADDRESS[trade.exchange]\n    const swapData: SwapData = {\n      amount0: amountIn,\n      amount1: amountOut,\n      path,\n      to,\n      deadline\n    }\n    let value: string\n    const methodName = Trade.methodNameForTradeType(trade.tradeType, etherIn, etherOut, useFeeOnTransfer)\n    \n    switch (methodName) {\n      case 'swapExactETHForTokens':\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = amountIn\n        break\n      case 'swapExactTokensForETH':\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = ZERO_HEX\n        break\n      case 'swapExactTokensForTokens':\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = ZERO_HEX\n        break\n      case 'swapETHForExactTokens':\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = amountIn\n        break\n      case 'swapTokensForExactETH':\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        swapData.amount0 = amountOut\n        swapData.amount1 = amountIn\n        value = minerBribe\n        break\n      case 'swapTokensForExactTokens':\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        swapData.amount0 = amountOut\n        swapData.amount1 = amountIn\n        value = minerBribe\n        break\n      default:\n        // args = []\n        value = ''\n    }\n    const swapDataArr: SwapDataArr = [swapData.amount0, swapData.amount1, swapData.path, swapData.to, swapData.deadline]\n    const args: [SwapDataArr, string, string] = [swapDataArr, routerAddress, minerBribe]\n\n    invariant((methodName && args && value), 'CALL_PARAMS_MISSING')\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n}\n"],"names":["ChainId","Exchange","TradeType","Rounding","FACTORY_ADDRESS","UNI","SUSHI","UNDEFINED","ROUTER_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","GAS_ESTIMATES","swapETHForExactTokens","swapExactETHForTokens","swapExactTokensForETH","swapExactTokensForTokens","swapTokensForExactETH","swapTokensForExactTokens","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","estimatedGasForMethod","methodName","numHops","gasBeforeHopFactor","factor","additionalGas","multiply","add","calculateMinerBribe","gasPriceToBeat","estimatedGas","margin","gasPriceToBeatWithMargin","calculateMargin","numerator","denominator","divide","sqrt","y","z","x","greaterThan","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","HARDHAT","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","invert","otherParsed","equal","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","exchange","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","exchangeIdentifier","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","minerBribeMargin","amounts","Array","nextPairs","etherIn","etherOut","methodNameForTradeType","minerBribe","modifiedInput","modifiedOutput","EXACT_INPUT","modifiedAmount","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","useFeeOnTransfer","estimateMinTradeAmounts","minTradeMargin","exactInGas","exactOutGas","exactInBribe","exactOutBribe","tokenAmount","minTokenAmountIn","minTokenAmountOut","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","Boolean","feeOnTransfer","routerAddress","swapData","swapDataArr","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then"],"mappings":";;;;;;;;;;;;;;;;;;;;AAKA,WAAYA;AACVA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,gCAAA,aAAA;AACAA,EAAAA,8BAAA,UAAA;AACAA,EAAAA,kCAAA,YAAA;AACD,CAPD,EAAYA,eAAO,KAAPA,eAAO,KAAA,CAAnB;;AASA,WAAYC;AACVA,EAAAA,6BAAA,QAAA;AACAA,EAAAA,+BAAA,UAAA;AACAA,EAAAA,mCAAA,cAAA;AACD,CAJD,EAAYA,gBAAQ,KAARA,gBAAQ,KAAA,CAApB;;AAMA,WAAYC;AACVA,EAAAA,uCAAA,gBAAA;AACAA,EAAAA,wCAAA,iBAAA;AACD,CAHD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAKA,WAAYC;AACVA,EAAAA,oCAAA,eAAA;AACAA,EAAAA,uCAAA,kBAAA;AACAA,EAAAA,kCAAA,aAAA;AACD,CAJD,EAAYA,gBAAQ,KAARA,gBAAQ,KAAA,CAApB;;IAMaC,eAAe,4CACzBH,gBAAQ,CAACI,GADgB,IACV,4CADU,mBAEzBJ,gBAAQ,CAACK,KAFgB,IAER,4CAFQ,mBAGzBL,gBAAQ,CAACM,SAHgB,IAGJ,KAHI;AAMrB,IAAMC,cAAc,0CACxBP,gBAAQ,CAACI,GADe,IACT,4CADS,kBAExBJ,gBAAQ,CAACK,KAFe,IAEP,2CAFO,kBAGxBL,gBAAQ,CAACM,SAHe,IAGH,KAHG,kBAApB;IAMME,cAAc,0CACxBR,gBAAQ,CAACI,GADe,IACT,oEADS,kBAExBJ,gBAAQ,CAACK,KAFe,IAEP,oEAFO,kBAGxBL,gBAAQ,CAACM,SAHe,IAGH,KAHG;IAMdG,iBAAiB,gBAAGC,IAAI,CAACC,MAAL,CAAY,IAAZ;;AAG1B,IAAMC,IAAI,gBAAGF,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACA,IAAME,GAAG,gBAAGH,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACA,IAAMG,GAAG,gBAAGJ,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACA,IAAMI,KAAK,gBAAGL,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAd;AACA,IAAMK,IAAI,gBAAGN,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACA,IAAMM,GAAG,gBAAGP,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAZ;AACA,IAAMO,IAAI,gBAAGR,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb;AACA,IAAMQ,IAAI,gBAAGT,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb;AACA,IAAMS,KAAK,gBAAGV,IAAI,CAACC,MAAL,CAAY,IAAZ,CAAd;AAEP,IAAYU,YAAZ;;AAAA,WAAYA;AACVA,EAAAA,qBAAA,UAAA;AACAA,EAAAA,uBAAA,YAAA;AACD,CAHD,EAAYA,YAAY,KAAZA,YAAY,KAAA,CAAxB;;AAKO,IAAMC,oBAAoB,sDAC9BD,YAAY,CAACE,KADiB,iBACTb,IAAI,CAACC,MAAL,CAAY,MAAZ,CADS,wBAE9BU,YAAY,CAACG,OAFiB,iBAEPd,IAAI,CAACC,MAAL,CAAY,oEAAZ,CAFO,wBAA1B;AAKA,IAAMc,aAAa,GAAwC;AAChEC,EAAAA,qBAAqB,EAAE,QADyC;AAEhEC,EAAAA,qBAAqB,EAAE,QAFyC;AAGhEC,EAAAA,qBAAqB,EAAE,QAHyC;AAIhEC,EAAAA,wBAAwB,EAAE,QAJsC;AAKhEC,EAAAA,qBAAqB,EAAE,QALyC;AAMhEC,EAAAA,wBAAwB,EAAE;AANsC,CAA3D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEP;AACA,IAAMC,iBAAiB,IAAG,oBAAoBC,MAAvB,CAAvB;AAEA;;;;;AAIA,IAAaC,yBAAb;AAAA;;AAGE;;;AACE;AAHc,qCAAA,GAAoC,IAApC;AAId,UAAKC,IAAL,GAAY,MAAKC,WAAL,CAAiBD,IAA7B;AACA,QAAIH,iBAAJ,EAAuBC,MAAM,CAACI,cAAP,gCAA4B,wEAAWC,SAAvC;;AACxB;;AAPH;AAAA,iCAA+CC,KAA/C;AAUA;;;;;AAIA,IAAaC,4BAAb;AAAA;;AAGE;;;AACE;AAHc,yCAAA,GAAuC,IAAvC;AAId,WAAKL,IAAL,GAAY,OAAKC,WAAL,CAAiBD,IAA7B;AACA,QAAIH,iBAAJ,EAAuBC,MAAM,CAACI,cAAP,iCAA4B,2EAAWC,SAAvC;;AACxB;;AAPH;AAAA,iCAAkDC,KAAlD;;SCdgBE,6BAA6BC,OAAaC;AACxD,GAAUjC,IAAI,CAACkC,kBAAL,CAAwBF,KAAxB,EAA+B9B,IAA/B,CAAV,IAAAiC,SAAS,QAA0CH,KAA1C,kBAA4DC,YAA5D,OAAT,CAAA;AACA,GAAUjC,IAAI,CAACoC,eAAL,CAAqBJ,KAArB,EAA4BpB,oBAAoB,CAACqB,YAAD,CAAhD,CAAV,IAAAE,SAAS,QAAqEH,KAArE,kBAAuFC,YAAvF,OAAT,CAAA;AACD;;AAGD,SAAgBI,wBAAwBC;AACtC,MAAI;AACF,QAAMC,kBAAkB,GAAGC,kBAAU,CAACF,SAAD,CAArC,CADE;;AAGF,qCAAAG,OAAO,CAACH,SAAO,KAAKC,kBAAb,EAAoCD,SAApC,0BAAP;AACA,WAAOC,kBAAP;AACD,GALD,CAKE,OAAOG,KAAP,EAAc;AACd,MAAAP,SAAS,QAAWG,SAAX,8BAAT,CAAA;AACD;AACF;AAED,SAAgBK,eAAeC;AAC7B,SAAOA,SAAS,YAAY5C,IAArB,GACH4C,SADG,GAEH,OAAOA,SAAP,KAAqB,QAArB,GACE5C,IAAI,CAACC,MAAL,CAAY2C,SAAS,CAACC,QAAV,EAAZ,CADF,GAEE7C,IAAI,CAACC,MAAL,CAAY2C,SAAZ,CAJN;AAKD;AAED,SAAgBE,sBAAsBC,YAA8CC;MAA9CD;AAAAA,IAAAA,aAAqB;;;MAAyBC;AAAAA,IAAAA,UAAqB;;;AACvG,MAAMC,kBAAkB,GAAcN,cAAc,CAAC5B,aAAa,CAACgC,UAAD,CAAd,CAApD;AACA,MAAMG,MAAM,GAAGP,cAAc,CAAC,GAAD,CAA7B;;AACA,MAAMQ,aAAa,GAAGnD,IAAI,CAACoD,QAAL,CAAcT,cAAc,CAACK,OAAD,CAA5B,EAAuCE,MAAvC,CAAtB;AACA,SAAOlD,IAAI,CAACqD,GAAL,CAASJ,kBAAT,EAA6BE,aAA7B,CAAP;AACD;AAED,SAAgBG,oBAAoBC,gBAA2BC,cAAyBC;AACtFF,EAAAA,cAAc,GAAGZ,cAAc,CAACY,cAAD,CAA/B;AACAC,EAAAA,YAAY,GAAGb,cAAc,CAACa,YAAD,CAA7B;AACA,MAAME,wBAAwB,GAAGC,eAAe,CAACJ,cAAD,EAAiBE,MAAjB,CAAhD;AACA,SAAOzD,IAAI,CAACoD,QAAL,CAAcM,wBAAd,EAAwCF,YAAxC,CAAP;AACD;;AAGD,SAAgBG,gBAAgB3B,OAAkByB;AAChDzB,EAAAA,KAAK,GAAGW,cAAc,CAACX,KAAD,CAAtB;AACAyB,EAAAA,MAAM,GAAGzD,IAAI,CAACoD,QAAL,CAAcT,cAAc,CAACc,MAAD,CAA5B,EAAsCd,cAAc,CAAC,KAAD,CAApD,CAAT;AACA,MAAMiB,SAAS,GAAG5D,IAAI,CAACoD,QAAL,CAAcpB,KAAd,EAAqBhC,IAAI,CAACqD,GAAL,CAASV,cAAc,CAAC,OAAD,CAAvB,EAAkCc,MAAlC,CAArB,CAAlB;AACA,MAAMI,WAAW,GAAGlB,cAAc,CAAC,OAAD,CAAlC;AACA,SAAO3C,IAAI,CAAC8D,MAAL,CAAYF,SAAZ,EAAuBC,WAAvB,CAAP;AACD;;AAGD,SAAgBE,KAAKC;AACnBjC,EAAAA,4BAA4B,CAACiC,CAAD,EAAIrD,YAAY,CAACG,OAAjB,CAA5B;AACA,MAAImD,CAAC,GAAS/D,IAAd;AACA,MAAIgE,CAAJ;;AACA,MAAIlE,IAAI,CAACmE,WAAL,CAAiBH,CAAjB,EAAoB3D,KAApB,CAAJ,EAAgC;AAC9B4D,IAAAA,CAAC,GAAGD,CAAJ;AACAE,IAAAA,CAAC,GAAGlE,IAAI,CAACqD,GAAL,CAASrD,IAAI,CAAC8D,MAAL,CAAYE,CAAZ,EAAe5D,GAAf,CAAT,EAA8BD,GAA9B,CAAJ;;AACA,WAAOH,IAAI,CAACoE,QAAL,CAAcF,CAAd,EAAiBD,CAAjB,CAAP,EAA4B;AAC1BA,MAAAA,CAAC,GAAGC,CAAJ;AACAA,MAAAA,CAAC,GAAGlE,IAAI,CAAC8D,MAAL,CAAY9D,IAAI,CAACqD,GAAL,CAASrD,IAAI,CAAC8D,MAAL,CAAYE,CAAZ,EAAeE,CAAf,CAAT,EAA4BA,CAA5B,CAAZ,EAA4C9D,GAA5C,CAAJ;AACD;AACF,GAPD,MAOO,IAAIJ,IAAI,CAACqE,QAAL,CAAcL,CAAd,EAAiB9D,IAAjB,CAAJ,EAA4B;AACjC+D,IAAAA,CAAC,GAAG9D,GAAJ;AACD;;AACD,SAAO8D,CAAP;AACD;AAGD;;AACA,SAAgBK,aAAgBC,OAAYlB,KAAQmB,SAAiBC;AACnE,IAAUD,OAAO,GAAG,CAApB,KAAArC,SAAS,QAAc,eAAd,CAAT,CAAA;;AAEA,IAAUoC,KAAK,CAACG,MAAN,IAAgBF,OAA1B,KAAArC,SAAS,QAA0B,YAA1B,CAAT,CAAA;;AAGA,MAAIoC,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACtBH,IAAAA,KAAK,CAACI,IAAN,CAAWtB,GAAX;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL,QAAMuB,MAAM,GAAGL,KAAK,CAACG,MAAN,KAAiBF,OAAhC,CADK;;AAGL,QAAII,MAAM,IAAIH,UAAU,CAACF,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAN,EAA0BrB,GAA1B,CAAV,IAA4C,CAA1D,EAA6D;AAC3D,aAAOA,GAAP;AACD;;AAED,QAAIwB,EAAE,GAAG,CAAT;AAAA,QACEC,EAAE,GAAGP,KAAK,CAACG,MADb;;AAGA,WAAOG,EAAE,GAAGC,EAAZ,EAAgB;AACd,UAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAN,KAAc,CAA1B;;AACA,UAAIL,UAAU,CAACF,KAAK,CAACQ,GAAD,CAAN,EAAa1B,GAAb,CAAV,IAA+B,CAAnC,EAAsC;AACpCwB,QAAAA,EAAE,GAAGE,GAAG,GAAG,CAAX;AACD,OAFD,MAEO;AACLD,QAAAA,EAAE,GAAGC,GAAL;AACD;AACF;;AACDR,IAAAA,KAAK,CAACS,MAAN,CAAaH,EAAb,EAAiB,CAAjB,EAAoBxB,GAApB;AACA,WAAOuB,MAAM,GAAGL,KAAK,CAACU,GAAN,EAAH,GAAkB,IAA/B;AACD;AACF;;ACpGD;;;;;;AAKA,IAAaC,QAAb;AAUE;;;;;;AAMA,kBAAsBC,QAAtB,EAAwCC,MAAxC,EAAyD3D,IAAzD;AACEM,EAAAA,4BAA4B,CAAC/B,IAAI,CAACC,MAAL,CAAYkF,QAAZ,CAAD,EAAwBxE,YAAY,CAACE,KAArC,CAA5B;AAEA,OAAKsE,QAAL,GAAgBA,QAAhB;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAK3D,IAAL,GAAYA,IAAZ;AACD,CAtBH;AAKE;;;;AAGuByD,cAAA,gBAAkB,IAAIA,QAAJ,CAAa,EAAb,EAAiB,KAAjB,EAAwB,OAAxB,CAAlB;AAiBzB,IAAMG,KAAK,GAAGH,QAAQ,CAACG,KAAvB;;;AC9BA;;;;AAGA,IAAaC,KAAb;AAAA;;AAIE,iBAAmBC,OAAnB,EAAqCjD,OAArC,EAAsD6C,QAAtD,EAAwEC,MAAxE,EAAyF3D,IAAzF;;;AACE,iCAAM0D,QAAN,EAAgBC,MAAhB,EAAwB3D,IAAxB;AACA,UAAK8D,OAAL,GAAeA,OAAf;AACA,UAAKjD,OAAL,GAAeD,uBAAuB,CAACC,OAAD,CAAtC;;AACD;AAED;;;;;;AAVF;;AAAA,SAcSkD,MAdT,GAcS,gBAAOC,KAAP;AACL;AACA,QAAI,SAASA,KAAb,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,WAAO,KAAKF,OAAL,KAAiBE,KAAK,CAACF,OAAvB,IAAkC,KAAKjD,OAAL,KAAiBmD,KAAK,CAACnD,OAAhE;AACD;AAED;;;;;;AAtBF;;AAAA,SA4BSoD,WA5BT,GA4BS,qBAAYD,KAAZ;AACL,MAAU,KAAKF,OAAL,KAAiBE,KAAK,CAACF,OAAjC,KAAApD,SAAS,QAAiC,WAAjC,CAAT,CAAA;AACA,MAAU,KAAKG,OAAL,KAAiBmD,KAAK,CAACnD,OAAjC,KAAAH,SAAS,QAAiC,WAAjC,CAAT,CAAA;AACA,WAAO,KAAKG,OAAL,CAAaqD,WAAb,KAA6BF,KAAK,CAACnD,OAAN,CAAcqD,WAAd,EAApC;AACD,GAhCH;;AAAA;AAAA,EAA2BT,QAA3B;AAmCA;;;;AAGA,SAAgBU,eAAeC,WAAqBC;AAClD,MAAID,SAAS,YAAYP,KAArB,IAA8BQ,SAAS,YAAYR,KAAvD,EAA8D;AAC5D,WAAOO,SAAS,CAACL,MAAV,CAAiBM,SAAjB,CAAP;AACD,GAFD,MAEO,IAAID,SAAS,YAAYP,KAAzB,EAAgC;AACrC,WAAO,KAAP;AACD,GAFM,MAEA,IAAIQ,SAAS,YAAYR,KAAzB,EAAgC;AACrC,WAAO,KAAP;AACD,GAFM,MAEA;AACL,WAAOO,SAAS,KAAKC,SAArB;AACD;AACF;AAED,IAAaC,IAAI,sBACd1G,eAAO,CAAC2G,OADM,iBACI,IAAIV,KAAJ,CACjBjG,eAAO,CAAC2G,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,MAJiB,EAKjB,eALiB,CADJ,QAQd3G,eAAO,CAAC4G,OARM,iBAQI,IAAIX,KAAJ,CACjBjG,eAAO,CAAC4G,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,MAJiB,EAKjB,eALiB,CARJ,QAed5G,eAAO,CAAC6G,OAfM,iBAeI,IAAIZ,KAAJ,CACjBjG,eAAO,CAAC6G,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,MAJiB,EAKjB,eALiB,CAfJ,QAsBd7G,eAAO,CAAC8G,OAtBM,iBAsBI,IAAIb,KAAJ,CACjBjG,eAAO,CAAC8G,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,MAJiB,EAKjB,eALiB,CAtBJ,QA6Bd9G,eAAO,CAAC+G,KA7BM,iBA6BE,IAAId,KAAJ,CAAUjG,eAAO,CAAC+G,KAAlB,EAAyB,4CAAzB,EAAuE,EAAvE,EAA2E,MAA3E,EAAmF,eAAnF,CA7BF,QA8Bd/G,eAAO,CAACgH,KA9BM,iBA8BE,IAAIf,KAAJ,CAAUjG,eAAO,CAACgH,KAAlB,EAAyB,4CAAzB,EAAuE,EAAvE,EAA2E,MAA3E,EAAmF,eAAnF,CA9BF,QAAV;;;AChDP,IAAMC,OAAO,gBAAGC,QAAQ,CAACC,QAAD,CAAxB;AACA,IAAMC,GAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAMC,qBAAqB,sDACxBnH,gBAAQ,CAACoH,UADe,IACFN,OAAO,CAACM,UADN,wBAExBpH,gBAAQ,CAACqH,aAFe,IAECP,OAAO,CAACO,aAFT,wBAGxBrH,gBAAQ,CAACsH,QAHe,IAGJR,OAAO,CAACQ,QAHJ,wBAA3B;AAMA,IAAMC,eAAe,4CAClBvH,gBAAQ,CAACoH,UADS,KAAA,mBAElBpH,gBAAQ,CAACqH,aAFS,KAAA,mBAGlBrH,gBAAQ,CAACsH,QAHS,KAAA,mBAArB;AAMA,IAAaE,QAAb;AAIE,oBAAmBpD,SAAnB,EAAyCC,WAAzC;QAAyCA;AAAAA,MAAAA,cAAyB1D;;;AAChE,SAAKyD,SAAL,GAAiBjB,cAAc,CAACiB,SAAD,CAA/B;AACA,SAAKC,WAAL,GAAmBlB,cAAc,CAACkB,WAAD,CAAjC;AACD,GAPH;;;AAAA;;AAAA,SAmBSoD,MAnBT,GAmBS;AACL,WAAO,IAAID,QAAJ,CAAa,KAAKnD,WAAlB,EAA+B,KAAKD,SAApC,CAAP;AACD,GArBH;;AAAA,SAuBSP,GAvBT,GAuBS,aAAIoC,KAAJ;AACL,QAAMyB,WAAW,GAAGzB,KAAK,YAAYuB,QAAjB,GAA4BvB,KAA5B,GAAoC,IAAIuB,QAAJ,CAAarE,cAAc,CAAC8C,KAAD,CAA3B,CAAxD;;AACA,QAAIzF,IAAI,CAACmH,KAAL,CAAW,KAAKtD,WAAhB,EAA6BqD,WAAW,CAACrD,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAImD,QAAJ,CAAahH,IAAI,CAACqD,GAAL,CAAS,KAAKO,SAAd,EAAyBsD,WAAW,CAACtD,SAArC,CAAb,EAA8D,KAAKC,WAAnE,CAAP;AACD;;AACD,WAAO,IAAImD,QAAJ,CACLhH,IAAI,CAACqD,GAAL,CACErD,IAAI,CAACoD,QAAL,CAAc,KAAKQ,SAAnB,EAA8BsD,WAAW,CAACrD,WAA1C,CADF,EAEE7D,IAAI,CAACoD,QAAL,CAAc8D,WAAW,CAACtD,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKL7D,IAAI,CAACoD,QAAL,CAAc,KAAKS,WAAnB,EAAgCqD,WAAW,CAACrD,WAA5C,CALK,CAAP;AAOD,GAnCH;;AAAA,SAqCSuD,QArCT,GAqCS,kBAAS3B,KAAT;AACL,QAAMyB,WAAW,GAAGzB,KAAK,YAAYuB,QAAjB,GAA4BvB,KAA5B,GAAoC,IAAIuB,QAAJ,CAAarE,cAAc,CAAC8C,KAAD,CAA3B,CAAxD;;AACA,QAAIzF,IAAI,CAACmH,KAAL,CAAW,KAAKtD,WAAhB,EAA6BqD,WAAW,CAACrD,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAImD,QAAJ,CAAahH,IAAI,CAACoH,QAAL,CAAc,KAAKxD,SAAnB,EAA8BsD,WAAW,CAACtD,SAA1C,CAAb,EAAmE,KAAKC,WAAxE,CAAP;AACD;;AACD,WAAO,IAAImD,QAAJ,CACLhH,IAAI,CAACoH,QAAL,CACEpH,IAAI,CAACoD,QAAL,CAAc,KAAKQ,SAAnB,EAA8BsD,WAAW,CAACrD,WAA1C,CADF,EAEE7D,IAAI,CAACoD,QAAL,CAAc8D,WAAW,CAACtD,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKL7D,IAAI,CAACoD,QAAL,CAAc,KAAKS,WAAnB,EAAgCqD,WAAW,CAACrD,WAA5C,CALK,CAAP;AAOD,GAjDH;;AAAA,SAmDSO,QAnDT,GAmDS,kBAASqB,KAAT;AACL,QAAMyB,WAAW,GAAGzB,KAAK,YAAYuB,QAAjB,GAA4BvB,KAA5B,GAAoC,IAAIuB,QAAJ,CAAarE,cAAc,CAAC8C,KAAD,CAA3B,CAAxD;AACA,WAAOzF,IAAI,CAACoE,QAAL,CACLpE,IAAI,CAACoD,QAAL,CAAc,KAAKQ,SAAnB,EAA8BsD,WAAW,CAACrD,WAA1C,CADK,EAEL7D,IAAI,CAACoD,QAAL,CAAc8D,WAAW,CAACtD,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAzDH;;AAAA,SA2DSwD,OA3DT,GA2DS,iBAAQ5B,KAAR;AACL,QAAMyB,WAAW,GAAGzB,KAAK,YAAYuB,QAAjB,GAA4BvB,KAA5B,GAAoC,IAAIuB,QAAJ,CAAarE,cAAc,CAAC8C,KAAD,CAA3B,CAAxD;AACA,WAAOzF,IAAI,CAACmH,KAAL,CACLnH,IAAI,CAACoD,QAAL,CAAc,KAAKQ,SAAnB,EAA8BsD,WAAW,CAACrD,WAA1C,CADK,EAEL7D,IAAI,CAACoD,QAAL,CAAc8D,WAAW,CAACtD,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAjEH;;AAAA,SAmESM,WAnET,GAmES,qBAAYsB,KAAZ;AACL,QAAMyB,WAAW,GAAGzB,KAAK,YAAYuB,QAAjB,GAA4BvB,KAA5B,GAAoC,IAAIuB,QAAJ,CAAarE,cAAc,CAAC8C,KAAD,CAA3B,CAAxD;AACA,WAAOzF,IAAI,CAACmE,WAAL,CACLnE,IAAI,CAACoD,QAAL,CAAc,KAAKQ,SAAnB,EAA8BsD,WAAW,CAACrD,WAA1C,CADK,EAEL7D,IAAI,CAACoD,QAAL,CAAc8D,WAAW,CAACtD,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAzEH;;AAAA,SA2EST,QA3ET,GA2ES,kBAASqC,KAAT;AACL,QAAMyB,WAAW,GAAGzB,KAAK,YAAYuB,QAAjB,GAA4BvB,KAA5B,GAAoC,IAAIuB,QAAJ,CAAarE,cAAc,CAAC8C,KAAD,CAA3B,CAAxD;AACA,WAAO,IAAIuB,QAAJ,CACLhH,IAAI,CAACoD,QAAL,CAAc,KAAKQ,SAAnB,EAA8BsD,WAAW,CAACtD,SAA1C,CADK,EAEL5D,IAAI,CAACoD,QAAL,CAAc,KAAKS,WAAnB,EAAgCqD,WAAW,CAACrD,WAA5C,CAFK,CAAP;AAID,GAjFH;;AAAA,SAmFSC,MAnFT,GAmFS,gBAAO2B,KAAP;AACL,QAAMyB,WAAW,GAAGzB,KAAK,YAAYuB,QAAjB,GAA4BvB,KAA5B,GAAoC,IAAIuB,QAAJ,CAAarE,cAAc,CAAC8C,KAAD,CAA3B,CAAxD;AACA,WAAO,IAAIuB,QAAJ,CACLhH,IAAI,CAACoD,QAAL,CAAc,KAAKQ,SAAnB,EAA8BsD,WAAW,CAACrD,WAA1C,CADK,EAEL7D,IAAI,CAACoD,QAAL,CAAc,KAAKS,WAAnB,EAAgCqD,WAAW,CAACtD,SAA5C,CAFK,CAAP;AAID,GAzFH;;AAAA,SA2FS0D,aA3FT,GA2FS,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqBjI,gBAAQ,CAACqH;;;AAE9B,KAAUc,MAAM,CAACC,SAAP,CAAiBL,iBAAjB,CAAV,IAAApF,SAAS,QAAyCoF,iBAAzC,yBAAT,CAAA;AACA,MAAUA,iBAAiB,GAAG,CAA9B,KAAApF,SAAS,QAA2BoF,iBAA3B,uBAAT,CAAA;AAEAjB,IAAAA,OAAO,CAACuB,GAAR,CAAY;AAAEC,MAAAA,SAAS,EAAEP,iBAAiB,GAAG,CAAjC;AAAoCE,MAAAA,QAAQ,EAAEd,qBAAqB,CAACc,QAAD;AAAnE,KAAZ;AACA,QAAMM,QAAQ,GAAG,IAAIzB,OAAJ,CAAY,KAAK1C,SAAL,CAAef,QAAf,EAAZ,EACdmF,GADc,CACV,KAAKnE,WAAL,CAAiBhB,QAAjB,EADU,EAEdoF,mBAFc,CAEMV,iBAFN,CAAjB;AAGA,WAAOQ,QAAQ,CAACxB,QAAT,CAAkBwB,QAAQ,CAACG,aAAT,EAAlB,EAA4CV,MAA5C,CAAP;AACD,GAxGH;;AAAA,SA0GSW,OA1GT,GA0GS,iBACLD,aADK,EAELV,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqBjI,gBAAQ,CAACqH;;;AAE9B,KAAUc,MAAM,CAACC,SAAP,CAAiBM,aAAjB,CAAV,IAAA/F,SAAS,QAAqC+F,aAArC,yBAAT,CAAA;AACA,MAAUA,aAAa,IAAI,CAA3B,KAAA/F,SAAS,QAAwB+F,aAAxB,mBAAT,CAAA;AAEAzB,IAAAA,GAAG,CAAC2B,EAAJ,GAASF,aAAT;AACAzB,IAAAA,GAAG,CAAC4B,EAAJ,GAAStB,eAAe,CAACU,QAAD,CAAxB;AACA,WAAO,IAAIhB,GAAJ,CAAQ,KAAK7C,SAAL,CAAef,QAAf,EAAR,EAAmCmF,GAAnC,CAAuC,KAAKnE,WAAL,CAAiBhB,QAAjB,EAAvC,EAAoE0D,QAApE,CAA6E2B,aAA7E,EAA4FV,MAA5F,CAAP;AACD,GArHH;;AAAA;AAAA;AAAA;AAWI,aAAOxH,IAAI,CAAC8D,MAAL,CAAY,KAAKF,SAAjB,EAA4B,KAAKC,WAAjC,CAAP;AACD,KAZH;;AAAA;AAAA;AAAA;AAgBI,aAAO,IAAImD,QAAJ,CAAahH,IAAI,CAACsI,SAAL,CAAe,KAAK1E,SAApB,EAA+B,KAAKC,WAApC,CAAb,EAA+D,KAAKA,WAApE,CAAP;AACD;AAjBH;;AAAA;AAAA;;ACdA,IAAM4C,KAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAa6B,cAAb;AAAA;;AAWE;AACA,0BAAsBC,QAAtB,EAA0CC,MAA1C;;;AACE,QAAMC,YAAY,GAAG/F,cAAc,CAAC8F,MAAD,CAAnC;AACA1G,IAAAA,4BAA4B,CAAC2G,YAAD,EAAe/H,YAAY,CAACG,OAA5B,CAA5B;AAEA,iCAAM4H,YAAN,EAAoB1I,IAAI,CAAC2I,YAAL,CAAkBpI,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYuI,QAAQ,CAACrD,QAArB,CAAvB,CAApB;AACA,UAAKqD,QAAL,GAAgBA,QAAhB;;AACD;AAfD;;;;;;AAHF,iBAOgBI,KAPhB,GAOS,eAAaH,MAAb;AACL,WAAO,IAAIF,cAAJ,CAAmBlD,KAAnB,EAA0BoD,MAA1B,CAAP;AACD,GATH;;AAAA;;AAAA,SAwBSpF,GAxBT,GAwBS,aAAIoC,KAAJ;AACL,KAAUG,cAAc,CAAC,KAAK4C,QAAN,EAAgB/C,KAAK,CAAC+C,QAAtB,CAAxB,IAAArG,SAAS,QAAgD,OAAhD,CAAT,CAAA;AACA,WAAO,IAAIoG,cAAJ,CAAmB,KAAKC,QAAxB,EAAkCxI,IAAI,CAACqD,GAAL,CAAS,KAAKwF,GAAd,EAAmBpD,KAAK,CAACoD,GAAzB,CAAlC,CAAP;AACD,GA3BH;;AAAA,SA6BSzB,QA7BT,GA6BS,kBAAS3B,KAAT;AACL,KAAUG,cAAc,CAAC,KAAK4C,QAAN,EAAgB/C,KAAK,CAAC+C,QAAtB,CAAxB,IAAArG,SAAS,QAAgD,OAAhD,CAAT,CAAA;AACA,WAAO,IAAIoG,cAAJ,CAAmB,KAAKC,QAAxB,EAAkCxI,IAAI,CAACoH,QAAL,CAAc,KAAKyB,GAAnB,EAAwBpD,KAAK,CAACoD,GAA9B,CAAlC,CAAP;AACD,GAhCH;;AAAA,SAkCSvB,aAlCT,GAkCS,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QACLF;AAAAA,MAAAA,oBAA4B;;;QAE5BE;AAAAA,MAAAA,WAAqBjI,gBAAQ,CAACoH;;;AAE9B,+BAAaU,aAAb,YAA2BC,iBAA3B,EAA8CC,MAA9C,EAAsDC,QAAtD;AACD,GAxCH;;AAAA,SA0CSU,OA1CT,GA0CS,iBACLD,aADK,EAELV,MAFK,EAGLC,QAHK;QACLS;AAAAA,MAAAA,gBAAwB,KAAKM,QAAL,CAAcrD;;;QAEtCsC;AAAAA,MAAAA,WAAqBjI,gBAAQ,CAACoH;;;AAE9B,MAAUsB,aAAa,IAAI,KAAKM,QAAL,CAAcrD,QAAzC,KAAAhD,SAAS,QAA0C,UAA1C,CAAT,CAAA;AACA,+BAAagG,OAAb,YAAqBD,aAArB,EAAoCV,MAApC,EAA4CC,QAA5C;AACD,GAjDH;;AAAA,SAmDSqB,OAnDT,GAmDS,iBAAQtB,MAAR;QAAQA;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;AAC9BjB,IAAAA,KAAG,CAAC2B,EAAJ,GAAS,KAAKI,QAAL,CAAcrD,QAAvB;AACA,WAAO,IAAIsB,KAAJ,CAAQ,KAAK7C,SAAL,CAAef,QAAf,EAAR,EAAmCmF,GAAnC,CAAuC,KAAKnE,WAAL,CAAiBhB,QAAjB,EAAvC,EAAoE0D,QAApE,CAA6EiB,MAA7E,CAAP;AACD,GAtDH;;AAAA;AAAA;AAAA;AAqBI,aAAO,KAAK5D,SAAZ;AACD;AAtBH;;AAAA;AAAA,EAAoCoD,QAApC;;ICNa+B,WAAb;AAAA;;AAGE;AACA,uBAAmBC,KAAnB,EAAiCP,MAAjC;;;AACE,uCAAMO,KAAN,EAAaP,MAAb;AACA,UAAKO,KAAL,GAAaA,KAAb;;AACD;;AAPH;;AAAA,SASS3F,GATT,GASS,aAAIoC,KAAJ;AACL,KAAU,KAAKuD,KAAL,CAAWxD,MAAX,CAAkBC,KAAK,CAACuD,KAAxB,CAAV,IAAA7G,SAAS,QAAiC,OAAjC,CAAT,CAAA;AACA,WAAO,IAAI4G,WAAJ,CAAgB,KAAKC,KAArB,EAA4BhJ,IAAI,CAACqD,GAAL,CAAS,KAAKwF,GAAd,EAAmBpD,KAAK,CAACoD,GAAzB,CAA5B,CAAP;AACD,GAZH;;AAAA,SAcSzB,QAdT,GAcS,kBAAS3B,KAAT;AACL,KAAU,KAAKuD,KAAL,CAAWxD,MAAX,CAAkBC,KAAK,CAACuD,KAAxB,CAAV,IAAA7G,SAAS,QAAiC,OAAjC,CAAT,CAAA;AACA,WAAO,IAAI4G,WAAJ,CAAgB,KAAKC,KAArB,EAA4BhJ,IAAI,CAACoH,QAAL,CAAc,KAAKyB,GAAnB,EAAwBpD,KAAK,CAACoD,GAA9B,CAA5B,CAAP;AACD,GAjBH;;AAAA;AAAA,EAAiCN,cAAjC;;ICKaU,KAAb;AAAA;;AAiBE;AACA,iBAAmBC,YAAnB,EAA2CC,aAA3C,EAAoEtF,WAApE,EAA4FD,SAA5F;;;AACE,iCAAMA,SAAN,EAAiBC,WAAjB;AAEA,UAAKqF,YAAL,GAAoBA,YAApB;AACA,UAAKC,aAAL,GAAqBA,aAArB;AACA,UAAKC,MAAL,GAAc,IAAIpC,QAAJ,CACZhH,IAAI,CAAC2I,YAAL,CAAkBpI,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYiJ,YAAY,CAAC/D,QAAzB,CAAvB,CADY,EAEZnF,IAAI,CAAC2I,YAAL,CAAkBpI,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYkJ,aAAa,CAAChE,QAA1B,CAAvB,CAFY,CAAd;;AAID;;AA3BH,QAKgBkE,SALhB,GAKS,mBAAiBC,KAAjB;AACL,QAAMC,MAAM,GAAY,EAAxB;;AACA,yDAAwBD,KAAK,CAACE,KAAN,CAAYC,OAAZ,EAAxB,wCAA+C;AAAA;AAAA,UAAnCC,CAAmC;AAAA,UAAhCC,IAAgC;AAC7CJ,MAAAA,MAAM,CAAC5E,IAAP,CACE2E,KAAK,CAACM,IAAN,CAAWF,CAAX,EAAclE,MAAd,CAAqBmE,IAAI,CAACE,MAA1B,IACI,IAAIZ,KAAJ,CAAUU,IAAI,CAACG,QAAL,CAActB,QAAxB,EAAkCmB,IAAI,CAACI,QAAL,CAAcvB,QAAhD,EAA0DmB,IAAI,CAACG,QAAL,CAAcjB,GAAxE,EAA6Ec,IAAI,CAACI,QAAL,CAAclB,GAA3F,CADJ,GAEI,IAAII,KAAJ,CAAUU,IAAI,CAACI,QAAL,CAAcvB,QAAxB,EAAkCmB,IAAI,CAACG,QAAL,CAActB,QAAhD,EAA0DmB,IAAI,CAACI,QAAL,CAAclB,GAAxE,EAA6Ec,IAAI,CAACG,QAAL,CAAcjB,GAA3F,CAHN;AAKD;;AACD,WAAOU,MAAM,CAACS,KAAP,CAAa,CAAb,EAAgBC,MAAhB,CAAuB,UAACC,WAAD,EAAcC,YAAd;AAAA,aAA+BD,WAAW,CAAC9G,QAAZ,CAAqB+G,YAArB,CAA/B;AAAA,KAAvB,EAA0FZ,MAAM,CAAC,CAAD,CAAhG,CAAP;AACD,GAfH;;AAAA;;AAAA,SAqCStC,MArCT,GAqCS;AACL,WAAO,IAAIgC,KAAJ,CAAU,KAAKE,aAAf,EAA8B,KAAKD,YAAnC,EAAiD,KAAKtF,SAAtD,EAAiE,KAAKC,WAAtE,CAAP;AACD,GAvCH;;AAAA,SAyCST,QAzCT,GAyCS,kBAASqC,KAAT;AACL,KAAUG,cAAc,CAAC,KAAKuD,aAAN,EAAqB1D,KAAK,CAACyD,YAA3B,CAAxB,IAAA/G,SAAS,QAAyD,OAAzD,CAAT,CAAA;;AACA,QAAMiI,QAAQ,uBAAShH,QAAT,YAAkBqC,KAAlB,CAAd;;AACA,WAAO,IAAIwD,KAAJ,CAAU,KAAKC,YAAf,EAA6BzD,KAAK,CAAC0D,aAAnC,EAAkDiB,QAAQ,CAACvG,WAA3D,EAAwEuG,QAAQ,CAACxG,SAAjF,CAAP;AACD,GA7CH;AAAA;;AAAA,SAgDSyG,KAhDT,GAgDS,eAAMC,cAAN;AACL,KAAU1E,cAAc,CAAC0E,cAAc,CAAC9B,QAAhB,EAA0B,KAAKU,YAA/B,CAAxB,IAAA/G,SAAS,QAA6D,OAA7D,CAAT,CAAA;;AACA,QAAI,KAAKgH,aAAL,YAA8B7D,KAAlC,EAAyC;AACvC,aAAO,IAAIyD,WAAJ,CAAgB,KAAKI,aAArB,EAAoC,oBAAM/F,QAAN,YAAekH,cAAc,CAACzB,GAA9B,EAAmCd,QAAvE,CAAP;AACD;;AACD,WAAOQ,cAAc,CAACK,KAAf,CAAqB,oBAAMxF,QAAN,YAAekH,cAAc,CAACzB,GAA9B,EAAmCd,QAAxD,CAAP;AACD,GAtDH;;AAAA,SAwDST,aAxDT,GAwDS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;AAAAA,MAAAA,oBAA4B;;;AAC/C,WAAO,KAAKgD,QAAL,CAAcjD,aAAd,CAA4BC,iBAA5B,EAA+CC,MAA/C,EAAuDC,QAAvD,CAAP;AACD,GA1DH;;AAAA,SA4DSU,OA5DT,GA4DS,iBAAQD,aAAR,EAAmCV,MAAnC,EAAoDC,QAApD;QAAQS;AAAAA,MAAAA,gBAAwB;;;AACrC,WAAO,KAAKqC,QAAL,CAAcpC,OAAd,CAAsBD,aAAtB,EAAqCV,MAArC,EAA6CC,QAA7C,CAAP;AACD,GA9DH;;AAAA;AAAA;AAAA;AA8BI,aAAO,IAAIT,QAAJ,CAAa,KAAKpD,SAAlB,EAA6B,KAAKC,WAAlC,CAAP;AACD;AA/BH;AAAA;AAAA;AAkCI,iCAAaT,QAAb,YAAsB,KAAKgG,MAA3B;AACD;AAnCH;;AAAA;AAAA,EAA2BpC,QAA3B;;ACYA,IAAIwD,kBAAkB,GAAqE,EAA3F;AAEA,IAAaC,IAAb;AAwBE,gBAAmBC,YAAnB,EAA8CC,YAA9C,EAAyEC,QAAzE;AACE,QAAMC,YAAY,GAAGH,YAAY,CAAC1B,KAAb,CAAmBtD,WAAnB,CAA+BiF,YAAY,CAAC3B,KAA5C;AAAA,MACjB,CAAC0B,YAAD,EAAeC,YAAf,CADiB,GAEjB,CAACA,YAAD,EAAeD,YAAf,CAFJ;AAGA,SAAKI,cAAL,GAAsB,IAAIxF,KAAJ,CACpBuF,YAAY,CAAC,CAAD,CAAZ,CAAgB7B,KAAhB,CAAsBzD,OADF,EAEpBkF,IAAI,CAACjI,UAAL,CAAgBqI,YAAY,CAAC,CAAD,CAAZ,CAAgB7B,KAAhC,EAAuC6B,YAAY,CAAC,CAAD,CAAZ,CAAgB7B,KAAvD,EAA8D4B,QAA9D,CAFoB,EAGpB,EAHoB,EAIpB,QAJoB,EAKpB,YALoB,CAAtB;AAOA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKD,QAAL,GAAgBA,QAAhB;AACD;;AArCH,OAKgBpI,UALhB,GAKS,oBAAkBuI,MAAlB,EAAiCC,MAAjC,EAAgDJ,QAAhD;;;AACL,QAAMK,MAAM,GAAGF,MAAM,CAACrF,WAAP,CAAmBsF,MAAnB,IAA6B,CAACD,MAAD,EAASC,MAAT,CAA7B,GAAgD,CAACA,MAAD,EAASD,MAAT,CAA/D;;AACA,QAAMG,kBAAkB,GAAG,MAAMN,QAAjC;;AACA,QAAI,wBAAAJ,kBAAkB,UAAlB,0FAAqBS,MAAM,CAAC,CAAD,CAAN,CAAU3I,OAAV,GAAkB4I,kBAAvC,+EAA6DD,MAAM,CAAC,CAAD,CAAN,CAAU3I,OAAvE,OAAoF6I,SAAxF,EAAmG;AAAA;;AACjGX,MAAAA,kBAAkB,gBACbA,kBADa,6BAEfS,MAAM,CAAC,CAAD,CAAN,CAAU3I,OAAV,GAAkB4I,kBAFH,yCAGXV,kBAHW,yDAGX,qBAAqBS,MAAM,CAAC,CAAD,CAAN,CAAU3I,OAAV,GAAkB4I,kBAAvC,CAHW,6BAIbD,MAAM,CAAC,CAAD,CAAN,CAAU3I,OAJG,IAIO8I,yBAAiB,CACpC3L,eAAe,CAACmL,QAAD,CADqB,EAEpCS,kBAAS,CAAC,CAAC,OAAD,CAAD,EAAY,CAACC,aAAI,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyB,CAACL,MAAM,CAAC,CAAD,CAAN,CAAU3I,OAAX,EAAoB2I,MAAM,CAAC,CAAD,CAAN,CAAU3I,OAA9B,CAAzB,CAAL,CAAZ,CAF2B,EAGpCxC,cAAc,CAAC8K,QAAD,CAHsB,CAJxB,0BAAlB;AAWD;;AACD,WAAOJ,kBAAkB,CAACS,MAAM,CAAC,CAAD,CAAN,CAAU3I,OAAV,GAAkB4I,kBAAnB,CAAlB,CAAyDD,MAAM,CAAC,CAAD,CAAN,CAAU3I,OAAnE,CAAP;AACD;AAiBD;;;;AAvCF;;AAAA;;AAAA,SA2CSiJ,aA3CT,GA2CS,uBAAcvC,KAAd;AACL,WAAOA,KAAK,CAACxD,MAAN,CAAa,KAAKqE,MAAlB,KAA6Bb,KAAK,CAACxD,MAAN,CAAa,KAAKgG,MAAlB,CAApC;AACD;AAED;;;AA/CF;;AA6DE;;;;AA7DF,SAiESC,OAjET,GAiES,iBAAQzC,KAAR;AACL,KAAU,KAAKuC,aAAL,CAAmBvC,KAAnB,CAAV,IAAA7G,SAAS,QAA4B,OAA5B,CAAT,CAAA;AACA,WAAO6G,KAAK,CAACxD,MAAN,CAAa,KAAKqE,MAAlB,IAA4B,KAAK6B,WAAjC,GAA+C,KAAKC,WAA3D;AACD;AAED;;;AAtEF;;AAAA,SA6FSC,SA7FT,GA6FS,mBAAU5C,KAAV;AACL,KAAU,KAAKuC,aAAL,CAAmBvC,KAAnB,CAAV,IAAA7G,SAAS,QAA4B,OAA5B,CAAT,CAAA;AACA,WAAO6G,KAAK,CAACxD,MAAN,CAAa,KAAKqE,MAAlB,IAA4B,KAAKC,QAAjC,GAA4C,KAAKC,QAAxD;AACD,GAhGH;;AAAA,SAkGS8B,eAlGT,GAkGS,yBAAgBC,WAAhB;AACL,KAAU,KAAKP,aAAL,CAAmBO,WAAW,CAAC9C,KAA/B,CAAV,IAAA7G,SAAS,QAAwC,OAAxC,CAAT,CAAA;;AACA,QAAInC,IAAI,CAACmH,KAAL,CAAW,KAAK2C,QAAL,CAAcjB,GAAzB,EAA8B3I,IAA9B,KAAuCF,IAAI,CAACmH,KAAL,CAAW,KAAK4C,QAAL,CAAclB,GAAzB,EAA8B3I,IAA9B,CAA3C,EAAgF;AAC9E,YAAM,IAAIsB,yBAAJ,EAAN;AACD;;AACD,QAAMuK,YAAY,GAAG,KAAKH,SAAL,CAAeE,WAAW,CAAC9C,KAA3B,CAArB;AACA,QAAMgD,aAAa,GAAG,KAAKJ,SAAL,CAAeE,WAAW,CAAC9C,KAAZ,CAAkBxD,MAAlB,CAAyB,KAAKqE,MAA9B,IAAwC,KAAK2B,MAA7C,GAAsD,KAAK3B,MAA1E,CAAtB;AACA,QAAMoC,kBAAkB,GAAGjM,IAAI,CAACoD,QAAL,CAAc0I,WAAW,CAACjD,GAA1B,EAA+BpI,IAA/B,CAA3B;AACA,QAAMmD,SAAS,GAAG5D,IAAI,CAACoD,QAAL,CAAc6I,kBAAd,EAAkCD,aAAa,CAACnD,GAAhD,CAAlB;AACA,QAAMhF,WAAW,GAAG7D,IAAI,CAACqD,GAAL,CAASrD,IAAI,CAACoD,QAAL,CAAc2I,YAAY,CAAClD,GAA3B,EAAgCnI,KAAhC,CAAT,EAAiDuL,kBAAjD,CAApB;AACA,QAAMC,YAAY,GAAG,IAAInD,WAAJ,CACnB+C,WAAW,CAAC9C,KAAZ,CAAkBxD,MAAlB,CAAyB,KAAKqE,MAA9B,IAAwC,KAAK2B,MAA7C,GAAsD,KAAK3B,MADxC,EAEnB7J,IAAI,CAAC8D,MAAL,CAAYF,SAAZ,EAAuBC,WAAvB,CAFmB,CAArB;;AAIA,QAAI7D,IAAI,CAACmH,KAAL,CAAW+E,YAAY,CAACrD,GAAxB,EAA6B3I,IAA7B,CAAJ,EAAwC;AACtC,YAAM,IAAI4B,4BAAJ,EAAN;AACD;;AACD,WAAO,CAACoK,YAAD,EAAe,IAAIzB,IAAJ,CAASsB,YAAY,CAAC1I,GAAb,CAAiByI,WAAjB,CAAT,EAAwCE,aAAa,CAAC5E,QAAd,CAAuB8E,YAAvB,CAAxC,EAA8E,KAAKtB,QAAnF,CAAf,CAAP;AACD,GApHH;;AAAA,SAsHSuB,cAtHT,GAsHS,wBAAeD,YAAf;AACL,KAAU,KAAKX,aAAL,CAAmBW,YAAY,CAAClD,KAAhC,CAAV,IAAA7G,SAAS,QAAyC,OAAzC,CAAT,CAAA;;AACA,QACEnC,IAAI,CAACmH,KAAL,CAAW,KAAK2C,QAAL,CAAcjB,GAAzB,EAA8B3I,IAA9B,KACAF,IAAI,CAACmH,KAAL,CAAW,KAAK4C,QAAL,CAAclB,GAAzB,EAA8B3I,IAA9B,CADA,IAEAF,IAAI,CAACkC,kBAAL,CAAwBgK,YAAY,CAACrD,GAArC,EAA0C,KAAK+C,SAAL,CAAeM,YAAY,CAAClD,KAA5B,EAAmCH,GAA7E,CAHF,EAIE;AACA,YAAM,IAAIrH,yBAAJ,EAAN;AACD;;AAED,QAAMwK,aAAa,GAAG,KAAKJ,SAAL,CAAeM,YAAY,CAAClD,KAA5B,CAAtB;AACA,QAAM+C,YAAY,GAAG,KAAKH,SAAL,CAAeM,YAAY,CAAClD,KAAb,CAAmBxD,MAAnB,CAA0B,KAAKqE,MAA/B,IAAyC,KAAK2B,MAA9C,GAAuD,KAAK3B,MAA3E,CAArB;AACA,QAAMjG,SAAS,GAAG5D,IAAI,CAACoD,QAAL,CAAcpD,IAAI,CAACoD,QAAL,CAAc2I,YAAY,CAAClD,GAA3B,EAAgCqD,YAAY,CAACrD,GAA7C,CAAd,EAAiEnI,KAAjE,CAAlB;AACA,QAAMmD,WAAW,GAAG7D,IAAI,CAACoD,QAAL,CAAcpD,IAAI,CAACoH,QAAL,CAAc4E,aAAa,CAACnD,GAA5B,EAAiCqD,YAAY,CAACrD,GAA9C,CAAd,EAAkEpI,IAAlE,CAApB;AACA,QAAMqL,WAAW,GAAG,IAAI/C,WAAJ,CAClBmD,YAAY,CAAClD,KAAb,CAAmBxD,MAAnB,CAA0B,KAAKqE,MAA/B,IAAyC,KAAK2B,MAA9C,GAAuD,KAAK3B,MAD1C,EAElB7J,IAAI,CAACqD,GAAL,CAASrD,IAAI,CAAC8D,MAAL,CAAYF,SAAZ,EAAuBC,WAAvB,CAAT,EAA8C1D,GAA9C,CAFkB,CAApB;AAIA,WAAO,CAAC2L,WAAD,EAAc,IAAIrB,IAAJ,CAASsB,YAAY,CAAC1I,GAAb,CAAiByI,WAAjB,CAAT,EAAwCE,aAAa,CAAC5E,QAAd,CAAuB8E,YAAvB,CAAxC,EAA8E,KAAKtB,QAAnF,CAAd,CAAP;AACD,GAzIH;;AAAA,SA2ISwB,kBA3IT,GA2IS,4BACLC,WADK,EAEL3B,YAFK,EAGLC,YAHK;AAKL,KAAU0B,WAAW,CAACrD,KAAZ,CAAkBxD,MAAlB,CAAyB,KAAKsF,cAA9B,CAAV,IAAA3I,SAAS,QAAgD,WAAhD,CAAT,CAAA;AACA,QAAM0I,YAAY,GAAGH,YAAY,CAAC1B,KAAb,CAAmBtD,WAAnB,CAA+BiF,YAAY,CAAC3B,KAA5C;AAAA,MACjB,CAAC0B,YAAD,EAAeC,YAAf,CADiB,GAEjB,CAACA,YAAD,EAAeD,YAAf,CAFJ;AAGA,MAAUG,YAAY,CAAC,CAAD,CAAZ,CAAgB7B,KAAhB,CAAsBxD,MAAtB,CAA6B,KAAKqE,MAAlC,KAA6CgB,YAAY,CAAC,CAAD,CAAZ,CAAgB7B,KAAhB,CAAsBxD,MAAtB,CAA6B,KAAKgG,MAAlC,CAAvD,KAAArJ,SAAS,QAAyF,OAAzF,CAAT,CAAA;AAEA,QAAImK,SAAJ;;AACA,QAAItM,IAAI,CAACmH,KAAL,CAAWkF,WAAW,CAACxD,GAAvB,EAA4B3I,IAA5B,CAAJ,EAAuC;AACrCoM,MAAAA,SAAS,GAAGtM,IAAI,CAACoH,QAAL,CAAcrD,IAAI,CAAC/D,IAAI,CAACoD,QAAL,CAAcyH,YAAY,CAAC,CAAD,CAAZ,CAAgBhC,GAA9B,EAAmCgC,YAAY,CAAC,CAAD,CAAZ,CAAgBhC,GAAnD,CAAD,CAAlB,EAA6E9I,iBAA7E,CAAZ;AACD,KAFD,MAEO;AACL,UAAMwM,OAAO,GAAGvM,IAAI,CAAC8D,MAAL,CAAY9D,IAAI,CAACoD,QAAL,CAAcyH,YAAY,CAAC,CAAD,CAAZ,CAAgBhC,GAA9B,EAAmCwD,WAAW,CAACxD,GAA/C,CAAZ,EAAiE,KAAKiB,QAAL,CAAcjB,GAA/E,CAAhB;AACA,UAAM2D,OAAO,GAAGxM,IAAI,CAAC8D,MAAL,CAAY9D,IAAI,CAACoD,QAAL,CAAcyH,YAAY,CAAC,CAAD,CAAZ,CAAgBhC,GAA9B,EAAmCwD,WAAW,CAACxD,GAA/C,CAAZ,EAAiE,KAAKkB,QAAL,CAAclB,GAA/E,CAAhB;AACAyD,MAAAA,SAAS,GAAGtM,IAAI,CAACoC,eAAL,CAAqBmK,OAArB,EAA8BC,OAA9B,IAAyCD,OAAzC,GAAmDC,OAA/D;AACD;;AACD,QAAI,CAACxM,IAAI,CAACmE,WAAL,CAAiBmI,SAAjB,EAA4BpM,IAA5B,CAAL,EAAwC;AACtC,YAAM,IAAI4B,4BAAJ,EAAN;AACD;;AACD,WAAO,IAAIiH,WAAJ,CAAgB,KAAK+B,cAArB,EAAqCwB,SAArC,CAAP;AACD,GAlKH;;AAAA,SAoKSG,iBApKT,GAoKS,2BACLzD,KADK,EAELqD,WAFK,EAGLC,SAHK,EAILI,KAJK,EAKLC,KALK;QAILD;AAAAA,MAAAA,QAAiB;;;AAGjB,KAAU,KAAKnB,aAAL,CAAmBvC,KAAnB,CAAV,IAAA7G,SAAS,QAA4B,OAA5B,CAAT,CAAA;AACA,KAAUkK,WAAW,CAACrD,KAAZ,CAAkBxD,MAAlB,CAAyB,KAAKsF,cAA9B,CAAV,IAAA3I,SAAS,QAAgD,cAAhD,CAAT,CAAA;AACA,KAAUmK,SAAS,CAACtD,KAAV,CAAgBxD,MAAhB,CAAuB,KAAKsF,cAA5B,CAAV,IAAA3I,SAAS,QAA8C,WAA9C,CAAT,CAAA;AACA,KAAUnC,IAAI,CAACoC,eAAL,CAAqBkK,SAAS,CAACzD,GAA/B,EAAoCwD,WAAW,CAACxD,GAAhD,CAAV,IAAA1G,SAAS,QAAuD,WAAvD,CAAT,CAAA;AAEA,QAAIyK,mBAAJ;;AACA,QAAI,CAACF,KAAL,EAAY;AACVE,MAAAA,mBAAmB,GAAGP,WAAtB;AACD,KAFD,MAEO;AACL,OAAU,CAAC,CAACM,KAAZ,IAAAxK,SAAS,QAAU,QAAV,CAAT,CAAA;AACA,UAAM0K,WAAW,GAAGlK,cAAc,CAACgK,KAAD,CAAlC;;AACA,UAAI,CAAC3M,IAAI,CAACmH,KAAL,CAAW0F,WAAX,EAAwB3M,IAAxB,CAAL,EAAoC;AAClC,YAAM4M,KAAK,GAAG/I,IAAI,CAAC/D,IAAI,CAACoD,QAAL,CAAc,KAAK0G,QAAL,CAAcjB,GAA5B,EAAiC,KAAKkB,QAAL,CAAclB,GAA/C,CAAD,CAAlB;AACA,YAAMkE,SAAS,GAAGhJ,IAAI,CAAC8I,WAAD,CAAtB;;AACA,YAAI7M,IAAI,CAACmE,WAAL,CAAiB2I,KAAjB,EAAwBC,SAAxB,CAAJ,EAAwC;AACtC,cAAMnJ,SAAS,GAAG5D,IAAI,CAACoD,QAAL,CAAciJ,WAAW,CAACxD,GAA1B,EAA+B7I,IAAI,CAACoH,QAAL,CAAc0F,KAAd,EAAqBC,SAArB,CAA/B,CAAlB;AACA,cAAMlJ,WAAW,GAAG7D,IAAI,CAACqD,GAAL,CAASrD,IAAI,CAACoD,QAAL,CAAc0J,KAAd,EAAqBxM,IAArB,CAAT,EAAqCyM,SAArC,CAApB;AACA,cAAMC,YAAY,GAAGhN,IAAI,CAAC8D,MAAL,CAAYF,SAAZ,EAAuBC,WAAvB,CAArB;AACA+I,UAAAA,mBAAmB,GAAGP,WAAW,CAAChJ,GAAZ,CAAgB,IAAI0F,WAAJ,CAAgB,KAAK+B,cAArB,EAAqCkC,YAArC,CAAhB,CAAtB;AACD,SALD,MAKO;AACLJ,UAAAA,mBAAmB,GAAGP,WAAtB;AACD;AACF,OAXD,MAWO;AACLO,QAAAA,mBAAmB,GAAGP,WAAtB;AACD;AACF;;AAED,WAAO,IAAItD,WAAJ,CACLC,KADK,EAELhJ,IAAI,CAAC8D,MAAL,CAAY9D,IAAI,CAACoD,QAAL,CAAckJ,SAAS,CAACzD,GAAxB,EAA6B,KAAK+C,SAAL,CAAe5C,KAAf,EAAsBH,GAAnD,CAAZ,EAAqE+D,mBAAmB,CAAC/D,GAAzF,CAFK,CAAP;AAID,GA1MH;;AAAA;AAAA;AAAA;AAmDI,aAAO,IAAII,KAAJ,CAAU,KAAKY,MAAf,EAAuB,KAAK2B,MAA5B,EAAoC,KAAKX,YAAL,CAAkB,CAAlB,EAAqBhC,GAAzD,EAA8D,KAAKgC,YAAL,CAAkB,CAAlB,EAAqBhC,GAAnF,CAAP;AACD;AAED;;;;AAtDF;AAAA;AAAA;AA0DI,aAAO,IAAII,KAAJ,CAAU,KAAKuC,MAAf,EAAuB,KAAK3B,MAA5B,EAAoC,KAAKgB,YAAL,CAAkB,CAAlB,EAAqBhC,GAAzD,EAA8D,KAAKgC,YAAL,CAAkB,CAAlB,EAAqBhC,GAAnF,CAAP;AACD;AA3DH;AAAA;AAAA;AA0EI,aAAO,KAAKgB,MAAL,CAAYtE,OAAnB;AACD;AA3EH;AAAA;AAAA;AA8EI,aAAO,KAAKsF,YAAL,CAAkB,CAAlB,EAAqB7B,KAA5B;AACD;AA/EH;AAAA;AAAA;AAkFI,aAAO,KAAK6B,YAAL,CAAkB,CAAlB,EAAqB7B,KAA5B;AACD;AAnFH;AAAA;AAAA;AAsFI,aAAO,KAAK6B,YAAL,CAAkB,CAAlB,CAAP;AACD;AAvFH;AAAA;AAAA;AA0FI,aAAO,KAAKA,YAAL,CAAkB,CAAlB,CAAP;AACD;AA3FH;;AAAA;AAAA;;IClBaoC,KAAb;AAOE,iBAAmBzD,KAAnB,EAAkC0D,KAAlC,EAAmDC,MAAnD;AACE,MAAU3D,KAAK,CAAC9E,MAAN,GAAe,CAAzB,KAAAvC,SAAS,QAAmB,OAAnB,CAAT,CAAA;AACA,KACEqH,KAAK,CAAC4D,KAAN,CAAY,UAAAzD,IAAI;AAAA,aAAIA,IAAI,CAACpE,OAAL,KAAiBiE,KAAK,CAAC,CAAD,CAAL,CAASjE,OAA9B;AAAA,KAAhB,CADF,IAAApD,SAAS,QAEP,WAFO,CAAT,CAAA;AAIA,MACG+K,KAAK,YAAY5H,KAAjB,IAA0BkE,KAAK,CAAC,CAAD,CAAL,CAAS+B,aAAT,CAAuB2B,KAAvB,CAA3B,IACGA,KAAK,KAAK7H,KAAV,IAAmBmE,KAAK,CAAC,CAAD,CAAL,CAAS+B,aAAT,CAAuBxF,IAAI,CAACyD,KAAK,CAAC,CAAD,CAAL,CAASjE,OAAV,CAA3B,CAFxB,KAAApD,SAAS,QAGP,OAHO,CAAT,CAAA;AAKA,MACE,OAAOgL,MAAP,KAAkB,WAAlB,IACGA,MAAM,YAAY7H,KAAlB,IAA2BkE,KAAK,CAACA,KAAK,CAAC9E,MAAN,GAAe,CAAhB,CAAL,CAAwB6G,aAAxB,CAAsC4B,MAAtC,CAD9B,IAEGA,MAAM,KAAK9H,KAAX,IAAoBmE,KAAK,CAACA,KAAK,CAAC9E,MAAN,GAAe,CAAhB,CAAL,CAAwB6G,aAAxB,CAAsCxF,IAAI,CAACyD,KAAK,CAAC,CAAD,CAAL,CAASjE,OAAV,CAA1C,CAHzB,KAAApD,SAAS,QAIP,QAJO,CAAT,CAAA;AAOA,QAAMyH,IAAI,GAAY,CAACsD,KAAK,YAAY5H,KAAjB,GAAyB4H,KAAzB,GAAiCnH,IAAI,CAACyD,KAAK,CAAC,CAAD,CAAL,CAASjE,OAAV,CAAtC,CAAtB;;AACA,yDAAwBiE,KAAK,CAACC,OAAN,EAAxB,wCAAyC;AAAA;AAAA,UAA7BC,CAA6B;AAAA,UAA1BC,IAA0B;AACvC,UAAM0D,YAAY,GAAGzD,IAAI,CAACF,CAAD,CAAzB;AACA,QAAU2D,YAAY,CAAC7H,MAAb,CAAoBmE,IAAI,CAACE,MAAzB,KAAoCwD,YAAY,CAAC7H,MAAb,CAAoBmE,IAAI,CAAC6B,MAAzB,CAA9C,KAAArJ,SAAS,QAAuE,MAAvE,CAAT,CAAA;;AACA,UAAMgL,OAAM,GAAGE,YAAY,CAAC7H,MAAb,CAAoBmE,IAAI,CAACE,MAAzB,IAAmCF,IAAI,CAAC6B,MAAxC,GAAiD7B,IAAI,CAACE,MAArE;;AACAD,MAAAA,IAAI,CAACjF,IAAL,CAAUwI,OAAV;AACD;;AAED,SAAK3D,KAAL,GAAaA,KAAb;AACA,SAAKI,IAAL,GAAYA,IAAZ;AACA,SAAK0D,QAAL,GAAgBrE,KAAK,CAACI,SAAN,CAAgB,IAAhB,CAAhB;AACA,SAAK6D,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd,aAAcA,MAAd,cAAcA,MAAd,GAAwBvD,IAAI,CAACA,IAAI,CAAClF,MAAL,GAAc,CAAf,CAA5B;AACD;;AAtCH;AAAA;AAAA;AAyCI,aAAO,KAAK8E,KAAL,CAAW,CAAX,EAAcjE,OAArB;AACD;AA1CH;;AAAA;AAAA;;ACLA,IAAMgI,YAAY,gBAAG,IAAIvG,QAAJ,CAAaxG,IAAb,CAArB;;AAEA,IAAagN,OAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,SACSlG,aADT,GACS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;AAAAA,MAAAA,oBAA4B;;;AAC/C,WAAO,KAAKnE,QAAL,CAAcmK,YAAd,EAA4BjG,aAA5B,CAA0CC,iBAA1C,EAA6DC,MAA7D,EAAqEC,QAArE,CAAP;AACD,GAHH;;AAAA,SAKSU,OALT,GAKS,iBAAQD,aAAR,EAAmCV,MAAnC,EAAoDC,QAApD;QAAQS;AAAAA,MAAAA,gBAAwB;;;AACrC,WAAO,KAAK9E,QAAL,CAAcmK,YAAd,EAA4BpF,OAA5B,CAAoCD,aAApC,EAAmDV,MAAnD,EAA2DC,QAA3D,CAAP;AACD,GAPH;;AAAA;AAAA,EAA6BT,QAA7B;;ACSA;;;;;;;AAMA,SAASyG,kBAAT,CAA4BH,QAA5B,EAA6CxB,WAA7C,EAA0EI,YAA1E;AACE,MAAMwB,UAAU,GAAGJ,QAAQ,CAACzE,GAAT,CAAazF,QAAb,CAAsB0I,WAAW,CAACjD,GAAlC,CAAnB;;AAEA,MAAM8E,QAAQ,GAAGD,UAAU,CAACtG,QAAX,CAAoB8E,YAAY,CAACrD,GAAjC,EAAsC/E,MAAtC,CAA6C4J,UAA7C,CAAjB;AACA,SAAO,IAAIF,OAAJ,CAAYG,QAAQ,CAAC/J,SAArB,EAAgC+J,QAAQ,CAAC9J,WAAzC,CAAP;AACD;AAWD;;;AACA,SAAgB+J,sBAAsBC,GAAgBC;AACpD;AACA,GAAUlI,cAAc,CAACiI,CAAC,CAAC/B,WAAF,CAActD,QAAf,EAAyBsF,CAAC,CAAChC,WAAF,CAActD,QAAvC,CAAxB,IAAArG,SAAS,QAAiE,gBAAjE,CAAT,CAAA;AACA,GAAUyD,cAAc,CAACiI,CAAC,CAAC3B,YAAF,CAAe1D,QAAhB,EAA0BsF,CAAC,CAAC5B,YAAF,CAAe1D,QAAzC,CAAxB,IAAArG,SAAS,QAAmE,iBAAnE,CAAT,CAAA;;AACA,MAAI0L,CAAC,CAAC3B,YAAF,CAAe7E,OAAf,CAAuByG,CAAC,CAAC5B,YAAzB,CAAJ,EAA4C;AAC1C,QAAI2B,CAAC,CAAC/B,WAAF,CAAczE,OAAd,CAAsByG,CAAC,CAAChC,WAAxB,CAAJ,EAA0C;AACxC,aAAO,CAAP;AACD,KAHyC;;;AAK1C,QAAI+B,CAAC,CAAC/B,WAAF,CAAc1H,QAAd,CAAuB0J,CAAC,CAAChC,WAAzB,CAAJ,EAA2C;AACzC,aAAO,CAAC,CAAR;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAVD,MAUO;AACL;AACA,QAAI+B,CAAC,CAAC3B,YAAF,CAAe9H,QAAf,CAAwB0J,CAAC,CAAC5B,YAA1B,CAAJ,EAA6C;AAC3C,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF;AACF;;AAGD,SAAgB6B,gBAAgBF,GAAUC;AACxC,MAAME,MAAM,GAAGJ,qBAAqB,CAACC,CAAD,EAAIC,CAAJ,CAApC;;AACA,MAAIE,MAAM,KAAK,CAAf,EAAkB;AAChB,WAAOA,MAAP;AACD;;;AAGD,MAAIH,CAAC,CAACI,WAAF,CAAc7J,QAAd,CAAuB0J,CAAC,CAACG,WAAzB,CAAJ,EAA2C;AACzC,WAAO,CAAC,CAAR;AACD,GAFD,MAEO,IAAIJ,CAAC,CAACI,WAAF,CAAc9J,WAAd,CAA0B2J,CAAC,CAACG,WAA5B,CAAJ,EAA8C;AACnD,WAAO,CAAP;AACD;;;AAGD,SAAOJ,CAAC,CAACvE,KAAF,CAAQM,IAAR,CAAalF,MAAb,GAAsBoJ,CAAC,CAACxE,KAAF,CAAQM,IAAR,CAAalF,MAA1C;AACD;AASD;;;;;;AAKA,SAASwJ,aAAT,CAAuB5D,cAAvB,EAAuD/E,OAAvD;AACE,MAAI+E,cAAc,YAAYvB,WAA9B,EAA2C,OAAOuB,cAAP;AAC3C,MAAIA,cAAc,CAAC9B,QAAf,KAA4BnD,KAAhC,EAAuC,OAAO,IAAI0D,WAAJ,CAAgBhD,IAAI,CAACR,OAAD,CAApB,EAA+B+E,cAAc,CAACzB,GAA9C,CAAP;AACvC,IAAA1G,SAAS,QAAQ,UAAR,CAAT,CAAA;AACD;;AAED,SAASgM,eAAT,CAAyB3F,QAAzB,EAA6CjD,OAA7C;AACE,MAAIiD,QAAQ,YAAYlD,KAAxB,EAA+B,OAAOkD,QAAP;AAC/B,MAAIA,QAAQ,KAAKnD,KAAjB,EAAwB,OAAOU,IAAI,CAACR,OAAD,CAAX;AACxB,IAAApD,SAAS,QAAQ,UAAR,CAAT,CAAA;AACD;AAED;;;;;;AAIA,IAAaiM,KAAb;AA6DE,iBAAmB9E,KAAnB,EAAiCb,MAAjC,EAAyD4F,SAAzD,EAA+E9K,cAA/E,EAA0G+K,gBAA1G;AAEE,QAAMC,OAAO,GAAkB,IAAIC,KAAJ,CAAUlF,KAAK,CAACM,IAAN,CAAWlF,MAArB,CAA/B;AACA,QAAM+J,SAAS,GAAW,IAAID,KAAJ,CAAUlF,KAAK,CAACE,KAAN,CAAY9E,MAAtB,CAA1B;AACA,QAAMgK,OAAO,GAAGpF,KAAK,CAAC4D,KAAN,KAAgB7H,KAAhC;AACA,QAAMsJ,QAAQ,GAAGrF,KAAK,CAAC6D,MAAN,KAAiB9H,KAAlC;AACA,QAAMtC,UAAU,GAAGqL,KAAK,CAACQ,sBAAN,CAA6BP,SAA7B,EAAwCK,OAAxC,EAAiDC,QAAjD,CAAnB;AACA,QAAMnL,YAAY,GAAGV,qBAAqB,CAACC,UAAD,EAAa,CAACuG,KAAK,CAACM,IAAN,CAAWlF,MAAX,GAAkB,CAAnB,EAAsB7B,QAAtB,EAAb,CAA1C;AACA,QAAMgM,UAAU,GAAGvL,mBAAmB,CAACC,cAAD,EAAiBC,YAAjB,EAA+B8K,gBAA/B,CAAtC;AAEA,SAAK9K,YAAL,GAAoBA,YAAY,CAACX,QAAb,EAApB;AACA,SAAKgM,UAAL,GAAkBtG,cAAc,CAACK,KAAf,CAAqBiG,UAArB,CAAlB;AAEA,QAAIC,aAAa,GAAgBZ,aAAa,CAACzF,MAAD,EAASa,KAAK,CAAC/D,OAAf,CAA9C;AACA,QAAIwJ,cAAc,GAAgBb,aAAa,CAACzF,MAAD,EAASa,KAAK,CAAC/D,OAAf,CAA/C;;AAEA,QAAI8I,SAAS,KAAK9O,iBAAS,CAACyP,WAA5B,EAAyC;AACvC,OAAUpJ,cAAc,CAAC6C,MAAM,CAACD,QAAR,EAAkBc,KAAK,CAAC4D,KAAxB,CAAxB,IAAA/K,SAAS,QAA+C,OAA/C,CAAT,CAAA;AAEAoM,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAaL,aAAa,CAACzF,MAAD,EAASa,KAAK,CAAC/D,OAAf,CAA1B;;AAEA,WAAK,IAAImE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACM,IAAN,CAAWlF,MAAX,GAAoB,CAAxC,EAA2CgF,CAAC,EAA5C,EAAgD;AAC9C,YAAMC,IAAI,GAAGL,KAAK,CAACE,KAAN,CAAYE,CAAZ,CAAb;AAEA,YAAIoC,WAAW,GAAGyC,OAAO,CAAC7E,CAAD,CAAzB,CAH8C;AAK9C;;AACA,YAAIgF,OAAO,IAAIhF,CAAC,KAAK,CAArB,EAAuB;AACrB;AACA,WAAUoC,WAAW,CAAC3H,WAAZ,CAAwB,KAAK0K,UAA7B,CAAV,IAAA1M,SAAS,yBAA0D,KAAK0M,UAAL,CAAgB/F,OAAhB,EAA1D,mCAAiHgD,WAAW,CAAChD,OAAZ,EAAjH,CAAT,CAAA;AACA,cAAMmG,cAAc,GAAGnD,WAAW,CAAC1E,QAAZ,CAAqB8G,aAAa,CAAC,KAAKW,UAAN,EAAkBvF,KAAK,CAAC/D,OAAxB,CAAlC,CAAvB,CAHqB;AAKrB;;AACAuG,UAAAA,WAAW,GAAGmD,cAAd;AACAH,UAAAA,aAAa,GAAGG,cAAhB;AACD,SARD,MAQO,IAAIvF,CAAC,KAAK,CAAV,EAAY;AACjBoF,UAAAA,aAAa,GAAGhD,WAAhB;AACD;;AAhB6C,oCAiBbnC,IAAI,CAACkC,eAAL,CAAqBC,WAArB,CAjBa;AAAA,YAiBvCI,YAjBuC;AAAA,YAiBzBgD,QAjByB;AAoB9C;;;AACA,YAAIP,QAAQ,IAAIjF,CAAC,KAAKJ,KAAK,CAACM,IAAN,CAAWlF,MAAX,GAAoB,CAA1C,EAA4C;AAC1C;AACA,WAAUwH,YAAY,CAAC/H,WAAb,CAAyB,KAAK0K,UAA9B,CAAV,IAAA1M,SAAS,yBAA2D,KAAK0M,UAAL,CAAgB/F,OAAhB,EAA3D,oCAAmHoD,YAAY,CAACpD,OAAb,EAAnH,CAAT,CAAA;;AACA,cAAMmG,eAAc,GAAG/C,YAAY,CAAC9E,QAAb,CAAsB8G,aAAa,CAAC,KAAKW,UAAN,EAAkBvF,KAAK,CAAC/D,OAAxB,CAAnC,CAAvB,CAH0C;AAK1C;;;AACAgJ,UAAAA,OAAO,CAAC7E,CAAC,GAAG,CAAL,CAAP,GAAiBuF,eAAjB;AACAF,UAAAA,cAAc,GAAG7C,YAAjB;AACD,SARD,MAQO,IAAIxC,CAAC,KAAKJ,KAAK,CAACM,IAAN,CAAWlF,MAAX,GAAoB,CAA9B,EAAgC;AACrCqK,UAAAA,cAAc,GAAG7C,YAAjB;AACAqC,UAAAA,OAAO,CAAC7E,CAAC,GAAG,CAAL,CAAP,GAAiBwC,YAAjB;AACD,SAHM,MAGA;AACLqC,UAAAA,OAAO,CAAC7E,CAAC,GAAG,CAAL,CAAP,GAAiBwC,YAAjB;AACD;;AAEDuC,QAAAA,SAAS,CAAC/E,CAAD,CAAT,GAAewF,QAAf;AACD;AACF,KA3CD,MA2CO;AAGL,OAAUtJ,cAAc,CAAC6C,MAAM,CAACD,QAAR,EAAkBc,KAAK,CAAC6D,MAAxB,CAAxB,IAAAhL,SAAS,QAAgD,QAAhD,CAAT,CAAA;AACAoM,MAAAA,OAAO,CAACA,OAAO,CAAC7J,MAAR,GAAiB,CAAlB,CAAP,GAA8BwJ,aAAa,CAACzF,MAAD,EAASa,KAAK,CAAC/D,OAAf,CAA3C;;AACA,WAAK,IAAImE,EAAC,GAAGJ,KAAK,CAACM,IAAN,CAAWlF,MAAX,GAAoB,CAAjC,EAAoCgF,EAAC,GAAG,CAAxC,EAA2CA,EAAC,EAA5C,EAAgD;AAC9C,YAAIwC,aAAY,GAAGqC,OAAO,CAAC7E,EAAD,CAA1B,CAD8C;AAG9C;;AACA,YAAIiF,QAAQ,IAAIjF,EAAC,KAAKJ,KAAK,CAACM,IAAN,CAAWlF,MAAX,GAAoB,CAA1C,EAA4C;AAC1C;AACA,cAAMuK,gBAAc,GAAG/C,aAAY,CAAC7I,GAAb,CAAiB6K,aAAa,CAAC,KAAKW,UAAN,EAAkBvF,KAAK,CAAC/D,OAAxB,CAA9B,CAAvB,CAF0C;AAI1C;;;AACA2G,UAAAA,aAAY,GAAG+C,gBAAf;AACAF,UAAAA,cAAc,GAAGE,gBAAjB;AACD,SAPD,MAOO,IAAIvF,EAAC,KAAKJ,KAAK,CAACM,IAAN,CAAWlF,MAAX,GAAoB,CAA9B,EAAiC;AACtCqK,UAAAA,cAAc,GAAG7C,aAAjB;AACD;;AACD,YAAMvC,KAAI,GAAGL,KAAK,CAACE,KAAN,CAAYE,EAAC,GAAG,CAAhB,CAAb;;AAd8C,mCAedC,KAAI,CAACwC,cAAL,CAAoBD,aAApB,CAfc;AAAA,YAevCJ,YAfuC;AAAA,YAe1BoD,SAf0B;AAiB9C;;;AACA,YAAIR,OAAO,IAAIhF,EAAC,KAAK,CAArB,EAAuB;AACrB;AACA,cAAMuF,gBAAc,GAAGnD,YAAW,CAACzI,GAAZ,CAAgB6K,aAAa,CAAC,KAAKW,UAAN,EAAkBvF,KAAK,CAAC/D,OAAxB,CAA7B,CAAvB,CAFqB;AAIrB;;;AACAgJ,UAAAA,OAAO,CAAC7E,EAAC,GAAG,CAAL,CAAP,GAAiBuF,gBAAjB;AACAH,UAAAA,aAAa,GAAGhD,YAAhB;AACD,SAPD,MAOO,IAAIpC,EAAC,KAAK,CAAV,EAAY;AACjBoF,UAAAA,aAAa,GAAGhD,YAAhB;AACAyC,UAAAA,OAAO,CAAC7E,EAAC,GAAG,CAAL,CAAP,GAAiBoF,aAAjB;AACD,SAHM,MAGA;AACLP,UAAAA,OAAO,CAAC7E,EAAC,GAAG,CAAL,CAAP,GAAiBoC,YAAjB;AACD;;AACD2C,QAAAA,SAAS,CAAC/E,EAAC,GAAG,CAAL,CAAT,GAAmBwF,SAAnB;AACD;AACF;;AAED,SAAKtE,QAAL,GAAgBtB,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAeoB,QAA/B;AACA,SAAKtB,KAAL,GAAaA,KAAb;AACA,SAAK+E,SAAL,GAAiBA,SAAjB;AACA,SAAKvC,WAAL,GACEuC,SAAS,KAAK9O,iBAAS,CAACyP,WAAxB,GACIvG,MADJ,GAEIa,KAAK,CAAC4D,KAAN,KAAgB7H,KAAhB,GACEkD,cAAc,CAACK,KAAf,CAAqB2F,OAAO,CAAC,CAAD,CAAP,CAAW1F,GAAhC,CADF,GAEE0F,OAAO,CAAC,CAAD,CALf;AAMA,SAAKrC,YAAL,GACEmC,SAAS,KAAK9O,iBAAS,CAAC4P,YAAxB,GACI1G,MADJ,GAEIa,KAAK,CAAC6D,MAAN,KAAiB9H,KAAjB,GACEkD,cAAc,CAACK,KAAf,CAAqB2F,OAAO,CAACA,OAAO,CAAC7J,MAAR,GAAiB,CAAlB,CAAP,CAA4BmE,GAAjD,CADF,GAEE0F,OAAO,CAACA,OAAO,CAAC7J,MAAR,GAAiB,CAAlB,CALf;AAMA,SAAK0K,cAAL,GAAsB,IAAInG,KAAJ,CACpB6F,aAAa,CAACtG,QADM,EAEpBuG,cAAc,CAACvG,QAFK,EAGpBsG,aAAa,CAACjG,GAHM,EAIpBkG,cAAc,CAAClG,GAJK,CAAtB;AAMA,SAAKwG,YAAL,GAAoBpG,KAAK,CAACI,SAAN,CAAgB,IAAI4D,KAAJ,CAAUwB,SAAV,EAAqBnF,KAAK,CAAC4D,KAA3B,CAAhB,CAApB;AACA,SAAKe,WAAL,GAAmBR,kBAAkB,CAACnE,KAAK,CAACgE,QAAP,EAAiBwB,aAAjB,EAAgCC,cAAhC,CAArC;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AA3JD;;;;;;;AA3CF,QAgDgBO,OAhDhB,GAgDS,iBAAehG,KAAf,EAA6BiG,QAA7B,EAAuDhM,cAAvD,EAAkF+K,gBAAlF;AACL,WAAO,IAAIF,KAAJ,CAAU9E,KAAV,EAAiBiG,QAAjB,EAA2BhQ,iBAAS,CAACyP,WAArC,EAAkDzL,cAAlD,EAAkE+K,gBAAlE,CAAP;AACD;AAED;;;;;AApDF;;AAAA,QAyDgBkB,QAzDhB,GAyDS,kBAAgBlG,KAAhB,EAA8BmG,SAA9B,EAAyDlM,cAAzD,EAAoF+K,gBAApF;AACL,WAAO,IAAIF,KAAJ,CAAU9E,KAAV,EAAiBmG,SAAjB,EAA4BlQ,iBAAS,CAAC4P,YAAtC,EAAoD5L,cAApD,EAAoE+K,gBAApE,CAAP;AACD;AA6ID;;;;AAxMF;;AAAA;;AAAA,SA4MSoB,gBA5MT,GA4MS,0BAAiBC,iBAAjB;AACL,KAAU,CAACA,iBAAiB,CAACvL,QAAlB,CAA2BlE,IAA3B,CAAX,IAAAiC,SAAS,QAAoC,oBAApC,CAAT,CAAA;;AACA,QAAI,KAAKkM,SAAL,KAAmB9O,iBAAS,CAAC4P,YAAjC,EAA+C;AAC7C,aAAO,KAAKjD,YAAZ;AACD,KAFD,MAEO;AACL,UAAM0D,yBAAyB,GAAG,IAAI5I,QAAJ,CAAa7G,GAAb,EAC/BkD,GAD+B,CAC3BsM,iBAD2B,EAE/B1I,MAF+B,GAG/B7D,QAH+B,CAGtB,KAAK8I,YAAL,CAAkBrD,GAHI,EAGCd,QAHnC;AAIA,aAAO,KAAKmE,YAAL,YAA6BnD,WAA7B,GACH,IAAIA,WAAJ,CAAgB,KAAKmD,YAAL,CAAkBlD,KAAlC,EAAyC4G,yBAAzC,CADG,GAEHrH,cAAc,CAACK,KAAf,CAAqBgH,yBAArB,CAFJ;AAGD;AACF;AAED;;;;AA3NF;;AAAA,SA+NSC,eA/NT,GA+NS,yBAAgBF,iBAAhB;AACL,KAAU,CAACA,iBAAiB,CAACvL,QAAlB,CAA2BlE,IAA3B,CAAX,IAAAiC,SAAS,QAAoC,oBAApC,CAAT,CAAA;;AACA,QAAI,KAAKkM,SAAL,KAAmB9O,iBAAS,CAACyP,WAAjC,EAA8C;AAC5C,aAAO,KAAKlD,WAAZ;AACD,KAFD,MAEO;AACL,UAAMgE,wBAAwB,GAAG,IAAI9I,QAAJ,CAAa7G,GAAb,EAAkBkD,GAAlB,CAAsBsM,iBAAtB,EAAyCvM,QAAzC,CAAkD,KAAK0I,WAAL,CAAiBjD,GAAnE,EAAwEd,QAAzG;AACA,aAAO,KAAK+D,WAAL,YAA4B/C,WAA5B,GACH,IAAIA,WAAJ,CAAgB,KAAK+C,WAAL,CAAiB9C,KAAjC,EAAwC8G,wBAAxC,CADG,GAEHvH,cAAc,CAACK,KAAf,CAAqBkH,wBAArB,CAFJ;AAGD;AACF;AAED;;;;;;;;;;;;;;;;;AA3OF;;AAAA,QA4PgBC,gBA5PhB,GA4PS,0BACLvG,KADK,EAELwG,gBAFK,EAGLC,WAHK,EAIL1M,cAJK,EAKL+K,gBALK;AAQL4B,EAAAA,YARK,EASLC,gBATK,EAULC,UAVK;kCAMkD;kCAArDC;QAAAA,gDAAgB;4BAAGC;QAAAA,oCAAU;;QAE/BJ;AAAAA,MAAAA,eAAuB;;;QACvBC;AAAAA,MAAAA,mBAAmCH;;;QACnCI;AAAAA,MAAAA,aAAsB;;;AAEtB,MAAU5G,KAAK,CAAC9E,MAAN,GAAe,CAAzB,KAAAvC,SAAS,QAAmB,OAAnB,CAAT,CAAA;AACA,MAAUmO,OAAO,GAAG,CAApB,KAAAnO,SAAS,QAAc,UAAd,CAAT,CAAA;AACA,MAAUgO,gBAAgB,KAAKH,gBAArB,IAAyCE,YAAY,CAACxL,MAAb,GAAsB,CAAzE,KAAAvC,SAAS,QAAmE,mBAAnE,CAAT,CAAA;AACA,QAAMoD,OAAO,GACXyK,gBAAgB,YAAYjH,WAA5B,GACIiH,gBAAgB,CAAChH,KAAjB,CAAuBzD,OAD3B,GAEI0K,WAAW,YAAY3K,KAAvB,GACE2K,WAAW,CAAC1K,OADd,GAEE4F,SALR;AAMA,MAAU5F,OAAO,KAAK4F,SAAtB,KAAAhJ,SAAS,QAAwB,UAAxB,CAAT,CAAA;AACA,QAAMkM,SAAS,GAAG9O,iBAAS,CAACyP,WAA5B;AACA,QAAMO,QAAQ,GAAGrB,aAAa,CAAC8B,gBAAD,EAAmBzK,OAAnB,CAA9B;AACA,QAAMgL,QAAQ,GAAGpC,eAAe,CAAC8B,WAAD,EAAc1K,OAAd,CAAhC;;AAEA,SAAK,IAAImE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAAC9E,MAA1B,EAAkCgF,CAAC,EAAnC,EAAuC;AACrC,UAAMC,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAlB,CADqC;;AAGrC,UAAI,CAACC,IAAI,CAACE,MAAL,CAAYrE,MAAZ,CAAmB+J,QAAQ,CAACvG,KAA5B,CAAD,IAAuC,CAACW,IAAI,CAAC6B,MAAL,CAAYhG,MAAZ,CAAmB+J,QAAQ,CAACvG,KAA5B,CAA5C,EAAgF;AAChF,UAAIW,IAAI,CAACG,QAAL,CAAczC,OAAd,CAAsBnH,IAAtB,KAA+ByJ,IAAI,CAACI,QAAL,CAAc1C,OAAd,CAAsBnH,IAAtB,CAAnC,EAAgE;AAEhE,UAAIuP,SAAsB,SAA1B;;AACA,UAAI;AACF;;AADE,qCACa9F,IAAI,CAACkC,eAAL,CAAqB0D,QAArB,CADb;;AACAE,QAAAA,SADA;AAEH,OAFD,CAEE,OAAO/M,KAAP,EAAc;AACd;AACA,YAAIA,KAAK,CAAC8N,8BAAV,EAA0C;AACxC;AACD;;AACD,cAAM9N,KAAN;AACD,OAfoC;;;AAiBrC,UAAI+M,SAAS,CAACzG,KAAV,CAAgBxD,MAAhB,CAAuB+K,QAAvB,CAAJ,EAAsC;AACpCjM,QAAAA,YAAY,CACV8L,UADU,EAEV,IAAIhC,KAAJ,CACE,IAAInB,KAAJ,WAAciD,YAAd,GAA4BvG,IAA5B,IAAmCwG,gBAAgB,CAAC3H,QAApD,EAA8DyH,WAA9D,CADF,EAEEE,gBAFF,EAGE9B,SAHF,EAIE9K,cAJF,EAKE+K,gBALF,CAFU,EASV+B,aATU,EAUVtC,eAVU,CAAZ;AAYD,OAbD,MAaO,IAAIuC,OAAO,GAAG,CAAV,IAAe9G,KAAK,CAAC9E,MAAN,GAAe,CAAlC,EAAqC;AAC1C,YAAM+L,sBAAsB,GAAGjH,KAAK,CAACQ,KAAN,CAAY,CAAZ,EAAeN,CAAf,EAAkBgH,MAAlB,CAAyBlH,KAAK,CAACQ,KAAN,CAAYN,CAAC,GAAG,CAAhB,EAAmBF,KAAK,CAAC9E,MAAzB,CAAzB,CAA/B,CAD0C;;AAI1C0J,QAAAA,KAAK,CAAC2B,gBAAN,CACEU,sBADF,EAEEhB,SAFF,EAGEQ,WAHF,EAIE1M,cAJF,EAKE+K,gBALF,EAME;AACE+B,UAAAA,aAAa,EAAbA,aADF;AAEEC,UAAAA,OAAO,EAAEA,OAAO,GAAG;AAFrB,SANF,YAUMJ,YAVN,GAUoBvG,IAVpB,IAWEwG,gBAXF,EAYEC,UAZF;AAcD;AACF;;AAED,WAAOA,UAAP;AACD;AAED;;;;;;;;;;;;;;;;;;AA5UF;;AAAA,QA8VgBO,iBA9VhB,GA8VS,2BACLnH,KADK,EAELoH,UAFK,EAGLC,iBAHK,EAILtN,cAJK,EAKL+K,gBALK;AAQL4B,EAAAA,YARK,EASLY,iBATK,EAULV,UAVK;oCAMkD;oCAArDC;QAAAA,iDAAgB;8BAAGC;QAAAA,qCAAU;;QAE/BJ;AAAAA,MAAAA,eAAuB;;;QACvBY;AAAAA,MAAAA,oBAAoCD;;;QACpCT;AAAAA,MAAAA,aAAsB;;;AAEtB,MAAU5G,KAAK,CAAC9E,MAAN,GAAe,CAAzB,KAAAvC,SAAS,QAAmB,OAAnB,CAAT,CAAA;AACA,MAAUmO,OAAO,GAAG,CAApB,KAAAnO,SAAS,QAAc,UAAd,CAAT,CAAA;AACA,MAAU2O,iBAAiB,KAAKD,iBAAtB,IAA2CX,YAAY,CAACxL,MAAb,GAAsB,CAA3E,KAAAvC,SAAS,QAAqE,mBAArE,CAAT,CAAA;AACA,QAAMoD,OAAO,GACXsL,iBAAiB,YAAY9H,WAA7B,GACI8H,iBAAiB,CAAC7H,KAAlB,CAAwBzD,OAD5B,GAEIqL,UAAU,YAAYtL,KAAtB,GACEsL,UAAU,CAACrL,OADb,GAEE4F,SALR;AAMA,MAAU5F,OAAO,KAAK4F,SAAtB,KAAAhJ,SAAS,QAAwB,UAAxB,CAAT,CAAA;AAEA,QAAMsN,SAAS,GAAGvB,aAAa,CAAC2C,iBAAD,EAAoBtL,OAApB,CAA/B;AACA,QAAMwL,OAAO,GAAG5C,eAAe,CAACyC,UAAD,EAAarL,OAAb,CAA/B;;AACA,SAAK,IAAImE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAAC9E,MAA1B,EAAkCgF,CAAC,EAAnC,EAAuC;AACrC,UAAMC,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAlB,CADqC;;AAGrC,UAAI,CAACC,IAAI,CAACE,MAAL,CAAYrE,MAAZ,CAAmBiK,SAAS,CAACzG,KAA7B,CAAD,IAAwC,CAACW,IAAI,CAAC6B,MAAL,CAAYhG,MAAZ,CAAmBiK,SAAS,CAACzG,KAA7B,CAA7C,EAAkF;AAClF,UAAIW,IAAI,CAACG,QAAL,CAAczC,OAAd,CAAsBnH,IAAtB,KAA+ByJ,IAAI,CAACI,QAAL,CAAc1C,OAAd,CAAsBnH,IAAtB,CAAnC,EAAgE;AAEhE,UAAIqP,QAAqB,SAAzB;;AACA,UAAI;AACF;;AADE,oCACY5F,IAAI,CAACwC,cAAL,CAAoBsD,SAApB,CADZ;;AACAF,QAAAA,QADA;AAEH,OAFD,CAEE,OAAO7M,KAAP,EAAc;AACd;AACA,YAAIA,KAAK,CAACsO,2BAAV,EAAuC;AACrC;AACD;;AACD,cAAMtO,KAAN;AACD,OAfoC;;;AAiBrC,UAAI6M,QAAQ,CAACvG,KAAT,CAAexD,MAAf,CAAsBuL,OAAtB,CAAJ,EAAoC;AAClCzM,QAAAA,YAAY,CACV8L,UADU,EAEV,IAAIhC,KAAJ,CACE,IAAInB,KAAJ,EAAWtD,IAAX,SAAoBuG,YAApB,GAAmCU,UAAnC,EAA+CE,iBAAiB,CAACtI,QAAjE,CADF,EAEEsI,iBAFF,EAGEvR,iBAAS,CAAC4P,YAHZ,EAIE5L,cAJF,EAKE+K,gBALF,CAFU,EASV+B,aATU,EAUVtC,eAVU,CAAZ;AAYD,OAbD,MAaO,IAAIuC,OAAO,GAAG,CAAV,IAAe9G,KAAK,CAAC9E,MAAN,GAAe,CAAlC,EAAqC;AAC1C,YAAM+L,sBAAsB,GAAGjH,KAAK,CAACQ,KAAN,CAAY,CAAZ,EAAeN,CAAf,EAAkBgH,MAAlB,CAAyBlH,KAAK,CAACQ,KAAN,CAAYN,CAAC,GAAG,CAAhB,EAAmBF,KAAK,CAAC9E,MAAzB,CAAzB,CAA/B,CAD0C;;AAI1C0J,QAAAA,KAAK,CAACuC,iBAAN,CACEF,sBADF,EAEEG,UAFF,EAGErB,QAHF,EAIEhM,cAJF,EAKE+K,gBALF,EAME;AACE+B,UAAAA,aAAa,EAAbA,aADF;AAEEC,UAAAA,OAAO,EAAEA,OAAO,GAAG;AAFrB,SANF,GAUG3G,IAVH,SAUYuG,YAVZ,GAWEY,iBAXF,EAYEV,UAZF;AAcD;AACF;;AAED,WAAOA,UAAP;AACD;AAED;;;;;;;;AA7aF;;AAAA,QAqbgBxB,sBArbhB,GAqbS,gCACLP,SADK,EAELK,OAFK,EAGLC,QAHK,EAILsC,gBAJK;AAML,QAAIlO,UAAJ;;AACA,YAAQsL,SAAR;AACE,WAAK9O,iBAAS,CAACyP,WAAf;AACE,YAAIN,OAAJ,EAAa;AACX3L,UAAAA,UAAU,GAAG,uBAAb;AACD,SAFD,MAEO,IAAI4L,QAAJ,EAAc;AACnB5L,UAAAA,UAAU,GAAG,uBAAb;AACD,SAFM,MAEA;AACLA,UAAAA,UAAU,GAAG,0BAAb;AACD;;AACD;;AACF,WAAKxD,iBAAS,CAAC4P,YAAf;AACE,SAAU,CAAC8B,gBAAX,IAAA9O,SAAS,QAAoB,eAApB,CAAT,CAAA;;AACA,YAAIuM,OAAJ,EAAa;AACX3L,UAAAA,UAAU,GAAG,uBAAb;AACD,SAFD,MAEO,IAAI4L,QAAJ,EAAc;AACnB5L,UAAAA,UAAU,GAAG,uBAAb;AACD,SAFM,MAEA;AACLA,UAAAA,UAAU,GAAG,0BAAb;AACD;;AACD;AAnBJ;;AAqBA,WAAOA,UAAP;AACD;AAED;;;;;;;;;AApdF;;AAAA,QA6diBmO,uBA7djB,GA6dU,iCACN1H,KADM,EAENoH,UAFM,EAGNX,WAHM,EAIN1M,cAJM,EAKN+K,gBALM,EAMN6C,cANM;;;oCAO8B;8BAAlCb;QAAAA,qCAAU;;AAEZ,QAAM5B,OAAO,GAAGkC,UAAU,KAAKvL,KAA/B;AACA,QAAMsJ,QAAQ,GAAGsB,WAAW,KAAK5K,KAAjC;AAEA,QAAI,CAACqJ,OAAD,IAAY,CAACC,QAAjB,EAA2B,OAAO,IAAP;AAE3B,QAAMyC,UAAU,GAAGtO,qBAAqB,CAACsL,KAAK,CAACQ,sBAAN,CAA6BrP,iBAAS,CAACyP,WAAvC,EAAoDN,OAApD,EAA6DC,QAA7D,CAAD,EAAyE2B,OAAO,CAACzN,QAAR,EAAzE,CAAxC;AACA,QAAMwO,WAAW,GAAGvO,qBAAqB,CAACsL,KAAK,CAACQ,sBAAN,CAA6BrP,iBAAS,CAAC4P,YAAvC,EAAqDT,OAArD,EAA8DC,QAA9D,CAAD,EAA0E2B,OAAO,CAACzN,QAAR,EAA1E,CAAzC;AAEA,QAAMyO,YAAY,GAAG3N,eAAe,CAACL,mBAAmB,CAACC,cAAD,EAAiB6N,UAAjB,EAA6B9C,gBAA7B,CAApB,EAAoE6C,cAApE,CAApC;AACA,QAAMI,aAAa,GAAG5N,eAAe,CAACL,mBAAmB,CAACC,cAAD,EAAiB8N,WAAjB,EAA8B/C,gBAA9B,CAApB,EAAqE6C,cAArE,CAArC;AAEA,QAAM5L,OAAO,GAAyBqL,UAAoB,CAACrL,OAArB,IAAiC0K,WAAqB,CAAC1K,OAAvD,IAAkE4F,SAAxG;AACA,KAAU5F,OAAV,IAAApD,SAAS,QAAU,yBAAV,CAAT,CAAA;AACA,QAAIqP,WAAW,GAAgBtD,aAAa,CAAC3F,cAAc,CAACK,KAAf,CAAqB0I,YAArB,CAAD,EAAqC/L,OAArC,CAA5C;;AACA,QAAImJ,OAAJ,EAAY;AACV8C,MAAAA,WAAW,GAAGtD,aAAa,CAAC3F,cAAc,CAACK,KAAf,CAAqB2I,aAArB,CAAD,EAAsChM,OAAtC,CAA3B;AACD;;AAED,QAAIkM,gBAAJ;AACA,QAAIC,iBAAJ;;AAEA,SAAK,IAAIhI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAAC9E,MAA1B,EAAkCgF,CAAC,EAAnC,EAAsC;AACpC,UAAMC,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAlB,CADoC;;AAGpC,UAAI,CAACC,IAAI,CAACE,MAAL,CAAYrE,MAAZ,CAAmBgM,WAAW,CAACxI,KAA/B,CAAD,IAA0C,CAACW,IAAI,CAAC6B,MAAL,CAAYhG,MAAZ,CAAmBgM,WAAW,CAACxI,KAA/B,CAA/C,EAAsF;AACtF,UAAIW,IAAI,CAACG,QAAL,CAAczC,OAAd,CAAsBnH,IAAtB,KAA+ByJ,IAAI,CAACI,QAAL,CAAc1C,OAAd,CAAsBnH,IAAtB,CAAnC,EAAgE;;AAEhE,UAAI;AACF,YAAIwO,OAAJ,EAAY;AACV+C,UAAAA,gBAAgB,GAAGlJ,cAAc,CAACK,KAAf,CAAqB0I,YAArB,CAAnB;;AADU,sCAEa3H,IAAI,CAACwC,cAAL,CAAoBqF,WAApB,CAFb;;AAERE,UAAAA,iBAFQ;AAGX,SAHD,MAGO,IAAI/C,QAAJ,EAAc;AACnB+C,UAAAA,iBAAiB,GAAGnJ,cAAc,CAACK,KAAf,CAAqB2I,aAArB,CAApB;;AADmB,sCAEG5H,IAAI,CAACwC,cAAL,CAAoBqF,WAApB,CAFH;;AAEjBC,UAAAA,gBAFiB;AAGpB;AACF,OARD,CAQE,OAAO/O,KAAP,EAAc;AACd;AACA,YAAIA,KAAK,CAAC8N,8BAAV,EAA0C;AACxC;AACD;;AACD,cAAM9N,KAAN;AACD;AACF;;AAED,QAAI,CAAC+O,gBAAD,IAAqB,CAACC,iBAA1B,EAA6C,OAAO,IAAP;AAE7C,6BACGnS,iBAAS,CAACyP,WADb,IAC2ByC,gBAD3B,QAEGlS,iBAAS,CAAC4P,YAFb,IAE4BuC,iBAF5B;AAKD,GAzhBH;;AAAA;AAAA;;ACzCA,SAASC,KAAT,CAAerH,cAAf;AACE,gBAAYA,cAAc,CAACzB,GAAf,CAAmBhG,QAAnB,CAA4B,EAA5B,CAAZ;AACD;;AAED,IAAM+O,QAAQ,GAAG,KAAjB;AAEA;;;;AAGA,IAAsBC,MAAtB;AACE;;;AAGA;AACA;;;;;;;AALF,SAUgBC,kBAVhB,GAUS,4BAA0BC,KAA1B,EAAwCC,OAAxC;AACL,QAAMtD,OAAO,GAAGqD,KAAK,CAACjG,WAAN,CAAkBtD,QAAlB,KAA+BnD,KAA/C;AACA,QAAMsJ,QAAQ,GAAGoD,KAAK,CAAC7F,YAAN,CAAmB1D,QAAnB,KAAgCnD,KAAjD;;AAEA,KAAU,EAAEqJ,OAAO,IAAIC,QAAb,CAAV,IAAAxM,SAAS,QAAyB,cAAzB,CAAT,CAAA;AACA,MAAU,EAAE,SAAS6P,OAAX,KAAuBA,OAAO,CAACC,GAAR,GAAc,CAA/C,KAAA9P,SAAS,QAAyC,KAAzC,CAAT,CAAA;AAEA,QAAM+P,EAAE,GAAW7P,uBAAuB,CAAC2P,OAAO,CAACG,SAAT,CAA1C;AACA,QAAM5C,QAAQ,GAAWoC,KAAK,CAACI,KAAK,CAAClC,eAAN,CAAsBmC,OAAO,CAACI,eAA9B,CAAD,CAA9B;AACA,QAAM3C,SAAS,GAAWkC,KAAK,CAACI,KAAK,CAACrC,gBAAN,CAAuBsC,OAAO,CAACI,eAA/B,CAAD,CAA/B;AACA,QAAMvD,UAAU,GAAW8C,KAAK,CAACI,KAAK,CAAClD,UAAP,CAAhC;AACA,QAAMjF,IAAI,GAAamI,KAAK,CAACzI,KAAN,CAAYM,IAAZ,CAAiByI,GAAjB,CAAqB,UAAArJ,KAAK;AAAA,aAAIA,KAAK,CAAC1G,OAAV;AAAA,KAA1B,CAAvB;AACA,QAAMgQ,QAAQ,GACZ,SAASN,OAAT,UACS,CAACO,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,IAA0CV,OAAO,CAACC,GAAnD,EAAwDpP,QAAxD,CAAiE,EAAjE,CADT,UAESmP,OAAO,CAACM,QAAR,CAAiBzP,QAAjB,CAA0B,EAA1B,CAHX;AAKA,QAAMoO,gBAAgB,GAAG0B,OAAO,CAACX,OAAO,CAACY,aAAT,CAAhC;AACA,QAAMC,aAAa,GAAGhT,cAAc,CAACkS,KAAK,CAACnH,QAAP,CAApC;AACA,QAAMkI,QAAQ,GAAa;AACzBvG,MAAAA,OAAO,EAAEgD,QADgB;AAEzB/C,MAAAA,OAAO,EAAEiD,SAFgB;AAGzB7F,MAAAA,IAAI,EAAJA,IAHyB;AAIzBsI,MAAAA,EAAE,EAAFA,EAJyB;AAKzBI,MAAAA,QAAQ,EAARA;AALyB,KAA3B;AAOA,QAAItQ,KAAJ;AACA,QAAMe,UAAU,GAAGqL,KAAK,CAACQ,sBAAN,CAA6BmD,KAAK,CAAC1D,SAAnC,EAA8CK,OAA9C,EAAuDC,QAAvD,EAAiEsC,gBAAjE,CAAnB;;AAEA,YAAQlO,UAAR;AACE,WAAK,uBAAL;AACE+P,QAAAA,QAAQ,CAACvG,OAAT,GAAmBgD,QAAnB;AACAuD,QAAAA,QAAQ,CAACtG,OAAT,GAAmBiD,SAAnB;AACAzN,QAAAA,KAAK,GAAGuN,QAAR;AACA;;AACF,WAAK,uBAAL;AACEuD,QAAAA,QAAQ,CAACvG,OAAT,GAAmBgD,QAAnB;AACAuD,QAAAA,QAAQ,CAACtG,OAAT,GAAmBiD,SAAnB;AACAzN,QAAAA,KAAK,GAAG4P,QAAR;AACA;;AACF,WAAK,0BAAL;AACEkB,QAAAA,QAAQ,CAACvG,OAAT,GAAmBgD,QAAnB;AACAuD,QAAAA,QAAQ,CAACtG,OAAT,GAAmBiD,SAAnB;AACAzN,QAAAA,KAAK,GAAG4P,QAAR;AACA;;AACF,WAAK,uBAAL;AACE,SAAU,CAACX,gBAAX,IAAA9O,SAAS,QAAoB,eAApB,CAAT,CAAA;AACA2Q,QAAAA,QAAQ,CAACvG,OAAT,GAAmBgD,QAAnB;AACAuD,QAAAA,QAAQ,CAACtG,OAAT,GAAmBiD,SAAnB;AACAzN,QAAAA,KAAK,GAAGuN,QAAR;AACA;;AACF,WAAK,uBAAL;AACE,SAAU,CAAC0B,gBAAX,IAAA9O,SAAS,QAAoB,eAApB,CAAT,CAAA;AACA2Q,QAAAA,QAAQ,CAACvG,OAAT,GAAmBkD,SAAnB;AACAqD,QAAAA,QAAQ,CAACtG,OAAT,GAAmB+C,QAAnB;AACAvN,QAAAA,KAAK,GAAG6M,UAAR;AACA;;AACF,WAAK,0BAAL;AACE,SAAU,CAACoC,gBAAX,IAAA9O,SAAS,QAAoB,eAApB,CAAT,CAAA;AACA2Q,QAAAA,QAAQ,CAACvG,OAAT,GAAmBkD,SAAnB;AACAqD,QAAAA,QAAQ,CAACtG,OAAT,GAAmB+C,QAAnB;AACAvN,QAAAA,KAAK,GAAG6M,UAAR;AACA;;AACF;AACE;AACA7M,QAAAA,KAAK,GAAG,EAAR;AApCJ;;AAsCA,QAAM+Q,WAAW,GAAgB,CAACD,QAAQ,CAACvG,OAAV,EAAmBuG,QAAQ,CAACtG,OAA5B,EAAqCsG,QAAQ,CAAClJ,IAA9C,EAAoDkJ,QAAQ,CAACZ,EAA7D,EAAiEY,QAAQ,CAACR,QAA1E,CAAjC;AACA,QAAMU,IAAI,GAAkC,CAACD,WAAD,EAAcF,aAAd,EAA6BhE,UAA7B,CAA5C;AAEA,MAAW9L,UAAU,IAAIiQ,IAAd,IAAsBhR,KAAjC,KAAAG,SAAS,QAAgC,qBAAhC,CAAT,CAAA;AACA,WAAO;AACLY,MAAAA,UAAU,EAAVA,UADK;AAELiQ,MAAAA,IAAI,EAAJA,IAFK;AAGLhR,MAAAA,KAAK,EAALA;AAHK,KAAP;AAKD,GAtFH;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA,IAAIiR,oBAAoB,sDACrB5T,eAAO,CAAC2G,OADa,IACH;AACjB,gDAA8C,CAD7B;;AAAA,CADG,wBAAxB;AAMA;;;;AAGA,IAAsBkN,OAAtB;AACE;;;AAGA;AAEA;;;;;;;;;;AANF,UAcsBC,cAdtB,2BAeI5N,OAfJ,EAgBIjD,OAhBJ,EAiBI8Q,QAjBJ,EAkBIhO,MAlBJ,EAmBI3D,IAnBJ;AAAA;;;mCAqBU4R;AAaN,eAAO,IAAI/N,KAAJ,CAAUC,OAAV,EAAmBjD,OAAnB,EAA4B+Q,cAA5B,EAA4CjO,MAA5C,EAAoD3D,IAApD,CAAP;;;UAjBA2R,wBAAAA,WAAWE,4BAAkB,CAACC,mBAAU,CAAChO,OAAD,CAAX;;mBAK3B,kCAAO0N,oBAAP,qFAAO,uBAAuB1N,OAAvB,CAAP,2DAAO,uBAAkCjD,OAAlC,CAAP,MAAsD;;6CAClD2Q,oBAAoB,CAAC1N,OAAD,CAApB,CAA8BjD,OAA9B,qBACM,IAAIkR,kBAAJ,CAAalR,OAAb,EAAsBmR,KAAtB,EAA6BL,QAA7B,EAAuCjO,QAAvC,GAAkDuO,IAAlD,CAAuD,UAACvO,QAAD;;;AAC3D8N,QAAAA,oBAAoB,gBACfA,oBADe,6BAEjB1N,OAFiB,2CAGb0N,oBAHa,2DAGb,uBAAuB1N,OAAvB,CAHa,6BAIfjD,OAJe,IAIL6C,QAJK,0BAApB;AAOA,eAAOA,QAAP;AACD,OATK;AAWb,KAnCH;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;"}