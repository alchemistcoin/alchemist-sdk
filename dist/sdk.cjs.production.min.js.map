{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÃ–RLI = 5,\n  KOVAN = 42,\n  HARDHAT = 1337\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport const GAS_ESTIMATES: {[ methodName: string ]: BigintIsh} = {\n  swapETHForExactTokens: '174552',\n  swapExactETHForTokens: '161308',\n  swapExactTokensForETH: '146035',\n  swapExactTokensForTokens: '143216',\n  swapTokensForExactETH: '189218',\n  swapTokensForExactTokens: '185118'\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\n// import warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA, GAS_ESTIMATES } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    // this needs to be uncommented before prod MVP\n    // warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\nexport function estimatedGasForMethod(methodName: string = 'swapTokensForExactETH', numHops: BigintIsh = '1'): JSBI {\n  const gasBeforeHopFactor: BigintIsh = parseBigintIsh(GAS_ESTIMATES[methodName])\n  const factor = parseBigintIsh('0') // TODO: change this\n  const additionalGas = JSBI.multiply(parseBigintIsh(numHops),factor)\n  return JSBI.add(gasBeforeHopFactor,additionalGas)\n}\n\nexport function calculateMinerBribe(gasPriceToBeat: BigintIsh, estimatedGas: BigintIsh, margin: BigintIsh): JSBI {\n  gasPriceToBeat = parseBigintIsh(gasPriceToBeat)\n  estimatedGas = parseBigintIsh(estimatedGas)\n  const gasPriceToBeatWithMargin = calculateMargin(gasPriceToBeat, margin)\n  return JSBI.multiply(gasPriceToBeatWithMargin, estimatedGas)\n}\n\n// add x%\nexport function calculateMargin(value: BigintIsh, margin: BigintIsh): JSBI {\n  value = parseBigintIsh(value)\n  margin = JSBI.multiply(parseBigintIsh(margin), parseBigintIsh('100'))\n  const numerator = JSBI.multiply(value, JSBI.add(parseBigintIsh('10000'), margin))\n  const denominator = parseBigintIsh('10000')\n  return JSBI.divide(numerator,denominator)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.HARDHAT]: new Token(\n    ChainId.HARDHAT,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { BigintIsh, ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert, calculateMinerBribe, estimatedGasForMethod } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  \n  /**\n   * The bribe amount needed to execute the trade\n   */\n  public readonly minerBribe: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount,gasPriceToBeat: BigintIsh, minerBribeMargin: BigintIsh): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT, gasPriceToBeat, minerBribeMargin)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount, gasPriceToBeat: BigintIsh, minerBribeMargin: BigintIsh): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT, gasPriceToBeat, minerBribeMargin)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType, gasPriceToBeat: BigintIsh, minerBribeMargin: BigintIsh) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    const etherIn = route.input === ETHER\n    const etherOut = route.output === ETHER\n    const methodName = Trade.methodNameForTradeType(tradeType, etherIn, etherOut)\n    const estimatedGas = estimatedGasForMethod(methodName, (route.path.length-1).toString())\n    const minerBribe = calculateMinerBribe(gasPriceToBeat, estimatedGas, minerBribeMargin)\n    \n    this.minerBribe = CurrencyAmount.ether(minerBribe)\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n\n      amounts[0] = wrappedAmount(amount, route.chainId)\n\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        let iAmount = amounts[i]\n        // if the input is ETH, calculate the output amount with the\n        // the input reduced by the minerBribe\n        if (etherIn && i === 0){\n          const modifiedAmount = iAmount.subtract(wrappedAmount(this.minerBribe, route.chainId))\n          console.log('original amount in', iAmount.toExact())\n          console.log('modified amount in', modifiedAmount.toExact())\n          iAmount = modifiedAmount\n        }\n        const [outputAmount, nextPair] = pair.getOutputAmount(iAmount)\n\n        // if the output is ETH, reduce the output amount\n        // by the miner bribe\n        if (etherOut && i === route.path.length - 2){\n          const modifiedAmount = outputAmount.subtract(wrappedAmount(this.minerBribe, route.chainId))\n          console.log('original amount out', outputAmount.toExact())\n          console.log('modified amount out', modifiedAmount.toExact())\n          amounts[i + 1] = modifiedAmount\n        } else {\n          amounts[i + 1] = outputAmount\n        }\n        nextPairs[i] = nextPair\n      }\n    } else {\n      \n\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        let iAmount = amounts[i]\n        // if the output is ETH, calculate the input amount with the\n        // the output increased by the minerBribe\n        if (etherOut && i === route.path.length - 1){\n          const modifiedAmount = iAmount.add(wrappedAmount(this.minerBribe, route.chainId))\n          console.log('original amount out', iAmount.toExact())\n          console.log('modified amount out', modifiedAmount.toExact())\n          iAmount = modifiedAmount\n        }\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(iAmount)\n        // if the input is ETH, increase the input amount\n        // by the miner bribe\n        if (etherIn && i === 1){\n          const modifiedAmount = inputAmount.add(wrappedAmount(this.minerBribe, route.chainId))\n          console.log('original amount in', inputAmount.toExact())\n          console.log('modified amount in', modifiedAmount.toExact())\n          amounts[i - 1] = modifiedAmount\n        } else {\n          amounts[i - 1] = inputAmount\n        }\n        nextPairs[i - 1] = nextPair\n      }\n    }\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    \n    console.log('******************')\n    console.log('*** TRADE START **')\n    console.log('******************')\n    console.log('inputAmount', this.inputAmount.toSignificant(6))\n    console.log('outputAmount', this.outputAmount.toSignificant(6))\n    console.log('executionPrice', this.executionPrice.toSignificant(6))\n    console.log('nextMidPrice', this.nextMidPrice.toSignificant(6))\n    console.log('priceImpact', this.priceImpact.toSignificant(6))\n    console.log('******************')\n    console.log('*** TRADE END **')\n    console.log('******************')\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @param gasPriceToBeat used to calculate the miner bribe\n   * @param minerBribeMargin used as the margin for the miner bribe calculation\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = [],\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    const tradeType = TradeType.EXACT_INPUT\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            tradeType,\n            gasPriceToBeat,\n            minerBribeMargin\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          gasPriceToBeat,\n          minerBribeMargin,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades,\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @param gasPriceToBeat used to calculate the miner bribe\n   * @param minerBribeMargin used as the margin for the miner bribe calculation\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = [],\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT,\n            gasPriceToBeat,\n            minerBribeMargin\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          gasPriceToBeat,\n          minerBribeMargin,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades,\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * return the mistX router method name for the trade\n   * @param tradeType the type of trade, TradeType\n   * @param etherIn the input currency is ether\n   * @param etherOut the output currency is ether\n   * @param useFeeOnTransfer Whether any of the tokens in the path are fee on transfer tokens, TradeOptions.feeOnTransfer\n   * @param enforceUseFeeOnTransfer use to throw an invariant if there is no useFeeOnTransfer option for TradeType.EXACT_OUTPUT trades\n   */\n  public static methodNameForTradeType(\n    tradeType: TradeType,\n    etherIn: boolean,\n    etherOut: boolean,\n    useFeeOnTransfer?: boolean,\n  ): string {\n    let methodName: string;\n    switch (tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = 'swapExactETHForTokens'\n        } else if (etherOut) {\n          methodName = 'swapExactTokensForETH'\n        } else {\n          methodName = 'swapExactTokensForTokens'\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n        } else {\n          methodName = 'swapTokensForExactTokens'\n        }\n        break\n    }\n    return methodName\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let args: (string | string[])[]\n    let value: string\n    const methodName = Trade.methodNameForTradeType(trade.tradeType, etherIn, etherOut, useFeeOnTransfer)\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","GAS_ESTIMATES","swapETHForExactTokens","swapExactETHForTokens","swapExactTokensForETH","swapExactTokensForTokens","swapTokensForExactETH","swapTokensForExactTokens","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","HARDHAT","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","gasPriceToBeat","minerBribeMargin","amounts","Array","nextPairs","etherIn","etherOut","minerBribe","estimatedGas","margin","gasPriceToBeatWithMargin","calculateMargin","calculateMinerBribe","methodName","numHops","gasBeforeHopFactor","factor","additionalGas","estimatedGasForMethod","methodNameForTradeType","EXACT_INPUT","i","iAmount","modifiedAmount","console","log","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactQuote","slippage","computePriceImpact","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","useFeeOnTransfer","toHex","Router","swapCallParameters","trade","options","ttl","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}