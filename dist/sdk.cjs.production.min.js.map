{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants/index.ts","../src/errors.ts","../src/entities/AbstractCurrency.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/NativeCurrency.ts","../src/entities/Price.ts","../src/entities/Percent.ts","../src/utils.ts","../src/entities/Token.ts","../src/entities/Pair.ts","../src/entities/Route.ts","../src/entities/natives/Ether.ts","../src/entities/Trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | number | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÃ–RLI = 5,\n  KOVAN = 42,\n  HARDHAT = 1337\n}\n\nexport enum Exchange {\n  UNI,\n  SUSHI,\n  UNDEFINED\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n)\n\nexport const FACTORY_ADDRESS: { [exchange in Exchange]: string } = {\n  [Exchange.UNI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [Exchange.SUSHI]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [Exchange.UNDEFINED]: '0x0'\n}\n\nexport const ROUTER_ADDRESS: { [exchange in Exchange]: string } = {\n  [Exchange.UNI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [Exchange.SUSHI]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9',\n  [Exchange.UNDEFINED]: '0x0'\n}\n\nexport const INIT_CODE_HASH: { [exchange in Exchange]: string } = {\n  [Exchange.UNI]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n  [Exchange.SUSHI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [Exchange.UNDEFINED]: '0x0'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport enum MethodName {\n  swapETHForExactTokens = 'swapETHForExactTokens',\n  swapExactETHForTokens = 'swapExactETHForTokens',\n  swapExactTokensForETH = 'swapExactTokensForETH',\n  swapExactTokensForTokens = 'swapExactTokensForTokens',\n  swapTokensForExactETH = 'swapTokensForExactETH',\n  swapTokensForExactTokens = 'swapTokensForExactTokens'\n}\n\nexport const GAS_ESTIMATES: { [methodName: string]: BigintIsh } = {\n  swapETHForExactTokens: '155485',\n  swapExactETHForTokens: '151393',\n  swapExactTokensForETH: '211606',\n  swapExactTokensForTokens: '216959',\n  swapTokensForExactETH: '241879',\n  swapTokensForExactTokens: '244052'\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(\n    chainId: number,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(\n      decimals >= 0 && decimals < 255 && Number.isInteger(decimals),\n      'DECIMALS'\n    )\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import _Big, { RoundingMode } from 'big.js'\n\nimport JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../constants'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(\n    numerator: BigintIsh,\n    denominator: BigintIsh = JSBI.BigInt(1)\n  ) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (\n      fractionish instanceof JSBI ||\n      typeof fractionish === 'number' ||\n      typeof fractionish === 'string'\n    )\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish)\n      return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(\n      JSBI.remainder(this.numerator, this.denominator),\n      this.denominator\n    )\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.add(this.numerator, otherParsed.numerator),\n        this.denominator\n      )\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.subtract(this.numerator, otherParsed.numerator),\n        this.denominator\n      )\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(significantDigits),\n      `${significantDigits} is not an integer.`\n    )\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding],\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(decimalPlaces),\n      `${decimalPlaces} is not an integer.`\n    )\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256, Rounding, BigintIsh } from '../constants'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(\n    currency: T,\n    rawAmount: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(\n    currency: T,\n    numerator: BigintIsh,\n    denominator?: BigintIsh\n  ) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(\n      JSBI.BigInt(10),\n      JSBI.BigInt(currency.decimals)\n    )\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      added.numerator,\n      added.denominator\n    )\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      subtracted.numerator,\n      subtracted.denominator\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      multiplied.numerator,\n      multiplied.denominator\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      divided.numerator,\n      divided.denominator\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super\n      .divide(this.decimalScale)\n      .toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super\n      .divide(this.decimalScale)\n      .toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString())\n      .div(this.decimalScale.toString())\n      .toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency.wrapped,\n      this.numerator,\n      this.denominator\n    )\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../constants'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport { CurrencyAmount } from './CurrencyAmount'\n\nexport class Price<\n  TBase extends Currency,\n  TQuote extends Currency\n> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase,\n      quoteCurrency: TQuote,\n      denominator: BigintIsh,\n      numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(\n      this.quoteCurrency,\n      this.baseCurrency,\n      this.numerator,\n      this.denominator\n    )\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(\n    other: Price<TQuote, TOtherQuote>\n  ): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(\n      this.baseCurrency,\n      other.quoteCurrency,\n      fraction.denominator,\n      fraction.numerator\n    )\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(\n      this.quoteCurrency,\n      result.numerator,\n      result.denominator\n    )\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.adjustedForDecimals.toSignificant(\n      significantDigits,\n      format,\n      rounding\n    )\n  }\n\n  public toFixed(\n    decimalPlaces: number = 4,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}","import { Rounding, _100 } from '../constants'\nimport { Fraction } from './Fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(\n    significantDigits: number = 5,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.multiply(_100_PERCENT).toSignificant(\n      significantDigits,\n      format,\n      rounding\n    )\n  }\n\n  public toFixed(\n    decimalPlaces: number = 2,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress, getCreate2Address } from '@ethersproject/address'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { Exchange, BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA, GAS_ESTIMATES, INIT_CODE_HASH, FACTORY_ADDRESS} from './constants'\nimport { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Price } from './entities/Price'\nimport { Token } from './entities/Token'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    //console.log('checksum', checksummedAddress, address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh)\n    : JSBI.BigInt(bigintIsh)\n}\n\nexport function estimatedGasForMethod(methodName: string = 'swapTokensForExactETH', numHops: BigintIsh = '1'): JSBI {\n  const gasBeforeHopFactor: BigintIsh = parseBigintIsh(GAS_ESTIMATES[methodName])\n  const factor = parseBigintIsh('0') // TODO: change this\n  const additionalGas = JSBI.multiply(parseBigintIsh(numHops), factor)\n  return JSBI.add(gasBeforeHopFactor, additionalGas)\n}\n\nexport function calculateMinerBribe(gasPriceToBeat: BigintIsh, estimatedGas: BigintIsh, margin: BigintIsh): JSBI {\n  gasPriceToBeat = parseBigintIsh(gasPriceToBeat)\n  estimatedGas = parseBigintIsh(estimatedGas)\n  const gasPriceToBeatWithMargin = calculateMargin(gasPriceToBeat, margin)\n  return JSBI.multiply(gasPriceToBeatWithMargin, estimatedGas)\n}\n\n// add x%\nexport function calculateMargin(value: BigintIsh, margin: BigintIsh): JSBI {\n  value = parseBigintIsh(value)\n  margin = JSBI.multiply(parseBigintIsh(margin), parseBigintIsh('100'))\n  const numerator = JSBI.multiply(value, JSBI.add(parseBigintIsh('10000'), margin))\n  const denominator = parseBigintIsh('10000')\n  return JSBI.divide(numerator, denominator)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n\nexport const computePairAddress = ({\n  exchange,\n  tokenA,\n  tokenB,\n}: {\n  exchange: Exchange\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB)\n    ? [tokenA, tokenB]\n    : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    FACTORY_ADDRESS[exchange],\n    keccak256(\n      ['bytes'],\n      [pack(['address', 'address'], [token0.address, token1.address])]\n    ),\n    INIT_CODE_HASH[exchange]\n  )\n}\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<\n  TBase extends Currency,\n  TQuote extends Currency\n>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount\n    .subtract(outputAmount)\n    .divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n\n\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../constants'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils'\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return (\n      other.isToken &&\n      this.chainId === other.chainId &&\n      this.address === other.address\n    )\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(\n  currencyA: Currency,\n  currencyB: Currency\n): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH: { [chainId: number]: Token } = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.HARDHAT]: new Token(\n    ChainId.HARDHAT,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import { Price } from './Price'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport {\n  BigintIsh,\n  Exchange,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n} from '../constants'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { sqrt, computePairAddress } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './Token'\n\nexport class Pair {\n  public readonly exchange: Exchange\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token, exchange: Exchange): string {\n    return computePairAddress({\n      exchange,\n      tokenA,\n      tokenB,\n    })\n  }\n\n  public constructor(\n    currencyAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>,\n    exchange: Exchange\n  ) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(\n      tokenAmountB.currency\n    ) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency, exchange),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [\n      CurrencyAmount<Token>,\n      CurrencyAmount<Token>\n    ]\n    this.exchange = exchange\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(\n      this.token0,\n      this.token1,\n      result.denominator,\n      result.numerator\n    )\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(\n      this.token1,\n      this.token0,\n      result.denominator,\n      result.numerator\n    )\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO)\n    ) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0\n    )\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(\n      JSBI.multiply(inputReserve.quotient, _1000),\n      inputAmountWithFee\n    )\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.exchange\n      ),\n    ]\n  }\n\n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(\n        outputAmount.quotient,\n        this.reserveOf(outputAmount.currency).quotient\n      )\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0\n    )\n    const numerator = JSBI.multiply(\n      JSBI.multiply(inputReserve.quotient, outputAmount.quotient),\n      _1000\n    )\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\n      _997\n    )\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.exchange\n      ),\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(\n      tokenAmountB.currency\n    ) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(\n      tokenAmounts[0].currency.equals(this.token0) &&\n        tokenAmounts[1].currency.equals(this.token1),\n      'TOKEN'\n    )\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(\n        JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient),\n        this.reserve0.quotient\n      )\n      const amount1 = JSBI.divide(\n        JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient),\n        this.reserve1.quotient\n      )\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(\n      JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient),\n      'LIQUIDITY'\n    )\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(\n          JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient)\n        )\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(\n            totalSupply.quotient,\n            JSBI.subtract(rootK, rootKLast)\n          )\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(\n            CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity)\n          )\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(\n        JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient),\n        totalSupplyAdjusted.quotient\n      )\n    )\n  }\n}\n","\nimport invariant from 'tiny-invariant'\nimport { Currency } from './Currency'\nimport { Token } from './Token'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(\n      typeof output === 'undefined' ||\n        pairs[pairs.length - 1].involvesToken(output.wrapped),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(\n        currentInput.equals(pair.token0) || currentInput.equals(pair.token1),\n        'PATH'\n      )\n      const output = currentInput.equals(pair.token0)\n        ? pair.token1\n        : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(\n              pair.reserve0.currency,\n              pair.reserve1.currency,\n              pair.reserve0.quotient,\n              pair.reserve1.quotient\n            )\n          : new Price(\n              pair.reserve1.currency,\n              pair.reserve0.currency,\n              pair.reserve1.quotient,\n              pair.reserve0.quotient\n            )\n      )\n    }\n    const reduced = prices\n      .slice(1)\n      .reduce(\n        (accumulator, currentValue) => accumulator.multiply(currentValue),\n        prices[0]\n      )\n    return (this._midPrice = new Price(\n      this.input,\n      this.output,\n      reduced.denominator,\n      reduced.numerator\n    ))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}","import { Token, WETH } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth = WETH[this.chainId]\n    invariant(!!weth, 'WRAPPED')\n    return weth\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return (\n      this._etherCache[chainId] ??\n      (this._etherCache[chainId] = new Ether(chainId))\n    )\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { BigintIsh, Exchange, ONE, TradeType, ZERO, MethodName } from '../constants'\nimport { sortedInsert, calculateMinerBribe, estimatedGasForMethod, calculateMargin, computePriceImpact } from '../utils'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Pair } from './Pair'\nimport { Route } from './Route'\nimport { Ether } from './natives'\nimport { currencyEquals, Token, WETH} from './Token'\n\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\nexport type MinTradeEstimate = { [tradeType in TradeType]: CurrencyAmount<Token|Currency> }\n\ntype BribeEstimates = { [methodName in MethodName]: CurrencyAmount<Currency>}\n\nexport type BribeEstimate = {\n  estimates: BribeEstimates,\n  minBribe: CurrencyAmount<Currency>,\n  maxBribe: CurrencyAmount<Currency>,\n  meanBribe: CurrencyAmount<Currency>, \n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<\n  TInput extends Currency,\n  TOutput extends Currency\n>(a: InputOutput<TInput, TOutput>, b: InputOutput<TInput, TOutput>): number {\n  // must have same input and output token for comparison\n  invariant(\n    a.inputAmount.currency.equals(b.inputAmount.currency),\n    'INPUT_CURRENCY'\n  )\n  invariant(\n    a.outputAmount.currency.equals(b.outputAmount.currency),\n    'OUTPUT_CURRENCY'\n  )\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TTradeType extends TradeType\n>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TTradeType extends TradeType\n> {\n  /**\n   * The exchange of the trade e.g. Uni, Sushi\n   */\n  public readonly exchange: Exchange\n\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The bribe amount needed to execute the trade\n   */\n  public readonly minerBribe: CurrencyAmount<Token>\n  /**\n   * The estimated gas used for the trade\n   */\n  public readonly estimatedGas: BigintIsh\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  \n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n    * Constructs an exact in trade with the given amount in and route\n    * @param route route of the exact in trade\n    * @param amountIn the amount being passed in\n    * @param gasPriceToBeat the gas price used to calculate the bribe\n    * @param minerBribeMargin the margin to beat the gas price by\n    */\n    public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT, gasPriceToBeat, minerBribeMargin)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   * @param gasPriceToBeat the gas price used to calculate the bribe\n  * @param minerBribeMargin the margin to beat the gas price by\n   */\n   public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT, gasPriceToBeat, minerBribeMargin)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT\n      ? CurrencyAmount<TInput>\n      : CurrencyAmount<TOutput>,\n    tradeType: TTradeType,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const amounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    const etherIn = route.input.isNative\n    const etherOut = route.output.isNative\n    const methodName = Trade.methodNameForTradeType(tradeType, etherIn, etherOut)\n    const estimatedGas = estimatedGasForMethod(methodName, (route.path.length - 1).toString())\n    const minerBribe = calculateMinerBribe(gasPriceToBeat, estimatedGas, minerBribeMargin)\n\n    this.estimatedGas = estimatedGas.toString()\n    this.minerBribe = CurrencyAmount.fromRawAmount(WETH[route.chainId], minerBribe)\n    // this.minerBribe = CurrencyAmount.ether(minerBribe)\n\n    let modifiedInput: CurrencyAmount<Token> = amount.wrapped\n    let modifiedOutput: CurrencyAmount<Token> = amount.wrapped\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n\n      amounts[0] = amount.wrapped\n\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n\n        let inputAmount = amounts[i]\n        // if the input is ETH, calculate the output amount with the\n        // the input reduced by the minerBribe\n        if (etherIn && i === 0) {\n          // reduce the inputAmount by this.minerBribe\n          invariant(\n            inputAmount.greaterThan(this.minerBribe),\n            `Miner bribe ${this.minerBribe.toExact()} is greater than input ETH ${inputAmount.toExact()}`\n          )\n          const modifiedAmount = inputAmount.subtract(this.minerBribe)\n          // console.log('original amount in', inputAmount.toExact())\n          // console.log('modified amount in', modifiedAmount.toExact())\n          inputAmount = modifiedAmount\n          modifiedInput = modifiedAmount\n        }\n        \n        const [outputAmount, nextPair] = pair.getOutputAmount(inputAmount)\n\n        // if the output is ETH, reduce the output amount\n        // by the miner bribe\n        if (etherOut && i === route.path.length - 2) {\n          // reduce the outputAmount by this.minerBribe\n          invariant(\n            outputAmount.greaterThan(this.minerBribe),\n            `Miner bribe ${this.minerBribe.toExact()} is greater than output ETH ${outputAmount.toExact()}`\n          )\n          const modifiedAmount = outputAmount.subtract(this.minerBribe)\n          // console.log('original amount out', outputAmount.toExact())\n          // console.log('modified amount out', modifiedAmount.toExact())\n          amounts[i + 1] = modifiedAmount\n          modifiedOutput = outputAmount\n        } else {\n          modifiedOutput = outputAmount\n          amounts[i + 1] = outputAmount\n        }\n\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        let outputAmount = amounts[i]\n        // if the output is ETH, calculate the input amount with the\n        // the output increased by the minerBribe\n        if (etherOut && i === route.path.length - 1) {\n          // increase the outputAmount by this.minerBribe\n          const modifiedAmount = outputAmount.add(this.minerBribe)\n          // console.log('original amount out', outputAmount.toExact())\n          // console.log('modified amount out', modifiedAmount.toExact())\n          outputAmount = modifiedAmount\n          modifiedOutput = modifiedAmount\n        } else if (i === route.path.length - 1) {\n          modifiedOutput = outputAmount\n        }\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(outputAmount)\n        // if the input is ETH, increase the input amount\n        // by the miner bribe\n        if (etherIn && i === 1) {\n          // increase the input amount by this.minerBribe\n          const modifiedAmount = inputAmount.add(this.minerBribe)\n          // console.log('original amount in', inputAmount.toExact())\n          // console.log('modified amount in', modifiedAmount.toExact())\n          amounts[i - 1] = modifiedAmount\n          modifiedInput = inputAmount\n        } else if (i === 1) {\n          modifiedInput = inputAmount\n          amounts[i - 1] = modifiedInput\n        } else {\n          amounts[i - 1] = inputAmount\n        }\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.exchange = route.pairs[0].exchange\n    this.inputAmount = CurrencyAmount.fromFractionalAmount(\n      route.input,\n      amounts[0].numerator,\n      amounts[0].denominator\n    )\n    // this.inputAmount =\n    //   tradeType === TradeType.EXACT_INPUT\n    //     ? amount\n    //     : route.input === ETHER\n    //     ? CurrencyAmount.ether(amounts[0].raw)\n    //     : amounts[0]\n    this.outputAmount = CurrencyAmount.fromFractionalAmount(\n      route.output,\n      amounts[amounts.length - 1].numerator,\n      amounts[amounts.length - 1].denominator\n    )\n    // this.outputAmount =\n    //   tradeType === TradeType.EXACT_OUTPUT\n    //     ? amount\n    //     : route.output === ETHER\n    //     ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n    //     : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      route.input,\n      route.output,\n      modifiedInput.quotient,\n      modifiedOutput.quotient\n    )\n    // this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.priceImpact = computePriceImpact(\n      route.midPrice, \n      CurrencyAmount.fromFractionalAmount(\n        route.input,\n        modifiedInput.numerator,\n        modifiedInput.denominator\n      ), \n      CurrencyAmount.fromFractionalAmount(\n        route.output,\n        modifiedOutput.numerator,\n        modifiedOutput.denominator\n      )\n    )\n    \n    // console.log('old price impact', computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount).toSignificant(6))\n    // console.log('******************')\n    // console.log('*** TRADE START **')\n    // console.log('******************')\n    // console.log('inputAmount', this.inputAmount.toSignificant(6))\n    // console.log('outputAmount', this.outputAmount.toSignificant(6))\n    // console.log('executionPrice', this.executionPrice.toSignificant(6))\n    // console.log('nextMidPrice', this.nextMidPrice.toSignificant(6))\n    // console.log('priceImpact', this.priceImpact.toSignificant(6))\n    // console.log('minerBribe', this.minerBribe.toSignificant(6))\n    // console.log('estimatedGas', this.estimatedGas)\n    // console.log('******************')\n    // console.log('*** TRADE END **')\n    // console.log('******************')\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(\n        this.outputAmount.currency,\n        slippageAdjustedAmountOut\n      )\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(\n        this.inputAmount.currency,\n        slippageAdjustedAmountIn\n      )\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param exchange the exchange this trade will be performed on\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @param gasPriceToBeat used to calculate the miner bribe\n   * @param minerBribeMargin used as the margin for the miner bribe calculation\n   */\n  public static bestTradeExactIn<\n    TInput extends Currency,\n    TOutput extends Currency\n>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(nextAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const tradeType = TradeType.EXACT_INPUT\n    const amountIn = nextAmountIn.wrapped//wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = currencyOut.wrapped//wrappedCurrency(currencyOut, chainId)\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        try {\n          const newTrade = new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            tradeType,\n            gasPriceToBeat,\n            minerBribeMargin\n          )\n          sortedInsert(\n            bestTrades,\n            newTrade,\n            maxNumResults,\n            tradeComparator\n          )\n        } catch (e) {\n          // catch the invariant\n          // console.log('trade constructor err', e)\n        }\n        \n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          gasPriceToBeat,\n          minerBribeMargin,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param exchange the exchange this trade will be performed on\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @param gasPriceToBeat used to calculate the miner bribe\n   * @param minerBribeMargin used as the margin for the miner bribe calculation\n   */\n  public static bestTradeExactOut<\n    TInput extends Currency,\n    TOutput extends Currency\n>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(nextAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    \n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        try {\n          const newTrade = new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT,\n            gasPriceToBeat,\n            minerBribeMargin\n          )\n          sortedInsert(\n            bestTrades,\n            newTrade,\n            maxNumResults,\n            tradeComparator\n          )\n        } catch (e) {\n          // catch the invariant\n          // console.log('trade constructor err', e)\n        }\n        \n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          gasPriceToBeat,\n          minerBribeMargin,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * return the mistX router method name for the trade\n   * @param tradeType the type of trade, TradeType\n   * @param etherIn the input currency is ether\n   * @param etherOut the output currency is ether\n   * @param useFeeOnTransfer Whether any of the tokens in the path are fee on transfer tokens, TradeOptions.feeOnTransfer\n   * @param enforceUseFeeOnTransfer use to throw an invariant if there is no useFeeOnTransfer option for TradeType.EXACT_OUTPUT trades\n   */\n  public static methodNameForTradeType(\n    tradeType: TradeType,\n    etherIn: boolean,\n    etherOut: boolean,\n    useFeeOnTransfer?: boolean\n  ): string {\n    let methodName: string\n    switch (tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = 'swapExactETHForTokens'\n        } else if (etherOut) {\n          methodName = 'swapExactTokensForETH'\n        } else {\n          methodName = 'swapExactTokensForTokens'\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n        } else {\n          methodName = 'swapTokensForExactTokens'\n        }\n        break\n    }\n    return methodName\n  }\n\n  /**\n   * return the mistX router method name for the trade\n   * @param pairs\n   * @param currencyIn\n   * @param currencyOut\n   * @param gasPriceToBeat\n   * @param minerBribeMargin\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   */\n  public static estimateMinTradeAmounts(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyOut: Currency,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    minTradeMargin: BigintIsh,\n    { maxHops = 3 }: BestTradeOptions = {}\n  ): MinTradeEstimate | null {\n    \n    const etherIn = currencyIn.isNative\n    const etherOut = currencyOut.isNative\n\n    if (!etherIn && !etherOut) return null\n\n    const exactInGas = estimatedGasForMethod(\n      Trade.methodNameForTradeType(TradeType.EXACT_INPUT, etherIn, etherOut),\n      maxHops.toString()\n    )\n    const exactOutGas = estimatedGasForMethod(\n      Trade.methodNameForTradeType(TradeType.EXACT_OUTPUT, etherIn, etherOut),\n      maxHops.toString()\n    )\n\n    const exactInBribe = calculateMargin(\n      calculateMinerBribe(gasPriceToBeat, exactInGas, minerBribeMargin),\n      minTradeMargin\n    )\n    const exactOutBribe = calculateMargin(\n      calculateMinerBribe(gasPriceToBeat, exactOutGas, minerBribeMargin),\n      minTradeMargin\n    )\n\n    let minTokenAmountIn: CurrencyAmount<Token|Currency> | undefined\n    let minTokenAmountOut: CurrencyAmount<Token|Currency> | undefined\n    if (etherIn){\n      const outTrade = Trade.bestTradeExactOut(\n        pairs,\n        currencyOut,\n        CurrencyAmount.fromRawAmount(currencyIn, exactOutBribe),\n        '0',\n        '0'\n      )[0]\n      if (outTrade){\n        minTokenAmountIn = CurrencyAmount.fromRawAmount(currencyIn, exactInBribe)\n        minTokenAmountOut = outTrade.inputAmount\n      }\n    } else if (etherOut){\n      const inTrade = Trade.bestTradeExactIn(\n        pairs,\n        CurrencyAmount.fromRawAmount(currencyOut, exactInBribe),\n        currencyIn,\n        '0',\n        '0'\n      )[0]\n      if (inTrade){\n        minTokenAmountIn = inTrade.outputAmount\n        minTokenAmountOut = CurrencyAmount.fromRawAmount(currencyIn, exactOutBribe)\n      }\n      \n    }\n    if (!minTokenAmountIn || !minTokenAmountOut) return null\n\n    return {\n      [TradeType.EXACT_INPUT]: minTokenAmountIn,\n      [TradeType.EXACT_OUTPUT]: minTokenAmountOut\n    }\n  }\n\n  /**\n   * Estimate bribe amounts given gas price and margin\n   * @param gasPriceToBeat\n   * @param minerBribeMargin\n   */\n   public static estimateBribeAmounts(\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n  ): BribeEstimate | null {\n    const ETH = Ether.onChain(1)\n    const bribesByMethod: BribeEstimates  = {\n      [MethodName.swapETHForExactTokens]: CurrencyAmount.fromRawAmount(ETH, calculateMinerBribe(gasPriceToBeat, estimatedGasForMethod('swapETHForExactTokens'), minerBribeMargin)),\n      [MethodName.swapExactETHForTokens]: CurrencyAmount.fromRawAmount(ETH, calculateMinerBribe(gasPriceToBeat, estimatedGasForMethod('swapExactETHForTokens'), minerBribeMargin)),\n      [MethodName.swapExactTokensForETH]: CurrencyAmount.fromRawAmount(ETH, calculateMinerBribe(gasPriceToBeat, estimatedGasForMethod('swapExactTokensForETH'), minerBribeMargin)),\n      [MethodName.swapExactTokensForTokens]: CurrencyAmount.fromRawAmount(ETH, calculateMinerBribe(gasPriceToBeat, estimatedGasForMethod('swapExactTokensForTokens'), minerBribeMargin)),\n      [MethodName.swapTokensForExactETH]: CurrencyAmount.fromRawAmount(ETH, calculateMinerBribe(gasPriceToBeat, estimatedGasForMethod('swapTokensForExactETH'), minerBribeMargin)),\n      [MethodName.swapTokensForExactTokens]: CurrencyAmount.fromRawAmount(ETH, calculateMinerBribe(gasPriceToBeat, estimatedGasForMethod('swapTokensForExactTokens'), minerBribeMargin)),\n    }\n    let minBribe: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(ETH, '1000000000000000000000000000000000000000000000000')\n    let maxBribe: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(ETH, '0')\n    let totalBribe: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(ETH, '0')\n    for (const methodName in MethodName){\n      const bribe: CurrencyAmount<Currency> = bribesByMethod[methodName as MethodName]\n      \n      totalBribe.add(bribe)\n      if (bribe.lessThan(minBribe)) minBribe = bribe\n      if (bribe.greaterThan(maxBribe)) maxBribe = bribe\n    }\n\n    const meanfraction: Fraction = totalBribe.divide(String(Object.keys(MethodName).length))\n    const meanBribe = CurrencyAmount.fromRawAmount(ETH, JSBI.divide(meanfraction.numerator,meanfraction.denominator))\n    return {\n      estimates: bribesByMethod,\n      minBribe,\n      maxBribe,\n      meanBribe,\n    }\n    \n  }\n}\n","import invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { TradeType } from './constants'\nimport { Currency, CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: [SwapDataArr, string]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport interface SwapData {\n  amount0: string\n  amount1: string\n  path: string[]\n  to: string\n  deadline: string\n}\n\nexport type SwapDataArr = [string, string, string[], string, string]\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n   public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const minerBribe: string = toHex(trade.minerBribe)\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n    const swapData: SwapData = {\n      amount0: amountIn,\n      amount1: amountOut,\n      path,\n      to,\n      deadline\n    }\n    let value: string\n    const methodName = Trade.methodNameForTradeType(trade.tradeType, etherIn, etherOut, useFeeOnTransfer)\n    \n    switch (methodName) {\n      case 'swapExactETHForTokens':\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = amountIn\n        break\n      case 'swapExactTokensForETH':\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = ZERO_HEX\n        break\n      case 'swapExactTokensForTokens':\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = minerBribe\n        break\n      case 'swapETHForExactTokens':\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = amountIn\n        break\n      case 'swapTokensForExactETH':\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        swapData.amount0 = amountOut\n        swapData.amount1 = amountIn\n        value = minerBribe\n        break\n      case 'swapTokensForExactTokens':\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        swapData.amount0 = amountOut\n        swapData.amount1 = amountIn\n        value = minerBribe\n        break\n      default:\n        // args = []\n        value = ''\n    }\n    const swapDataArr: SwapDataArr = [swapData.amount0, swapData.amount1, swapData.path, swapData.to, swapData.deadline]\n    const args: [SwapDataArr, string] = [swapDataArr, minerBribe]\n\n    invariant((methodName && args && value), 'CALL_PARAMS_MISSING')\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/Token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n}\n"],"names":["ChainId","Exchange","TradeType","Rounding","SolidityType","MaxUint256","JSBI","BigInt","FACTORY_ADDRESS","UNI","SUSHI","UNDEFINED","ROUTER_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MethodName","SOLIDITY_TYPE_MAXIMA","uint8","uint256","GAS_ESTIMATES","swapETHForExactTokens","swapExactETHForTokens","swapExactTokensForETH","swapExactTokensForTokens","swapTokensForExactETH","swapTokensForExactTokens","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","AbstractCurrency","chainId","decimals","symbol","Number","isSafeInteger","invariant","isInteger","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","this","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","_Fraction","toExact","isToken","wrapped","NativeCurrency","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","_100_PERCENT","Percent","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","estimatedGasForMethod","methodName","numHops","gasBeforeHopFactor","factor","additionalGas","calculateMinerBribe","gasPriceToBeat","estimatedGas","margin","gasPriceToBeatWithMargin","calculateMargin","value","sqrt","y","solidityType","greaterThanOrEqual","x","z","notEqual","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","Token","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","HARDHAT","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","Pair","currencyAmountA","tokenAmountB","exchange","tokenAmounts","liquidityToken","tokenA","tokenB","getCreate2Address","keccak256","pack","computePairAddress","involvesToken","token","token0","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","pairs","input","output","every","pair","wrappedInput","path","entries","currentInput","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","Ether","_NativeCurrency","onChain","_etherCache","isNative","weth","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","minerBribeMargin","amounts","Array","nextPairs","etherIn","etherOut","methodNameForTradeType","minerBribe","modifiedInput","modifiedOutput","EXACT_INPUT","i","modifiedAmount","nextPair","executionPrice","midPrice","quotedOutputAmount","computePriceImpact","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","e","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","useFeeOnTransfer","estimateMinTradeAmounts","minTradeMargin","minTokenAmountIn","minTokenAmountOut","exactInGas","exactOutGas","exactInBribe","exactOutBribe","outTrade","inTrade","estimateBribeAmounts","ETH","bribesByMethod","minBribe","maxBribe","totalBribe","bribe","meanfraction","String","keys","estimates","meanBribe","toHex","Router","swapCallParameters","trade","options","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","Boolean","feeOnTransfer","swapData","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4"],"mappings":"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"}