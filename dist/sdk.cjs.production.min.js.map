{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÃ–RLI = 5,\n  KOVAN = 42,\n  HARDHAT = 1337\n}\n\nexport enum Exchange {\n  UNI,\n  SUSHI,\n  UNDEFINED\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [exchange in Exchange]: string } = {\n  [Exchange.UNI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [Exchange.SUSHI]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [Exchange.UNDEFINED]: '0x0',\n}\n\nexport const ROUTER_ADDRESS: { [exchange in Exchange]: string } = {\n  [Exchange.UNI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [Exchange.SUSHI]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9',\n  [Exchange.UNDEFINED]: '0x0'\n}\n\nexport const INIT_CODE_HASH: { [exchange in Exchange]: string } = {\n  [Exchange.UNI]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n  [Exchange.SUSHI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [Exchange.UNDEFINED]: '0x0',\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport const GAS_ESTIMATES: {[ methodName: string ]: BigintIsh} = {\n  swapETHForExactTokens: '174552',\n  swapExactETHForTokens: '161308',\n  swapExactTokensForETH: '146035',\n  swapExactTokensForTokens: '143216',\n  swapTokensForExactETH: '189218',\n  swapTokensForExactTokens: '185118'\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\n// import warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA, GAS_ESTIMATES } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    // this needs to be uncommented before prod MVP\n    // warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\nexport function estimatedGasForMethod(methodName: string = 'swapTokensForExactETH', numHops: BigintIsh = '1'): JSBI {\n  const gasBeforeHopFactor: BigintIsh = parseBigintIsh(GAS_ESTIMATES[methodName])\n  const factor = parseBigintIsh('0') // TODO: change this\n  const additionalGas = JSBI.multiply(parseBigintIsh(numHops),factor)\n  return JSBI.add(gasBeforeHopFactor,additionalGas)\n}\n\nexport function calculateMinerBribe(gasPriceToBeat: BigintIsh, estimatedGas: BigintIsh, margin: BigintIsh): JSBI {\n  gasPriceToBeat = parseBigintIsh(gasPriceToBeat)\n  estimatedGas = parseBigintIsh(estimatedGas)\n  const gasPriceToBeatWithMargin = calculateMargin(gasPriceToBeat, margin)\n  return JSBI.multiply(gasPriceToBeatWithMargin, estimatedGas)\n}\n\n// add x%\nexport function calculateMargin(value: BigintIsh, margin: BigintIsh): JSBI {\n  value = parseBigintIsh(value)\n  margin = JSBI.multiply(parseBigintIsh(margin), parseBigintIsh('100'))\n  const numerator = JSBI.multiply(value, JSBI.add(parseBigintIsh('10000'), margin))\n  const denominator = parseBigintIsh('10000')\n  return JSBI.divide(numerator,denominator)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.HARDHAT]: new Token(\n    ChainId.HARDHAT,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  Exchange,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly exchange: Exchange\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token, exchange: Exchange): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const exchangeIdentifier = '|' + exchange\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address+exchangeIdentifier]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address+exchangeIdentifier]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address+exchangeIdentifier],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[exchange],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH[exchange]\n          )\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[tokens[0].address+exchangeIdentifier][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, exchange: Exchange) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, exchange),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.exchange = exchange\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, exchange: Exchange): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), exchange)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, exchange: Exchange): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), exchange)]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { BigintIsh, ChainId, Exchange, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert, calculateMinerBribe, estimatedGasForMethod, calculateMargin } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\nexport type MinTradeEstimate = {[tradeType in TradeType]: CurrencyAmount}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount | TokenAmount\n  readonly outputAmount: CurrencyAmount | TokenAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The exchange of the trade e.g. Uni, Sushi\n   */\n   public readonly exchange: Exchange\n\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The bribe amount needed to execute the trade\n   */\n  public readonly minerBribe: CurrencyAmount\n  /**\n   * The estimated gas used for the trade\n   */\n  public readonly estimatedGas: BigintIsh\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount, exchange: Exchange, gasPriceToBeat: BigintIsh, minerBribeMargin: BigintIsh): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT, exchange, gasPriceToBeat, minerBribeMargin)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount, exchange: Exchange, gasPriceToBeat: BigintIsh, minerBribeMargin: BigintIsh): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT, exchange, gasPriceToBeat, minerBribeMargin)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType, exchange: Exchange, gasPriceToBeat: BigintIsh, minerBribeMargin: BigintIsh) {\n\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    const etherIn = route.input === ETHER\n    const etherOut = route.output === ETHER\n    const methodName = Trade.methodNameForTradeType(tradeType, etherIn, etherOut)\n    const estimatedGas = estimatedGasForMethod(methodName, (route.path.length-1).toString())\n    const minerBribe = calculateMinerBribe(gasPriceToBeat, estimatedGas, minerBribeMargin)\n    \n    this.estimatedGas = estimatedGas.toString()\n    this.minerBribe = CurrencyAmount.ether(minerBribe)\n\n    let modifiedInput: TokenAmount = wrappedAmount(amount, route.chainId)\n    let modifiedOutput: TokenAmount = wrappedAmount(amount, route.chainId)\n    \n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n\n      amounts[0] = wrappedAmount(amount, route.chainId)\n\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n\n        let inputAmount = amounts[i]\n        // if the input is ETH, calculate the output amount with the\n        // the input reduced by the minerBribe\n        if (etherIn && i === 0){\n          // reduce the inputAmount by this.minerBribe\n          invariant(inputAmount.greaterThan(this.minerBribe), `Miner bribe ${this.minerBribe.toExact()} is greater than input ETH ${inputAmount.toExact()}`)\n          const modifiedAmount = inputAmount.subtract(wrappedAmount(this.minerBribe, route.chainId))\n          // console.log('original amount in', inputAmount.toExact())\n          // console.log('modified amount in', modifiedAmount.toExact())\n          inputAmount = modifiedAmount\n          modifiedInput = modifiedAmount\n        } else if (i === 0){\n          modifiedInput = inputAmount\n        }\n        const [outputAmount, nextPair] = pair.getOutputAmount(inputAmount, exchange)\n\n        // if the output is ETH, reduce the output amount\n        // by the miner bribe\n        if (etherOut && i === route.path.length - 2){\n          // reduce the outputAmount by this.minerBribe\n          invariant(outputAmount.greaterThan(this.minerBribe), `Miner bribe ${this.minerBribe.toExact()} is greater than output ETH ${outputAmount.toExact()}`)\n          const modifiedAmount = outputAmount.subtract(wrappedAmount(this.minerBribe, route.chainId))\n          // console.log('original amount out', outputAmount.toExact())\n          // console.log('modified amount out', modifiedAmount.toExact())\n          amounts[i + 1] = modifiedAmount\n          modifiedOutput = modifiedAmount\n        } else if (i === route.path.length - 2){\n          modifiedOutput = outputAmount\n          amounts[i + 1] = outputAmount\n        } else {\n          amounts[i + 1] = outputAmount\n        }\n\n        nextPairs[i] = nextPair\n      }\n    } else {\n      \n\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        let outputAmount = amounts[i]\n        // if the output is ETH, calculate the input amount with the\n        // the output increased by the minerBribe\n        if (etherOut && i === route.path.length - 1){\n          // increase the outputAmount by this.minerBribe\n          const modifiedAmount = outputAmount.add(wrappedAmount(this.minerBribe, route.chainId))\n          // console.log('original amount out', outputAmount.toExact())\n          // console.log('modified amount out', modifiedAmount.toExact())\n          outputAmount = modifiedAmount\n          modifiedOutput = modifiedAmount\n        } else if (i === route.path.length - 1) {\n          modifiedOutput = outputAmount\n        }\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(outputAmount, exchange)\n        // if the input is ETH, increase the input amount\n        // by the miner bribe\n        if (etherIn && i === 1){\n          // increase the input amount by this.minerBribe\n          const modifiedAmount = inputAmount.add(wrappedAmount(this.minerBribe, route.chainId))\n          // console.log('original amount in', inputAmount.toExact())\n          // console.log('modified amount in', modifiedAmount.toExact())\n          amounts[i - 1] = modifiedAmount\n          modifiedInput = modifiedAmount\n        } else if (i === 1){\n          modifiedInput = inputAmount\n          amounts[i - 1] = modifiedInput\n        } else {\n          amounts[i - 1] = inputAmount\n        }\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.exchange = exchange\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n          ? CurrencyAmount.ether(amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n          ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, modifiedInput, modifiedOutput)\n    \n    // console.log('******************')\n    // console.log('*** TRADE START **')\n    // console.log('******************')\n    // console.log('inputAmount', this.inputAmount.toSignificant(6))\n    // console.log('outputAmount', this.outputAmount.toSignificant(6))\n    // console.log('executionPrice', this.executionPrice.toSignificant(6))\n    // console.log('nextMidPrice', this.nextMidPrice.toSignificant(6))\n    // console.log('priceImpact', this.priceImpact.toSignificant(6))\n    // console.log('minerBribe', this.minerBribe.toSignificant(6))\n    // console.log('estimatedGas', this.estimatedGas)\n    // console.log('******************')\n    // console.log('*** TRADE END **')\n    // console.log('******************')\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param exchange the exchange this trade will be performed on\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @param gasPriceToBeat used to calculate the miner bribe\n   * @param minerBribeMargin used as the margin for the miner bribe calculation\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    exchange: Exchange,\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = [],\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    const tradeType = TradeType.EXACT_INPUT\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn, exchange)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            tradeType,\n            exchange,\n            gasPriceToBeat,\n            minerBribeMargin\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          exchange,\n          amountOut,\n          currencyOut,\n          gasPriceToBeat,\n          minerBribeMargin,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades,\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param exchange the exchange this trade will be performed on\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @param gasPriceToBeat used to calculate the miner bribe\n   * @param minerBribeMargin used as the margin for the miner bribe calculation\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    exchange: Exchange,\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = [],\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut, exchange)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT,\n            exchange,\n            gasPriceToBeat,\n            minerBribeMargin\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          exchange,\n          currencyIn,\n          amountIn,\n          gasPriceToBeat,\n          minerBribeMargin,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades,\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * return the mistX router method name for the trade\n   * @param tradeType the type of trade, TradeType\n   * @param etherIn the input currency is ether\n   * @param etherOut the output currency is ether\n   * @param useFeeOnTransfer Whether any of the tokens in the path are fee on transfer tokens, TradeOptions.feeOnTransfer\n   * @param enforceUseFeeOnTransfer use to throw an invariant if there is no useFeeOnTransfer option for TradeType.EXACT_OUTPUT trades\n   */\n  public static methodNameForTradeType(\n    tradeType: TradeType,\n    etherIn: boolean,\n    etherOut: boolean,\n    useFeeOnTransfer?: boolean,\n  ): string {\n    let methodName: string;\n    switch (tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = 'swapExactETHForTokens'\n        } else if (etherOut) {\n          methodName = 'swapExactTokensForETH'\n        } else {\n          methodName = 'swapExactTokensForTokens'\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n        } else {\n          methodName = 'swapTokensForExactTokens'\n        }\n        break\n    }\n    return methodName\n  }\n\n  /**\n   * return the mistX router method name for the trade\n   * @param pairs\n   * @param currencyIn \n   * @param currencyOut \n   * @param gasPriceToBeat \n   * @param minerBribeMargin\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   */\n   public static estimateMinTradeAmounts(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyOut: Currency, \n    gasPriceToBeat: BigintIsh,\n    minerBribeMargin: BigintIsh,\n    minTradeMargin: BigintIsh,\n    { maxHops = 3 }: BestTradeOptions = {}\n  ): MinTradeEstimate | null {\n    const etherIn = currencyIn === ETHER\n    const etherOut = currencyOut === ETHER\n\n    if (!etherIn && !etherOut) return null;\n\n    const exactInGas = estimatedGasForMethod(Trade.methodNameForTradeType(TradeType.EXACT_INPUT, etherIn, etherOut), maxHops.toString())\n    const exactOutGas = estimatedGasForMethod(Trade.methodNameForTradeType(TradeType.EXACT_OUTPUT, etherIn, etherOut), maxHops.toString())\n\n    const exactInBribe = calculateMargin(calculateMinerBribe(gasPriceToBeat, exactInGas, minerBribeMargin), minTradeMargin)\n    const exactOutBribe = calculateMargin(calculateMinerBribe(gasPriceToBeat, exactOutGas, minerBribeMargin), minTradeMargin)\n\n    const chainId: ChainId | undefined = (currencyIn as Token).chainId || (currencyOut as Token).chainId || undefined\n    invariant(chainId, 'BRIBE_ESTIMATES_CHAINID')\n    let amountOut: TokenAmount = wrappedAmount(CurrencyAmount.ether(exactInBribe), chainId)\n    if (etherIn){\n      amountOut = wrappedAmount(CurrencyAmount.ether(exactOutBribe), chainId)\n    } \n\n    let minTokenAmountIn: CurrencyAmount | TokenAmount | undefined\n    let minTokenAmountOut: CurrencyAmount | TokenAmount | undefined\n\n    for (let i = 0; i < pairs.length; i++){\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue \n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      try {\n        if (etherIn){\n          minTokenAmountIn = CurrencyAmount.ether(exactInBribe)\n          ;[minTokenAmountOut] = pair.getInputAmount(amountOut, Exchange.UNI)\n        } else if (etherOut) {\n          minTokenAmountOut = CurrencyAmount.ether(exactInBribe)\n          ;[minTokenAmountIn] = pair.getInputAmount(amountOut, Exchange.UNI)\n        } \n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n    }\n\n    if (!minTokenAmountIn || !minTokenAmountOut) return null;\n\n    return {\n      [TradeType.EXACT_INPUT]: minTokenAmountIn,\n      [TradeType.EXACT_OUTPUT]: minTokenAmountOut\n    }\n\n  }\n\n  \n}\n","import invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\nimport { ROUTER_ADDRESS } from './constants'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: [SwapDataArr, string, string]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport interface SwapData {\n  amount0: string\n  amount1: string\n  path: string[]\n  to: string\n  deadline: string\n}\n\nexport type SwapDataArr = [string, string, string[], string, string]\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const minerBribe: string = toHex(trade.minerBribe)\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n    const routerAddress = ROUTER_ADDRESS[trade.exchange]\n    const swapData: SwapData = {\n      amount0: amountIn,\n      amount1: amountOut,\n      path,\n      to,\n      deadline\n    }\n    let value: string\n    const methodName = Trade.methodNameForTradeType(trade.tradeType, etherIn, etherOut, useFeeOnTransfer)\n    \n    switch (methodName) {\n      case 'swapExactETHForTokens':\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = amountIn\n        break\n      case 'swapExactTokensForETH':\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = ZERO_HEX\n        break\n      case 'swapExactTokensForTokens':\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = ZERO_HEX\n        break\n      case 'swapETHForExactTokens':\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        swapData.amount0 = amountIn\n        swapData.amount1 = amountOut\n        value = amountIn\n        break\n      case 'swapTokensForExactETH':\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        swapData.amount0 = amountOut\n        swapData.amount1 = amountIn\n        value = minerBribe\n        break\n      case 'swapTokensForExactTokens':\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        swapData.amount0 = amountOut\n        swapData.amount1 = amountIn\n        value = minerBribe\n        break\n      default:\n        // args = []\n        value = ''\n    }\n    const swapDataArr: SwapDataArr = [swapData.amount0, swapData.amount1, swapData.path, swapData.to, swapData.deadline]\n    const args: [SwapDataArr, string, string] = [swapDataArr, routerAddress, minerBribe]\n\n    invariant((methodName && args && value), 'CALL_PARAMS_MISSING')\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","Exchange","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","UNI","SUSHI","UNDEFINED","ROUTER_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","GAS_ESTIMATES","swapETHForExactTokens","swapExactETHForTokens","swapExactTokensForETH","swapExactTokensForTokens","swapTokensForExactETH","swapTokensForExactTokens","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","estimatedGasForMethod","methodName","numHops","gasBeforeHopFactor","factor","additionalGas","multiply","add","calculateMinerBribe","gasPriceToBeat","estimatedGas","margin","gasPriceToBeatWithMargin","calculateMargin","numerator","denominator","divide","sqrt","y","x","z","greaterThan","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","HARDHAT","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","invert","otherParsed","equal","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","exchange","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","exchangeIdentifier","undefined","_PAIR_ADDRESS_CACHE3","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","minerBribeMargin","amounts","Array","nextPairs","etherIn","etherOut","methodNameForTradeType","minerBribe","modifiedInput","modifiedOutput","EXACT_INPUT","i","modifiedAmount","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactQuote","slippage","computePriceImpact","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","useFeeOnTransfer","estimateMinTradeAmounts","minTradeMargin","exactInGas","exactOutGas","exactInBribe","exactOutBribe","minTokenAmountIn","minTokenAmountOut","toHex","Router","swapCallParameters","trade","options","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","Boolean","feeOnTransfer","routerAddress","swapData","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}